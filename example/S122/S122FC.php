<?php
namespace fiho\s100\testS122;
use fiho\S100\ {AbstractFeatureAssociation, AbstractFeatureType, AbstractInformationAssociation, AbstractInformationType, AbstractRole, CodeListType, ComplexAttributeType, EnumerationType, Geometry, SimpleAttributeType};
define ( 'CURRENT_PS', 'testS122' );

	/**
	* S100 PS Features as PHP, generated by FIHO-S100-TOOLS-FC2PHP
	* Feature Catalogue for S-122
	*/
	
	//********************************* SIMPLE ATTRIBUTES ***********************************************************
	
			/**
			* SimpleAttribute administrativeDivision
			*
			* Administrative division is a generic term for an administrative region within a country at a level below that of the sovereign state.
			* @property text value
			*/
			class administrativeDivision extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute applicationProfile
			*
			* name of an application profile that can be used with the online resource (ISO 19115)
			* @property text value
			*/
			class applicationProfile extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute ballast
			*
			* Whether the vessel is in ballast
			* @property boolean value
			*/
			class ballast extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_boolean($value);
				}
			}
         
			/**
			* SimpleAttribute callName
			*
			* The designated call name of a station, e.g. radio station, radar station, pilot.
			* @property text value
			*/
			class callName extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute callSign
			*
			* The designated call-sign of a radio station.
			* @property text value
			*/
			class callSign extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* Enumeration cardinalDirection
			*
			* Principal and intermediate compass points.
			* @property int value
			*/
			class cardinalDirection extends EnumerationType
			{
				/**
				* Enumeration cardinalDirection
				*
				* Principal and intermediate compass points.
				* @param int value
				* 
				* 1=N
				* 2=NNE
				* 3=NE
				* 4=ENE
				* 5=E
				* 6=ESE
				* 7=SE
				* 8=SSE
				* 9=S
				* 10=SSW
				* 11=SW
				* 12=WSW
				* 13=W
				* 14=WNW
				* 15=NW
				* 16=NNW
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "N");
					$this->addValue(2, "NNE");
					$this->addValue(3, "NE");
					$this->addValue(4, "ENE");
					$this->addValue(5, "E");
					$this->addValue(6, "ESE");
					$this->addValue(7, "SE");
					$this->addValue(8, "SSE");
					$this->addValue(9, "S");
					$this->addValue(10, "SSW");
					$this->addValue(11, "SW");
					$this->addValue(12, "WSW");
					$this->addValue(13, "W");
					$this->addValue(14, "WNW");
					$this->addValue(15, "NW");
					$this->addValue(16, "NNW");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfAuthority
			*
			* The type of person, government agency or organisation granted powers of managing or controlling access to and/or activity in an area
			* @property int value
			*/
			class categoryOfAuthority extends EnumerationType
			{
				/**
				* Enumeration categoryOfAuthority
				*
				* The type of person, government agency or organisation granted powers of managing or controlling access to and/or activity in an area
				* @param int value
				* 
				* 1=customs
				* 2=border control
				* 3=police
				* 4=port
				* 5=immigration
				* 6=health
				* 7=coast guard
				* 8=agricultural
				* 9=military
				* 10=private company
				* 11=maritime police
				* 12=environmental
				* 13=fishery
				* 14=finance
				* 15=maritime
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "customs");
					$this->addValue(2, "border control");
					$this->addValue(3, "police");
					$this->addValue(4, "port");
					$this->addValue(5, "immigration");
					$this->addValue(6, "health");
					$this->addValue(7, "coast guard");
					$this->addValue(8, "agricultural");
					$this->addValue(9, "military");
					$this->addValue(10, "private company");
					$this->addValue(11, "maritime police");
					$this->addValue(12, "environmental");
					$this->addValue(13, "fishery");
					$this->addValue(14, "finance");
					$this->addValue(15, "maritime");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfCargo
			*
			* Classification of the different types of cargo that a ship may be carrying
			* @property int value
			*/
			class categoryOfCargo extends EnumerationType
			{
				/**
				* Enumeration categoryOfCargo
				*
				* Classification of the different types of cargo that a ship may be carrying
				* @param int value
				* 
				* 1=bulk
				* 2=container
				* 3=general
				* 4=category of cargo liquid
				* 5=passenger
				* 6=livestock
				* 7=dangerous or hazardous
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "bulk");
					$this->addValue(2, "container");
					$this->addValue(3, "general");
					$this->addValue(4, "category of cargo liquid");
					$this->addValue(5, "passenger");
					$this->addValue(6, "livestock");
					$this->addValue(7, "dangerous or hazardous");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfCommPref
			*
			* Classification of frequencies, VHF channels, telephone numbers, or other means of communication based on preference.
			* @property int value
			*/
			class categoryOfCommPref extends EnumerationType
			{
				/**
				* Enumeration categoryOfCommPref
				*
				* Classification of frequencies, VHF channels, telephone numbers, or other means of communication based on preference.
				* @param int value
				* 
				* 1=preferred calling
				* 2=alternate calling
				* 3=preferred working
				* 4=alternate working
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "preferred calling");
					$this->addValue(2, "alternate calling");
					$this->addValue(3, "preferred working");
					$this->addValue(4, "alternate working");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfDangerousOrHazardousCargo
			*
			* Classification of dangerous goods or hazardous materials based on the International Maritime Dangerous Goods Code (IMDG Code)
			* @property int value
			*/
			class categoryOfDangerousOrHazardousCargo extends EnumerationType
			{
				/**
				* Enumeration categoryOfDangerousOrHazardousCargo
				*
				* Classification of dangerous goods or hazardous materials based on the International Maritime Dangerous Goods Code (IMDG Code)
				* @param int value
				* 
				* 1=IMDG Code Class 1 Div. 1.1
				* 2=IMDG Code Class 1 Div. 1.2
				* 3=IMDG Code Class 1 Div. 1.3
				* 4=IMDG Code Class 1 Div. 1.4
				* 5=IMDG Code Class 1 Div. 1.5
				* 6=Class 1: Division 1.6
				* 7=IMDG Code Class 2 Div. 2.1
				* 8=IMDG Code Class 2 Div. 2.2
				* 9=IMDG Code Class 2 Div. 2.3
				* 10=IMDG Code Class 3
				* 11=IMDG Code Class 4 Div. 4.1
				* 12=IMDG Code Class 4 Div. 4.2
				* 13=IMDG Code Class 4 Div. 4.3
				* 14=IMDG Code Class 5 Div. 5.1
				* 15=IMDG Code Class 5 Div. 5.2
				* 16=IMDG Code Class 6 Div. 6.1
				* 17=IMDG Code Class 6. Div. 6.2
				* 18=IMDG Code Class 7
				* 19=IMDG Code Class 8
				* 20=IMDG Code Class 9
				* 21=Harmful Substances in packaged form
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "IMDG Code Class 1 Div. 1.1");
					$this->addValue(2, "IMDG Code Class 1 Div. 1.2");
					$this->addValue(3, "IMDG Code Class 1 Div. 1.3");
					$this->addValue(4, "IMDG Code Class 1 Div. 1.4");
					$this->addValue(5, "IMDG Code Class 1 Div. 1.5");
					$this->addValue(6, "Class 1: Division 1.6");
					$this->addValue(7, "IMDG Code Class 2 Div. 2.1");
					$this->addValue(8, "IMDG Code Class 2 Div. 2.2");
					$this->addValue(9, "IMDG Code Class 2 Div. 2.3");
					$this->addValue(10, "IMDG Code Class 3");
					$this->addValue(11, "IMDG Code Class 4 Div. 4.1");
					$this->addValue(12, "IMDG Code Class 4 Div. 4.2");
					$this->addValue(13, "IMDG Code Class 4 Div. 4.3");
					$this->addValue(14, "IMDG Code Class 5 Div. 5.1");
					$this->addValue(15, "IMDG Code Class 5 Div. 5.2");
					$this->addValue(16, "IMDG Code Class 6 Div. 6.1");
					$this->addValue(17, "IMDG Code Class 6. Div. 6.2");
					$this->addValue(18, "IMDG Code Class 7");
					$this->addValue(19, "IMDG Code Class 8");
					$this->addValue(20, "IMDG Code Class 9");
					$this->addValue(21, "Harmful Substances in packaged form");
					parent::__construct($value);
				}
			}
	     
			/**
			* S100_CodeList categoryOfMarineProtectedArea
			*
			* Classification of marine protected areas based on IUCN (International Union for Conservation of Nature and Natural Resources) categories
			* @property int value
			*/
			class categoryOfMarineProtectedArea extends CodeListType
			{
				/**
				* S100_CodeList categoryOfMarineProtectedArea
				*
				* Classification of marine protected areas based on IUCN (International Union for Conservation of Nature and Natural Resources) categories
				* @param int value
				* 
				* 1=IUCN Category Ia
				* 2=IUCN Category Ib
				* 3=IUCN Category II
				* 4=IUCN Category III
				* 5=IUCN Category IV
				* 6=IUCN Category V
				* 7=IUCN Category VI
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "IUCN Category Ia");
					$this->addValue(2, "IUCN Category Ib");
					$this->addValue(3, "IUCN Category II");
					$this->addValue(4, "IUCN Category III");
					$this->addValue(5, "IUCN Category IV");
					$this->addValue(6, "IUCN Category V");
					$this->addValue(7, "IUCN Category VI");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfRelationship
			*
			* Expresses constraints or requirements on vessel actions or activities in relation to a geographic feature, facility, or service
			* @property int value
			*/
			class categoryOfRelationship extends EnumerationType
			{
				/**
				* Enumeration categoryOfRelationship
				*
				* Expresses constraints or requirements on vessel actions or activities in relation to a geographic feature, facility, or service
				* @param int value
				* 
				* 1=prohibited
				* 2=not recommended
				* 3=permitted
				* 4=recommended
				* 5=required
				* 6=not required
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "prohibited");
					$this->addValue(2, "not recommended");
					$this->addValue(3, "permitted");
					$this->addValue(4, "recommended");
					$this->addValue(5, "required");
					$this->addValue(6, "not required");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfRestrictedArea
			*
			* The official legal status of each kind of restricted area defines the kind of restriction(s), e.g., the restriction for a 'game preserve' may be 'entering prohibited', the restriction for an 'anchoring prohibition area' is 'anchoring prohibited'.
			* @property int value
			*/
			class categoryOfRestrictedArea extends EnumerationType
			{
				/**
				* Enumeration categoryOfRestrictedArea
				*
				* The official legal status of each kind of restricted area defines the kind of restriction(s), e.g., the restriction for a 'game preserve' may be 'entering prohibited', the restriction for an 'anchoring prohibition area' is 'anchoring prohibited'.
				* @param int value
				* 
				* 4=nature reserve
				* 5=bird sanctuary
				* 6=game reserve
				* 7=seal sanctuary
				* 10=historic wreck area
				* 20=research area
				* 22=fish sanctuary
				* 23=ecological reserve
				* 27=environmentally sensitive sea area
				* 28=particularly sensitive sea area
				* 31=coral sanctuary
				* 32=recreation area
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(4, "nature reserve");
					$this->addValue(5, "bird sanctuary");
					$this->addValue(6, "game reserve");
					$this->addValue(7, "seal sanctuary");
					$this->addValue(10, "historic wreck area");
					$this->addValue(20, "research area");
					$this->addValue(22, "fish sanctuary");
					$this->addValue(23, "ecological reserve");
					$this->addValue(27, "environmentally sensitive sea area");
					$this->addValue(28, "particularly sensitive sea area");
					$this->addValue(31, "coral sanctuary");
					$this->addValue(32, "recreation area");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryofShipReport
			*
			* Classification of ship reports based on IMO standard report formats.
			* @property int value
			*/
			class categoryofShipReport extends EnumerationType
			{
				/**
				* Enumeration categoryofShipReport
				*
				* Classification of ship reports based on IMO standard report formats.
				* @param int value
				* 
				* 1=sailing plan
				* 2=position report
				* 3=deviation report
				* 4=final report
				* 5=dangerous goods report
				* 6=harmful substances report
				* 7=marine pollutants report
				* 8=any other report
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "sailing plan");
					$this->addValue(2, "position report");
					$this->addValue(3, "deviation report");
					$this->addValue(4, "final report");
					$this->addValue(5, "dangerous goods report");
					$this->addValue(6, "harmful substances report");
					$this->addValue(7, "marine pollutants report");
					$this->addValue(8, "any other report");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfTemporalVariation
			*
			* An assessment of the likelihood of change within an area since last survey.
			* @property int value
			*/
			class categoryOfTemporalVariation extends EnumerationType
			{
				/**
				* Enumeration categoryOfTemporalVariation
				*
				* An assessment of the likelihood of change within an area since last survey.
				* @param int value
				* 
				* 1=extreme event
				* 2=likely to change
				* 4=unlikely to change
				* 5=unassessed
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "extreme event");
					$this->addValue(2, "likely to change");
					$this->addValue(4, "unlikely to change");
					$this->addValue(5, "unassessed");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfText
			*
			* Classification of completeness of textual information in relation to the source.
			* @property int value
			*/
			class categoryOfText extends EnumerationType
			{
				/**
				* Enumeration categoryOfText
				*
				* Classification of completeness of textual information in relation to the source.
				* @param int value
				* 
				* 1=abstract or summary
				* 2=extract
				* 3=full text
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "abstract or summary");
					$this->addValue(2, "extract");
					$this->addValue(3, "full text");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfVesselRegistry
			*
			* The locality of vessel registration or enrolment relative to the nationality of a port, territorial sea, administrative area, exclusive zone or other location.
			* @property int value
			*/
			class categoryOfVesselRegistry extends EnumerationType
			{
				/**
				* Enumeration categoryOfVesselRegistry
				*
				* The locality of vessel registration or enrolment relative to the nationality of a port, territorial sea, administrative area, exclusive zone or other location.
				* @param int value
				* 
				* 1=domestic
				* 2=foreign
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "domestic");
					$this->addValue(2, "foreign");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfVesselTrafficService
			*
			* Classification of vessel traffic services based on the nature of the control or services provided.
			* @property int value
			*/
			class categoryOfVesselTrafficService extends EnumerationType
			{
				/**
				* Enumeration categoryOfVesselTrafficService
				*
				* Classification of vessel traffic services based on the nature of the control or services provided.
				* @param int value
				* 
				* 1=Information Service
				* 2=Traffic Organisation Service
				* 3=Navigational Assistance Service
				* 4=Ship Reporting Service
				* 5=Local Port Service
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "Information Service");
					$this->addValue(2, "Traffic Organisation Service");
					$this->addValue(3, "Navigational Assistance Service");
					$this->addValue(4, "Ship Reporting Service");
					$this->addValue(5, "Local Port Service");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute cityName
			*
			* The name of a town or city.
			* @property text value
			*/
			class cityName extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute communicationChannel
			*
			* A channel number assigned to a specific radio frequency, frequencies or frequency band.
			* @property text value
			*/
			class communicationChannel extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* Enumeration comparisonOperator
			*
			* Numerical comparison
			* @property int value
			*/
			class comparisonOperator extends EnumerationType
			{
				/**
				* Enumeration comparisonOperator
				*
				* Numerical comparison
				* @param int value
				* 
				* 1=greater than
				* 2=greater than or equal to
				* 3=less than
				* 4=less than or equal to
				* 5=equal to
				* 6=not equal to
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "greater than");
					$this->addValue(2, "greater than or equal to");
					$this->addValue(3, "less than");
					$this->addValue(4, "less than or equal to");
					$this->addValue(5, "equal to");
					$this->addValue(6, "not equal to");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute contactInstructions
			*
			* Instructions provided on how to contact a particular person, organisation or service.
			* @property text value
			*/
			class contactInstructions extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute country
			*
			* The name of a nation. (Adapted from The American Heritage Dictionaries)
			* @property text value
			*/
			class country extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* Enumeration dataAssessment
			*
			* The categorisation of the assessment level of bathymetric data for an area.
			* @property int value
			*/
			class dataAssessment extends EnumerationType
			{
				/**
				* Enumeration dataAssessment
				*
				* The categorisation of the assessment level of bathymetric data for an area.
				* @param int value
				* 
				* 1=assessed
				* 2=oceanic
				* 3=unassessed
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "assessed");
					$this->addValue(2, "oceanic");
					$this->addValue(3, "unassessed");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration dayOfWeek
			*
			* The days of the week
			* @property int value
			*/
			class dayOfWeek extends EnumerationType
			{
				/**
				* Enumeration dayOfWeek
				*
				* The days of the week
				* @param int value
				* 
				* 1=monday
				* 2=tuesday
				* 3=wednesday
				* 4=thursday
				* 5=friday
				* 6=saturday
				* 7=sunday
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "monday");
					$this->addValue(2, "tuesday");
					$this->addValue(3, "wednesday");
					$this->addValue(4, "thursday");
					$this->addValue(5, "friday");
					$this->addValue(6, "saturday");
					$this->addValue(7, "sunday");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute dayOfWeekIsRange
			*
			* A statement expressing if the days of the week identified define a range or not.
			* @property boolean value
			*/
			class dayOfWeekIsRange extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_boolean($value);
				}
			}
         
			/**
			* SimpleAttribute dateEnd
			*
			* The latest date on which an object (e.g., a buoy) will be present.
			* @property S100_TruncatedDate value
			*/
			class dateEnd extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_S100_TruncatedDate($value);
				}
			}
         
			/**
			* SimpleAttribute dateFixed
			*
			* The date when a festival or national holiday recurs on the same day each year in the Gregorian calendar.
			* @property S100_TruncatedDate value
			*/
			class dateFixed extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_S100_TruncatedDate($value);
				}
			}
         
			/**
			* SimpleAttribute dateStart
			*
			* The earliest date on which an object (e.g., a buoy) will be present.
			* @property S100_TruncatedDate value
			*/
			class dateStart extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_S100_TruncatedDate($value);
				}
			}
         
			/**
			* SimpleAttribute dateVariable
			*
			* A day which is not fixed in the Gregorian calendar.
			* @property date value
			*/
			class dateVariable extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_date($value);
				}
			}
         
			/**
			* SimpleAttribute deliveryPoint
			*
			* Details  of where post can be delivered such as the apartment, name and/or number of a street, building or PO Box.
			* @property text value
			*/
			class deliveryPoint extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute directionUncertainty
			*
			* The best estimate of the accuracy of a bearing.
			* @property real value
			*/
			class directionUncertainty extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute displayName
			*
			* A statement expressing if a feature name is to be displayed in certain system display settings or not
			* @property boolean value
			*/
			class displayName extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_boolean($value);
				}
			}
         
			/**
			* SimpleAttribute distance
			*
			* A linear extent of space
			* @property real value
			*/
			class distance extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute fileLocator
			*
			* The string encodes the location of a fragment of text or other information in a support file.
			* @property text value
			*/
			class fileLocator extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute fileReference
			*
			* The string encodes the file name of an external text file that contains the text in English
			* @property text value
			*/
			class fileReference extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute fixedDate
			*
			* The date when a festival or national holiday recurs on the same day each year in the Gregorian calendar.
			* @property date value
			*/
			class fixedDate extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_date($value);
				}
			}
         
			/**
			* SimpleAttribute flipBearing
			*
			* The bearing at which text is re-located to the opposite side of a feature when screen display is oriented away from true north.
			* @property real value
			*/
			class flipBearing extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute frequencyShoreStationReceives
			*
			* The shore station receiver frequency expressed in kHz to one decimal place.
			* @property integer value
			*/
			class frequencyShoreStationReceives extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_integer($value);
				}
			}
         
			/**
			* SimpleAttribute frequencyShoreStationTransmits
			*
			* The shore station transmitter frequency expressed in kHz to one decimal place.
			* @property integer value
			*/
			class frequencyShoreStationTransmits extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_integer($value);
				}
			}
         
			/**
			* SimpleAttribute headline
			*
			* Words set at the head of a passage or page to introduce or categorize
			* @property text value
			*/
			class headline extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute horizontalDistanceUncertainty
			*
			* The best estimate of the horizontal accuracy of horizontal clearances and distances.
			* @property real value
			*/
			class horizontalDistanceUncertainty extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute horizontalLength
			*
			* A measurement of the longer of two linear axis.
			* @property real value
			*/
			class horizontalLength extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute imoFormatForReporting
			*
			* Whether a report must be in an IMO standard format
			* @property boolean value
			*/
			class imoFormatForReporting extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_boolean($value);
				}
			}
         
			/**
			* Enumeration jurisdiction
			*
			* The jurisdiction applicable to an administrative area.
			* @property int value
			*/
			class jurisdiction extends EnumerationType
			{
				/**
				* Enumeration jurisdiction
				*
				* The jurisdiction applicable to an administrative area.
				* @param int value
				* 
				* 1=international
				* 2=national
				* 3=national sub-division
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "international");
					$this->addValue(2, "national");
					$this->addValue(3, "national sub-division");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute language
			*
			* The method of human communication, either spoken or written, consisting of the use of words in a structured and conventional way
			* @property text value
			*/
			class language extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* Enumeration logicalConnectives
			*
			* Expresses whether all the constraints described by its co-attributes must be satisfied, or only one such constraint need be satisfied.
			* @property int value
			*/
			class logicalConnectives extends EnumerationType
			{
				/**
				* Enumeration logicalConnectives
				*
				* Expresses whether all the constraints described by its co-attributes must be satisfied, or only one such constraint need be satisfied.
				* @param int value
				* 
				* 1=logical conjunction
				* 2=logical disjunction
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "logical conjunction");
					$this->addValue(2, "logical disjunction");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute linkage
			*
			* location (address) for on-line access using a URL/URI address or similar addressing scheme. (Adapted from ISO 19115:2014.)
			* @property URL value
			*/
			class linkage extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_URL($value);
				}
			}
         
			/**
			* Enumeration membership
			*
			* indicates whether a vessel is included or excluded from the regulation / restriction / recommendation / nautical information
			* @property int value
			*/
			class membership extends EnumerationType
			{
				/**
				* Enumeration membership
				*
				* indicates whether a vessel is included or excluded from the regulation / restriction / recommendation / nautical information
				* @param int value
				* 
				* 1=included
				* 2=excluded
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "included");
					$this->addValue(2, "excluded");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute mMSICode
			*
			* The Maritime Mobile Service Identity (MMSI) Code is formed of a series of nine digits which are transmitted over the radio path in order to uniquely identify ship stations, ship earth stations, coast stations, coast earth stations, and group calls. These identities are formed in such a way that the identity or part thereof can be used by telephone and telex subscribers connected to the general telecommunications network principally to call ships automatically.
			* @property integer value
			*/
			class mMSICode extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_integer($value);
				}
			}
         
			/**
			* SimpleAttribute noticeTimeHours
			*
			* The time duration prior to the time the service is needed, when notice must be provided to the service provider.
			* @property real value
			*/
			class noticeTimeHours extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute noticeTimeText
			*
			* Text string qualifying the notice time specified in NTCHRS. This may explain the time specification in NTCHRS (e.g., â€œ3 working daysâ€ for a NTCHRS value of â€œ72â€ where NTCTIM is supposed to be "3 working days") or consist of other language qualifying the time, e.g., â€œOn departure from last portâ€ or â€œOn passing reporting line XYâ€).
			* @property text value
			*/
			class noticeTimeText extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute name
			*
			* The individual name of a feature.
			* @property text value
			*/
			class name extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute nameOfResource
			*
			* Name of the online resource.
			* @property text value
			*/
			class nameOfResource extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute onlineDescription
			*
			* Detailed text description of what the online resource is/does
			* @property text value
			*/
			class onlineDescription extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* Enumeration operation
			*
			* Indicates whether the minimum or maximum value should be used to describe a condition or in application processing
			* @property int value
			*/
			class operation extends EnumerationType
			{
				/**
				* Enumeration operation
				*
				* Indicates whether the minimum or maximum value should be used to describe a condition or in application processing
				* @param int value
				* 
				* 1=largest value
				* 2=smallest value
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "largest value");
					$this->addValue(2, "smallest value");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute orientationUncertainty
			*
			* The best estimate of the accuracy of a bearing.
			* @property real value
			*/
			class orientationUncertainty extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute pictureCaption
			*
			* Short description of the purpose of the image
			* @property text value
			*/
			class pictureCaption extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute pictureInformation
			*
			* A set of information to provide credits to picture creator, copyright owner etc.
			* @property text value
			*/
			class pictureInformation extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute postalCode
			*
			* Known in various countries as a postcode, or ZIP code, the postal code is a series of letters and/or digits that identifies each postal delivery area.
			* @property text value
			*/
			class postalCode extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute protocol
			*
			* connection protocol to be used. Example: ftp, http get KVP, http POST, etc.
			* @property text value
			*/
			class protocol extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute protocolRequest
			*
			* Request used to access the resource. Structure and content depend on the protocol and standard used by the online resource, such as Web Feature Service standard.
			* @property text value
			*/
			class protocolRequest extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute reportedDate
			*
			* The date that the item was observed, done, or investigated
			* @property S100_TruncatedDate value
			*/
			class reportedDate extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_S100_TruncatedDate($value);
				}
			}
         
			/**
			* Enumeration restriction
			*
			* The official legal statute of each kind of restricted area.
			* @property int value
			*/
			class restriction extends EnumerationType
			{
				/**
				* Enumeration restriction
				*
				* The official legal statute of each kind of restricted area.
				* @param int value
				* 
				* 1=anchoring prohibited
				* 2=anchoring restricted
				* 3=fishing prohibited
				* 4=fishing restricted
				* 5=trawling prohibited
				* 6=trawling restricted
				* 7=entry prohibited
				* 8=entry restricted
				* 9=dredging prohibited
				* 10=dredging restricted
				* 11=diving prohibited
				* 12=diving restricted
				* 13=no wake
				* 14=area to be avoided
				* 15=construction prohibited
				* 16=discharging prohibited
				* 17=discharging restricted
				* 18=industrial or mineral exploration/development prohibited
				* 19=industrial or mineral exploration/development restricted
				* 20=drilling prohibited
				* 21=drilling restricted
				* 22=removal of historical artifacts prohibited
				* 23=cargo transhipment (lightering) prohibited
				* 24=dragging prohibited
				* 25=stopping prohibited
				* 26=landing prohibited
				* 27=speed restricted
				* 28=swimming prohibited
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "anchoring prohibited");
					$this->addValue(2, "anchoring restricted");
					$this->addValue(3, "fishing prohibited");
					$this->addValue(4, "fishing restricted");
					$this->addValue(5, "trawling prohibited");
					$this->addValue(6, "trawling restricted");
					$this->addValue(7, "entry prohibited");
					$this->addValue(8, "entry restricted");
					$this->addValue(9, "dredging prohibited");
					$this->addValue(10, "dredging restricted");
					$this->addValue(11, "diving prohibited");
					$this->addValue(12, "diving restricted");
					$this->addValue(13, "no wake");
					$this->addValue(14, "area to be avoided");
					$this->addValue(15, "construction prohibited");
					$this->addValue(16, "discharging prohibited");
					$this->addValue(17, "discharging restricted");
					$this->addValue(18, "industrial or mineral exploration/development prohibited");
					$this->addValue(19, "industrial or mineral exploration/development restricted");
					$this->addValue(20, "drilling prohibited");
					$this->addValue(21, "drilling restricted");
					$this->addValue(22, "removal of historical artifacts prohibited");
					$this->addValue(23, "cargo transhipment (lightering) prohibited");
					$this->addValue(24, "dragging prohibited");
					$this->addValue(25, "stopping prohibited");
					$this->addValue(26, "landing prohibited");
					$this->addValue(27, "speed restricted");
					$this->addValue(28, "swimming prohibited");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute scaleMaximum
			*
			* The maximum scale at which the object may be used, e.g., for ECDIS presentation.
			* @property integer value
			*/
			class scaleMaximum extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_integer($value);
				}
			}
         
			/**
			* SimpleAttribute scaleMinimum
			*
			* The minimum scale at which the object may be used, e.g., for ECDIS presentation.
			* @property integer value
			*/
			class scaleMinimum extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_integer($value);
				}
			}
         
			/**
			* SimpleAttribute source
			*
			* An identifier (publication, document, reference work, instrument, vessel, etc) from which information comes or is acquired.
			* @property text value
			*/
			class source extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* Enumeration sourceType
			*
			* type of the source
			* @property int value
			*/
			class sourceType extends EnumerationType
			{
				/**
				* Enumeration sourceType
				*
				* type of the source
				* @param int value
				* 
				* 1=law or regulation
				* 2=official publication
				* 7=mariner report, confirmed
				* 8=mariner report, not confirmed
				* 9=industry publications and reports
				* 10=remotely sensed images
				* 11=photographs
				* 12=products issued by HO services
				* 13=news media
				* 14=traffic data
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "law or regulation");
					$this->addValue(2, "official publication");
					$this->addValue(7, "mariner report, confirmed");
					$this->addValue(8, "mariner report, not confirmed");
					$this->addValue(9, "industry publications and reports");
					$this->addValue(10, "remotely sensed images");
					$this->addValue(11, "photographs");
					$this->addValue(12, "products issued by HO services");
					$this->addValue(13, "news media");
					$this->addValue(14, "traffic data");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration status
			*
			* The condition of an object at a given instant in time.
			* @property int value
			*/
			class status extends EnumerationType
			{
				/**
				* Enumeration status
				*
				* The condition of an object at a given instant in time.
				* @param int value
				* 
				* 1=permanent
				* 2=occasional
				* 3=recommended
				* 4=not in use
				* 5=periodic/intermittent
				* 6=reserved
				* 7=temporary
				* 8=private
				* 9=mandatory
				* 11=extinguished
				* 12=illuminated
				* 13=historic
				* 14=public
				* 15=synchronized
				* 16=watched
				* 17=un-watched
				* 18=existence doubtful
				* 28=buoyed
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "permanent");
					$this->addValue(2, "occasional");
					$this->addValue(3, "recommended");
					$this->addValue(4, "not in use");
					$this->addValue(5, "periodic/intermittent");
					$this->addValue(6, "reserved");
					$this->addValue(7, "temporary");
					$this->addValue(8, "private");
					$this->addValue(9, "mandatory");
					$this->addValue(11, "extinguished");
					$this->addValue(12, "illuminated");
					$this->addValue(13, "historic");
					$this->addValue(14, "public");
					$this->addValue(15, "synchronized");
					$this->addValue(16, "watched");
					$this->addValue(17, "un-watched");
					$this->addValue(18, "existence doubtful");
					$this->addValue(28, "buoyed");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute telecommunicationIdentifier
			*
			* An identifier, such as words, numbers, letters, symbols, or any combination of those used to establish a contact to a particular person, organisation or service.
			* @property text value
			*/
			class telecommunicationIdentifier extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute telcomCarrier
			*
			* The name of a provider or type of carrier for a telecommunication service. This service may include land line based, shore based or satellite based radio connections.
			* @property text value
			*/
			class telcomCarrier extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute text
			*
			* A non-formatted digital text string
			* @property text value
			*/
			class text extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute thicknessOfIceCapability
			*
			* The thickness of ice that the ship can safely transit
			* @property text value
			*/
			class thicknessOfIceCapability extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* Enumeration timeReference
			*
			* Indicates whether a time value is local time or Coordinated Universal Time.
			* @property int value
			*/
			class timeReference extends EnumerationType
			{
				/**
				* Enumeration timeReference
				*
				* Indicates whether a time value is local time or Coordinated Universal Time.
				* @param int value
				* 
				* 1=localTime
				* 2=UTC
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "localTime");
					$this->addValue(2, "UTC");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute timeOfDayEnd
			*
			* Ending time of day, possibly for a period within the day
			* @property time value
			*/
			class timeOfDayEnd extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_time($value);
				}
			}
         
			/**
			* SimpleAttribute timeOfDayStart
			*
			* Starting time of day, possibly for a period within the day
			* @property time value
			*/
			class timeOfDayStart extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_time($value);
				}
			}
         
			/**
			* SimpleAttribute uncertaintyFixed
			*
			* The best estimate of the fixed vertical accuracy component for depths, heights, vertical distances and vertical clearances.
			* @property real value
			*/
			class uncertaintyFixed extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute uncertaintyVariable
			*
			* The best estimate of the variable vertical accuracy component for depths, heights, vertical distances and vertical clearances.
			* @property real value
			*/
			class uncertaintyVariable extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* Enumeration vesselsCharacteristics
			*
			* Characteristics of vessels
			* @property int value
			*/
			class vesselsCharacteristics extends EnumerationType
			{
				/**
				* Enumeration vesselsCharacteristics
				*
				* Characteristics of vessels
				* @param int value
				* 
				* 1=length overall
				* 2=length at waterline
				* 3=breadth
				* 4=draught
				* 5=height
				* 6=displacement tonnage
				* 7=displacement tonnage, light
				* 8=displacement tonnage, loaded
				* 9=deadweight tonnage
				* 10=gross tonnage
				* 11=net tonnage
				* 12=Panama Canal/Universal Measurement System net tonnage
				* 13=Suez Canal net tonnage
				* 14=Suez Canal gross tonnage
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "length overall");
					$this->addValue(2, "length at waterline");
					$this->addValue(3, "breadth");
					$this->addValue(4, "draught");
					$this->addValue(5, "height");
					$this->addValue(6, "displacement tonnage");
					$this->addValue(7, "displacement tonnage, light");
					$this->addValue(8, "displacement tonnage, loaded");
					$this->addValue(9, "deadweight tonnage");
					$this->addValue(10, "gross tonnage");
					$this->addValue(11, "net tonnage");
					$this->addValue(12, "Panama Canal/Universal Measurement System net tonnage");
					$this->addValue(13, "Suez Canal net tonnage");
					$this->addValue(14, "Suez Canal gross tonnage");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration vesselsCharacteristicsUnit
			*
			* the unit used for vessel characteristics attribute
			* @property int value
			*/
			class vesselsCharacteristicsUnit extends EnumerationType
			{
				/**
				* Enumeration vesselsCharacteristicsUnit
				*
				* the unit used for vessel characteristics attribute
				* @param int value
				* 
				* 1=metre
				* 2=foot
				* 3=metric ton
				* 4=ton
				* 5=short ton
				* 6=gross ton
				* 7=net ton
				* 8=Panama Canal/Universal Measurement System net tonnage
				* 9=Suez Canal Net Tonnage
				* 10=none
				* 11=cubic metres
				* 12=Suez Canal Gross Tonnage
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "metre");
					$this->addValue(2, "foot");
					$this->addValue(3, "metric ton");
					$this->addValue(4, "ton");
					$this->addValue(5, "short ton");
					$this->addValue(6, "gross ton");
					$this->addValue(7, "net ton");
					$this->addValue(8, "Panama Canal/Universal Measurement System net tonnage");
					$this->addValue(9, "Suez Canal Net Tonnage");
					$this->addValue(10, "none");
					$this->addValue(11, "cubic metres");
					$this->addValue(12, "Suez Canal Gross Tonnage");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute vesselsCharacteristicsValue
			*
			* The value of a particular characteristic such as a dimension or tonnage of a vessel
			* @property real value
			*/
			class vesselsCharacteristicsValue extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute vesselPerformance
			*
			* A description of the required handling characteristics of a vessel including hull design, main and auxilliary machinery, cargo handling equipment, navigation equipment and manoeuvring behaviour.
			* @property text value
			*/
			class vesselPerformance extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* Enumeration qualityOfHorizontalMeasurement
			*
			* The degree of reliability attributed to a position
			* @property int value
			*/
			class qualityOfHorizontalMeasurement extends EnumerationType
			{
				/**
				* Enumeration qualityOfHorizontalMeasurement
				*
				* The degree of reliability attributed to a position
				* @param int value
				* 
				* 1=surveyed
				* 2=unsurveyed
				* 3=inadequately surveyed
				* 4=approximate
				* 5=position doubtful
				* 6=unreliable
				* 7=reported (not surveyed)
				* 8=reported (not confirmed)
				* 9=estimated
				* 10=precisely known
				* 11=calculated
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "surveyed");
					$this->addValue(2, "unsurveyed");
					$this->addValue(3, "inadequately surveyed");
					$this->addValue(4, "approximate");
					$this->addValue(5, "position doubtful");
					$this->addValue(6, "unreliable");
					$this->addValue(7, "reported (not surveyed)");
					$this->addValue(8, "reported (not confirmed)");
					$this->addValue(9, "estimated");
					$this->addValue(10, "precisely known");
					$this->addValue(11, "calculated");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute maximumDisplayScale
			*
			* The largest intended viewing scale for the data.
			* @property integer value
			*/
			class maximumDisplayScale extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_integer($value);
				}
			}
         
			/**
			* SimpleAttribute minimumDisplayScale
			*
			* The smallest intended viewing scale for the data.
			* @property integer value
			*/
			class minimumDisplayScale extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_integer($value);
				}
			}
         
			/**
			* SimpleAttribute orientationValue
			*
			* The angular distance measured from true north to the major axis of the object.
			* @property real value
			*/
			class orientationValue extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute periodicDateEnd
			*
			* The end of the active period for a seasonal object (e.g., a buoy).
			* @property S100_TruncatedDate value
			*/
			class periodicDateEnd extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_S100_TruncatedDate($value);
				}
			}
         
			/**
			* SimpleAttribute periodicDateStart
			*
			* The start of the active period for a seasonal object (e.g., a buoy).
			* @property S100_TruncatedDate value
			*/
			class periodicDateStart extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_S100_TruncatedDate($value);
				}
			}
         
			/**
			* SimpleAttribute pictorialRepresentation
			*
			* Indicates whether a pictorial representation of the object is available.
			* @property text value
			*/
			class pictorialRepresentation extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute sectorBearing
			*
			* A sector is the part of a circle between two straight lines drawn from the centre to the circumference. Sector bearing specifies the limit of the sector. (Adapted from S-57 Edition 3.1, Appendix A â€“ Chapter 2, Page 2.184, November 2000).
			* @property real value
			*/
			class sectorBearing extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute sourceDate
			*
			* The production date of the source, e.g., the date of measurement.
			* @property text value
			*/
			class sourceDate extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute variableDate
			*
			* A day which is not fixed in the Gregorian calendar.
			* @property text value
			*/
			class variableDate extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* S100_CodeList actionOrActivity
			*
			* The action or activity of a vessel
			* @property int value
			*/
			class actionOrActivity extends CodeListType
			{
				/**
				* S100_CodeList actionOrActivity
				*
				* The action or activity of a vessel
				* @param int value
				* 
				* 1=navigating with a pilot
				* 2=entering port
				* 3=leaving port
				* 4=berthing
				* 5=slipping
				* 6=anchoring
				* 7=weighing anchor
				* 8=transiting
				* 9=overtaking
				* 10=reporting
				* 11=working cargo
				* 12=landing
				* 13=diving
				* 14=fishing
				* 15=discharging overboard
				* 16=passing
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "navigating with a pilot");
					$this->addValue(2, "entering port");
					$this->addValue(3, "leaving port");
					$this->addValue(4, "berthing");
					$this->addValue(5, "slipping");
					$this->addValue(6, "anchoring");
					$this->addValue(7, "weighing anchor");
					$this->addValue(8, "transiting");
					$this->addValue(9, "overtaking");
					$this->addValue(10, "reporting");
					$this->addValue(11, "working cargo");
					$this->addValue(12, "landing");
					$this->addValue(13, "diving");
					$this->addValue(14, "fishing");
					$this->addValue(15, "discharging overboard");
					$this->addValue(16, "passing");
					parent::__construct($value);
				}
			}
	     
			/**
			* S100_CodeList categoryOfRxN
			*
			* The principal subject matter of regulations, restrictions, recommendations or nautical information
			* @property int value
			*/
			class categoryOfRxN extends CodeListType
			{
				/**
				* S100_CodeList categoryOfRxN
				*
				* The principal subject matter of regulations, restrictions, recommendations or nautical information
				* @param int value
				* 
				* 1=navigation
				* 2=communication
				* 3=environmental protection
				* 4=wildlife protection
				* 5=security
				* 6=customs
				* 7=cargo operation
				* 8=refuge
				* 9=health
				* 10=natural resources or exploitation
				* 11=port
				* 12=finance
				* 13=agriculture
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "navigation");
					$this->addValue(2, "communication");
					$this->addValue(3, "environmental protection");
					$this->addValue(4, "wildlife protection");
					$this->addValue(5, "security");
					$this->addValue(6, "customs");
					$this->addValue(7, "cargo operation");
					$this->addValue(8, "refuge");
					$this->addValue(9, "health");
					$this->addValue(10, "natural resources or exploitation");
					$this->addValue(11, "port");
					$this->addValue(12, "finance");
					$this->addValue(13, "agriculture");
					parent::__construct($value);
				}
			}
	     
			/**
			* S100_CodeList categoryOfSchedule
			*
			* Describes the type of schedule, e.g., opening, closure, etc.
			* @property int value
			*/
			class categoryOfSchedule extends CodeListType
			{
				/**
				* S100_CodeList categoryOfSchedule
				*
				* Describes the type of schedule, e.g., opening, closure, etc.
				* @param int value
				* 
				* 1=normal operation
				* 2=closure
				* 3=unmanned operation
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "normal operation");
					$this->addValue(2, "closure");
					$this->addValue(3, "unmanned operation");
					parent::__construct($value);
				}
			}
	     
			/**
			* S100_CodeList categoryOfVessel
			*
			* Classification of vessels by function or use.
			* @property int value
			*/
			class categoryOfVessel extends CodeListType
			{
				/**
				* S100_CodeList categoryOfVessel
				*
				* Classification of vessels by function or use.
				* @param int value
				* 
				* 1=general cargo vessel
				* 2=container carrier
				* 3=tanker
				* 4=bulk carrier
				* 5=passenger vessel
				* 6=roll-on roll-off
				* 7=refrigerated cargo vessel
				* 8=fishing vessel
				* 9=service
				* 10=warship
				* 11=towed or pushed composite unit
				* 12=tug and tow
				* 13=light recreational
				* 14=semi-submersible offshore installation
				* 15=jack-up exploration or project installation
				* 16=livestock carrier
				* 17=sport fishing
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "general cargo vessel");
					$this->addValue(2, "container carrier");
					$this->addValue(3, "tanker");
					$this->addValue(4, "bulk carrier");
					$this->addValue(5, "passenger vessel");
					$this->addValue(6, "roll-on roll-off");
					$this->addValue(7, "refrigerated cargo vessel");
					$this->addValue(8, "fishing vessel");
					$this->addValue(9, "service");
					$this->addValue(10, "warship");
					$this->addValue(11, "towed or pushed composite unit");
					$this->addValue(12, "tug and tow");
					$this->addValue(13, "light recreational");
					$this->addValue(14, "semi-submersible offshore installation");
					$this->addValue(15, "jack-up exploration or project installation");
					$this->addValue(16, "livestock carrier");
					$this->addValue(17, "sport fishing");
					parent::__construct($value);
				}
			}
	     
			/**
			* S100_CodeList onlineFunction
			*
			* code for function performed by the online resource
			* @property int value
			*/
			class onlineFunction extends CodeListType
			{
				/**
				* S100_CodeList onlineFunction
				*
				* code for function performed by the online resource
				* @param int value
				* 
				* 1=download
				* 2=information
				* 3=offlineAccess
				* 4=order
				* 5=search
				* 6=completeMetadata
				* 7=browseGraphic
				* 8=upload
				* 9=emailService
				* 10=browsing
				* 11=fileAccess
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "download");
					$this->addValue(2, "information");
					$this->addValue(3, "offlineAccess");
					$this->addValue(4, "order");
					$this->addValue(5, "search");
					$this->addValue(6, "completeMetadata");
					$this->addValue(7, "browseGraphic");
					$this->addValue(8, "upload");
					$this->addValue(9, "emailService");
					$this->addValue(10, "browsing");
					$this->addValue(11, "fileAccess");
					parent::__construct($value);
				}
			}
	     
			/**
			* S100_CodeList telecommunicationService
			*
			* Classification of methods of communication over a distance by electrical, electronic, or electromagnetic means.
			* @property int value
			*/
			class telecommunicationService extends CodeListType
			{
				/**
				* S100_CodeList telecommunicationService
				*
				* Classification of methods of communication over a distance by electrical, electronic, or electromagnetic means.
				* @param int value
				* 
				* 1=voice
				* 2=facsimile
				* 3=SMS
				* 4=data
				* 5=streamedData
				* 6=telex
				* 7=telegraph
				* 8=email
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "voice");
					$this->addValue(2, "facsimile");
					$this->addValue(3, "SMS");
					$this->addValue(4, "data");
					$this->addValue(5, "streamedData");
					$this->addValue(6, "telex");
					$this->addValue(7, "telegraph");
					$this->addValue(8, "email");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration textJustification
			*
			* The anchor point of a text string
			* @property int value
			*/
			class textJustification extends EnumerationType
			{
				/**
				* Enumeration textJustification
				*
				* The anchor point of a text string
				* @param int value
				* 
				* 1=left
				* 2=centred
				* 3=right
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "left");
					$this->addValue(2, "centred");
					$this->addValue(3, "right");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration textType
			*
			* The attribute from which a text string is derived.
			* @property int value
			*/
			class textType extends EnumerationType
			{
				/**
				* Enumeration textType
				*
				* The attribute from which a text string is derived.
				* @param int value
				* 
				* 1=feature name
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "feature name");
					parent::__construct($value);
				}
			}
	     
	
	//********************************* COMPLEX ATTRIBUTES ***********************************************************
	
		/**
		* ComplexAttribute bearingInformation
		*
		* A bearing is the direction one object is from another object.
		* 
		* @property cardinalDirection[0..1]  cardinalDirection
		* @property distance[0..1]  distance
		* @property sectorBearing[0..2]  sectorBearing
		* @property information[0..*]  information
		* @property orientation[0..1]  orientation
		*/
		class bearingInformation extends ComplexAttributeType
		{
			/**
			* ComplexAttribute bearingInformation
			*
			* A bearing is the direction one object is from another object.
			*
			* @property cardinalDirection[0..1]  cardinalDirection Principal and intermediate compass points.
			* @property distance[0..1]  distance A linear extent of space
			* @property sectorBearing[0..2]  sectorBearing A sector is the part of a circle between two straight lines drawn from the centre to the circumference. Sector bearing specifies the limit of the sector. (Adapted from S-57 Edition 3.1, Appendix A â€“ Chapter 2, Page 2.184, November 2000).
			* @property information[0..*]  information The complex attribute provides additional textual information that cannot be provided using other allowable attributes for the feature, and defines the language of the text string.
			* @property orientation[0..1]  orientation The angular distance measured from true north to the major axis of the feature.
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('cardinalDirection', 'cardinalDirection', 0, 1);
				$this->addAttribute('distance', 'distance', 0, 1);
				$this->addAttribute('sectorBearing', 'sectorBearing', 0, 2);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('orientation', 'orientation', 0, 1);
				
			}
		}
	
		/**
		* ComplexAttribute contactAddress
		*
		* Direction or superscription of a letter, package, etc., specifying the name of the place to which it is directed, and optionally a contact person or organisation who should receive it. (Oxford English Dictionary, 2nd Ed., adapted).
		* 
		* @property deliveryPoint[0..*]  deliveryPoint
		* @property cityName[0..1]  cityName
		* @property administrativeDivision[0..1]  administrativeDivision
		* @property country[0..1]  country
		* @property postalCode[0..1]  postalCode
		*/
		class contactAddress extends ComplexAttributeType
		{
			/**
			* ComplexAttribute contactAddress
			*
			* Direction or superscription of a letter, package, etc., specifying the name of the place to which it is directed, and optionally a contact person or organisation who should receive it. (Oxford English Dictionary, 2nd Ed., adapted).
			*
			* @property deliveryPoint[0..*]  deliveryPoint Details  of where post can be delivered such as the apartment, name and/or number of a street, building or PO Box.
			* @property cityName[0..1]  cityName The name of a town or city.
			* @property administrativeDivision[0..1]  administrativeDivision Administrative division is a generic term for an administrative region within a country at a level below that of the sovereign state.
			* @property country[0..1]  country The name of a nation. (Adapted from The American Heritage Dictionaries)
			* @property postalCode[0..1]  postalCode Known in various countries as a postcode, or ZIP code, the postal code is a series of letters and/or digits that identifies each postal delivery area.
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('deliveryPoint', 'deliveryPoint', 0, MAX_OCCUR);
				$this->addAttribute('cityName', 'cityName', 0, 1);
				$this->addAttribute('administrativeDivision', 'administrativeDivision', 0, 1);
				$this->addAttribute('country', 'country', 0, 1);
				$this->addAttribute('postalCode', 'postalCode', 0, 1);
				
			}
		}
	
		/**
		* ComplexAttribute featureName
		*
		* The complex attribute provides the name of an entity, defines the national language of the name, and provides the option to display the name at various system display settings.
		* 
		* @property displayName[0..1]  displayName
		* @property language[0..1]  language
		* @property name[1..1]  name
		*/
		class featureName extends ComplexAttributeType
		{
			/**
			* ComplexAttribute featureName
			*
			* The complex attribute provides the name of an entity, defines the national language of the name, and provides the option to display the name at various system display settings.
			*
			* @property displayName[0..1]  displayName A statement expressing if a feature name is to be displayed in certain system display settings or not
			* @property language[0..1]  language The method of human communication, either spoken or written, consisting of the use of words in a structured and conventional way
			* @property name[1..1]  name The individual name of a feature.
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('displayName', 'displayName', 0, 1);
				$this->addAttribute('language', 'language', 0, 1);
				$this->addAttribute('name', 'name', 1, 1);
				
			}
		}
	
		/**
		* ComplexAttribute fixedDateRange
		*
		* The complex attribute describes single fixed period, as the date range between its sub-attributes.
		* 
		* @property dateEnd[0..1]  dateEnd
		* @property dateStart[0..1]  dateStart
		*/
		class fixedDateRange extends ComplexAttributeType
		{
			/**
			* ComplexAttribute fixedDateRange
			*
			* The complex attribute describes single fixed period, as the date range between its sub-attributes.
			*
			* @property dateEnd[0..1]  dateEnd The latest date on which an object (e.g., a buoy) will be present.
			* @property dateStart[0..1]  dateStart The earliest date on which an object (e.g., a buoy) will be present.
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				
			}
		}
	
		/**
		* ComplexAttribute frequencyPair
		*
		* A pair of frequencies for transmitting and receiving radio signals. The shore station transmits and receives on the frequencies indicated.
		* 
		* @property frequencyShoreStationReceives[0..1]  frequencyShoreStationReceives
		* @property frequencyShoreStationTransmits[0..1]  frequencyShoreStationTransmits
		*/
		class frequencyPair extends ComplexAttributeType
		{
			/**
			* ComplexAttribute frequencyPair
			*
			* A pair of frequencies for transmitting and receiving radio signals. The shore station transmits and receives on the frequencies indicated.
			*
			* @property frequencyShoreStationReceives[0..1]  frequencyShoreStationReceives The shore station receiver frequency expressed in kHz to one decimal place.
			* @property frequencyShoreStationTransmits[0..1]  frequencyShoreStationTransmits The shore station transmitter frequency expressed in kHz to one decimal place.
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('frequencyShoreStationReceives', 'frequencyShoreStationReceives', 0, 1);
				$this->addAttribute('frequencyShoreStationTransmits', 'frequencyShoreStationTransmits', 0, 1);
				
			}
		}
	
		/**
		* ComplexAttribute graphic
		*
		* Pictorial information such as a photograph, sketch, or other graphic, optionally accompanied by descriptive information about the graphic and the location relative to its subject from which it was made.
		* 
		* @property pictorialRepresentation[1..*]  pictorialRepresentation
		* @property pictureCaption[0..1]  pictureCaption
		* @property sourceDate[0..1]  sourceDate
		* @property pictureInformation[0..1]  pictureInformation
		* @property bearingInformation[0..1]  bearingInformation
		*/
		class graphic extends ComplexAttributeType
		{
			/**
			* ComplexAttribute graphic
			*
			* Pictorial information such as a photograph, sketch, or other graphic, optionally accompanied by descriptive information about the graphic and the location relative to its subject from which it was made.
			*
			* @property pictorialRepresentation[1..*]  pictorialRepresentation Indicates whether a pictorial representation of the object is available.
			* @property pictureCaption[0..1]  pictureCaption Short description of the purpose of the image
			* @property sourceDate[0..1]  sourceDate The production date of the source, e.g., the date of measurement.
			* @property pictureInformation[0..1]  pictureInformation A set of information to provide credits to picture creator, copyright owner etc.
			* @property bearingInformation[0..1]  bearingInformation A bearing is the direction one object is from another object.
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 1, MAX_OCCUR);
				$this->addAttribute('pictureCaption', 'pictureCaption', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('pictureInformation', 'pictureInformation', 0, 1);
				$this->addAttribute('bearingInformation', 'bearingInformation', 0, 1);
				
			}
		}
	
		/**
		* ComplexAttribute horizontalPositionalUncertainty
		*
		* The best estimate of the accuracy of a position.
		* 
		* @property uncertaintyFixed[1..1]  uncertaintyFixed
		* @property uncertaintyVariable[0..1]  uncertaintyVariable
		*/
		class horizontalPositionalUncertainty extends ComplexAttributeType
		{
			/**
			* ComplexAttribute horizontalPositionalUncertainty
			*
			* The best estimate of the accuracy of a position.
			*
			* @property uncertaintyFixed[1..1]  uncertaintyFixed The best estimate of the fixed vertical accuracy component for depths, heights, vertical distances and vertical clearances.
			* @property uncertaintyVariable[0..1]  uncertaintyVariable The best estimate of the variable vertical accuracy component for depths, heights, vertical distances and vertical clearances.
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('uncertaintyFixed', 'uncertaintyFixed', 1, 1);
				$this->addAttribute('uncertaintyVariable', 'uncertaintyVariable', 0, 1);
				
			}
		}
	
		/**
		* ComplexAttribute information
		*
		* The complex attribute provides additional textual information that cannot be provided using other allowable attributes for the feature, and defines the language of the text string.
		* 
		* @property fileLocator[0..1]  fileLocator
		* @property fileReference[0..1]  fileReference
		* @property headline[0..1]  headline
		* @property language[0..1]  language
		* @property text[0..1]  text
		*/
		class information extends ComplexAttributeType
		{
			/**
			* ComplexAttribute information
			*
			* The complex attribute provides additional textual information that cannot be provided using other allowable attributes for the feature, and defines the language of the text string.
			*
			* @property fileLocator[0..1]  fileLocator The string encodes the location of a fragment of text or other information in a support file.
			* @property fileReference[0..1]  fileReference The string encodes the file name of an external text file that contains the text in English
			* @property headline[0..1]  headline Words set at the head of a passage or page to introduce or categorize
			* @property language[0..1]  language The method of human communication, either spoken or written, consisting of the use of words in a structured and conventional way
			* @property text[0..1]  text A non-formatted digital text string
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('fileLocator', 'fileLocator', 0, 1);
				$this->addAttribute('fileReference', 'fileReference', 0, 1);
				$this->addAttribute('headline', 'headline', 0, 1);
				$this->addAttribute('language', 'language', 0, 1);
				$this->addAttribute('text', 'text', 0, 1);
				
			}
		}
	
		/**
		* ComplexAttribute noticeTime
		*
		* Span of time, prior to the time the service is needed, for preparations to be made to fulfil the requirement. 
		* 
		* @property noticeTimeHours[0..*]  noticeTimeHours
		* @property noticeTimeText[0..1]  noticeTimeText
		* @property operation[0..1]  operation
		*/
		class noticeTime extends ComplexAttributeType
		{
			/**
			* ComplexAttribute noticeTime
			*
			* Span of time, prior to the time the service is needed, for preparations to be made to fulfil the requirement. 
			*
			* @property noticeTimeHours[0..*]  noticeTimeHours The time duration prior to the time the service is needed, when notice must be provided to the service provider.
			* @property noticeTimeText[0..1]  noticeTimeText Text string qualifying the notice time specified in NTCHRS. This may explain the time specification in NTCHRS (e.g., â€œ3 working daysâ€ for a NTCHRS value of â€œ72â€ where NTCTIM is supposed to be "3 working days") or consist of other language qualifying the time, e.g., â€œOn departure from last portâ€ or â€œOn passing reporting line XYâ€).
			* @property operation[0..1]  operation Indicates whether the minimum or maximum value should be used to describe a condition or in application processing
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('noticeTimeHours', 'noticeTimeHours', 0, MAX_OCCUR);
				$this->addAttribute('noticeTimeText', 'noticeTimeText', 0, 1);
				$this->addAttribute('operation', 'operation', 0, 1);
				
			}
		}
	
		/**
		* ComplexAttribute onlineResource
		*
		* Information about online sources from which a resource or data can be obtained.
		* 
		* @property linkage[1..1]  linkage
		* @property protocol[0..1]  protocol
		* @property applicationProfile[0..1]  applicationProfile
		* @property nameOfResource[0..1]  nameOfResource
		* @property onlineDescription[0..1]  onlineDescription
		* @property onlineFunction[0..1]  onlineFunction
		* @property protocolRequest[0..1]  protocolRequest
		*/
		class onlineResource extends ComplexAttributeType
		{
			/**
			* ComplexAttribute onlineResource
			*
			* Information about online sources from which a resource or data can be obtained.
			*
			* @property linkage[1..1]  linkage location (address) for on-line access using a URL/URI address or similar addressing scheme. (Adapted from ISO 19115:2014.)
			* @property protocol[0..1]  protocol connection protocol to be used. Example: ftp, http get KVP, http POST, etc.
			* @property applicationProfile[0..1]  applicationProfile name of an application profile that can be used with the online resource (ISO 19115)
			* @property nameOfResource[0..1]  nameOfResource Name of the online resource.
			* @property onlineDescription[0..1]  onlineDescription Detailed text description of what the online resource is/does
			* @property onlineFunction[0..1]  onlineFunction code for function performed by the online resource
			* @property protocolRequest[0..1]  protocolRequest Request used to access the resource. Structure and content depend on the protocol and standard used by the online resource, such as Web Feature Service standard.
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('linkage', 'linkage', 1, 1);
				$this->addAttribute('protocol', 'protocol', 0, 1);
				$this->addAttribute('applicationProfile', 'applicationProfile', 0, 1);
				$this->addAttribute('nameOfResource', 'nameOfResource', 0, 1);
				$this->addAttribute('onlineDescription', 'onlineDescription', 0, 1);
				$this->addAttribute('onlineFunction', 'onlineFunction', 0, 1);
				$this->addAttribute('protocolRequest', 'protocolRequest', 0, 1);
				
			}
		}
	
		/**
		* ComplexAttribute orientation
		*
		* The angular distance measured from true north to the major axis of the feature.
		* 
		* @property orientationUncertainty[0..1]  orientationUncertainty
		* @property orientationValue[1..1]  orientationValue
		*/
		class orientation extends ComplexAttributeType
		{
			/**
			* ComplexAttribute orientation
			*
			* The angular distance measured from true north to the major axis of the feature.
			*
			* @property orientationUncertainty[0..1]  orientationUncertainty The best estimate of the accuracy of a bearing.
			* @property orientationValue[1..1]  orientationValue The angular distance measured from true north to the major axis of the object.
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('orientationUncertainty', 'orientationUncertainty', 0, 1);
				$this->addAttribute('orientationValue', 'orientationValue', 1, 1);
				
			}
		}
	
		/**
		* ComplexAttribute scheduleByDoW
		*
		* The nature and timings of a daily schedule by days of the week.
		* 
		* @property categoryOfSchedule[0..1]  categoryOfSchedule
		* @property tmIntervalsByDoW[1..*]  tmIntervalsByDoW
		*/
		class scheduleByDoW extends ComplexAttributeType
		{
			/**
			* ComplexAttribute scheduleByDoW
			*
			* The nature and timings of a daily schedule by days of the week.
			*
			* @property categoryOfSchedule[0..1]  categoryOfSchedule Describes the type of schedule, e.g., opening, closure, etc.
			* @property tmIntervalsByDoW[1..*]  tmIntervalsByDoW Time intervals by days of the week
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('categoryOfSchedule', 'categoryOfSchedule', 0, 1);
				$this->addAttribute('tmIntervalsByDoW', 'tmIntervalsByDoW', 1, MAX_OCCUR);
				
			}
		}
	
		/**
		* ComplexAttribute periodicDateRange
		*
		* The complex attribute describes the active period for a seasonal feature (e.g. a buoy), as the dates between its sub-attributes
		* 
		* @property dateEnd[1..1]  dateEnd
		* @property dateStart[1..1]  dateStart
		*/
		class periodicDateRange extends ComplexAttributeType
		{
			/**
			* ComplexAttribute periodicDateRange
			*
			* The complex attribute describes the active period for a seasonal feature (e.g. a buoy), as the dates between its sub-attributes
			*
			* @property dateEnd[1..1]  dateEnd The latest date on which an object (e.g., a buoy) will be present.
			* @property dateStart[1..1]  dateStart The earliest date on which an object (e.g., a buoy) will be present.
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('dateEnd', 'dateEnd', 1, 1);
				$this->addAttribute('dateStart', 'dateStart', 1, 1);
				
			}
		}
	
		/**
		* ComplexAttribute radiocommunications
		*
		* Detailed radiocommunications description with channels, frequencies, preferences and time schedules
		* 
		* @property categoryOfCommPref[0..1]  categoryOfCommPref
		* @property communicationChannel[0..*]  communicationChannel
		* @property contactInstructions[0..1]  contactInstructions
		* @property frequencyPair[0..*]  frequencyPair
		* @property tmIntervalsByDoW[0..*]  tmIntervalsByDoW
		*/
		class radiocommunications extends ComplexAttributeType
		{
			/**
			* ComplexAttribute radiocommunications
			*
			* Detailed radiocommunications description with channels, frequencies, preferences and time schedules
			*
			* @property categoryOfCommPref[0..1]  categoryOfCommPref Classification of frequencies, VHF channels, telephone numbers, or other means of communication based on preference.
			* @property communicationChannel[0..*]  communicationChannel A channel number assigned to a specific radio frequency, frequencies or frequency band.
			* @property contactInstructions[0..1]  contactInstructions Instructions provided on how to contact a particular person, organisation or service.
			* @property frequencyPair[0..*]  frequencyPair A pair of frequencies for transmitting and receiving radio signals. The shore station transmits and receives on the frequencies indicated.
			* @property tmIntervalsByDoW[0..*]  tmIntervalsByDoW Time intervals by days of the week
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('categoryOfCommPref', 'categoryOfCommPref', 0, 1);
				$this->addAttribute('communicationChannel', 'communicationChannel', 0, MAX_OCCUR);
				$this->addAttribute('contactInstructions', 'contactInstructions', 0, 1);
				$this->addAttribute('frequencyPair', 'frequencyPair', 0, MAX_OCCUR);
				$this->addAttribute('tmIntervalsByDoW', 'tmIntervalsByDoW', 0, MAX_OCCUR);
				
			}
		}
	
		/**
		* ComplexAttribute rxnCode
		*
		* A summary of the impact of the most common types of regulation, restriction, recommendation and nautical information on a vessel.
		* 
		* @property categoryOfRxN[0..1]  categoryOfRxN
		* @property actionOrActivity[0..1]  actionOrActivity
		* @property headline[0..1]  headline
		*/
		class rxnCode extends ComplexAttributeType
		{
			/**
			* ComplexAttribute rxnCode
			*
			* A summary of the impact of the most common types of regulation, restriction, recommendation and nautical information on a vessel.
			*
			* @property categoryOfRxN[0..1]  categoryOfRxN The principal subject matter of regulations, restrictions, recommendations or nautical information
			* @property actionOrActivity[0..1]  actionOrActivity The action or activity of a vessel
			* @property headline[0..1]  headline Words set at the head of a passage or page to introduce or categorize
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('categoryOfRxN', 'categoryOfRxN', 0, 1);
				$this->addAttribute('actionOrActivity', 'actionOrActivity', 0, 1);
				$this->addAttribute('headline', 'headline', 0, 1);
				
			}
		}
	
		/**
		* ComplexAttribute sourceIndication
		*
		* Information about the source document, publication, or reference from which object data or textual material included or referenced in a dataset are derived
		* 
		* @property categoryOfAuthority[0..1]  categoryOfAuthority
		* @property country[0..1]  country
		* @property reportedDate[0..1]  reportedDate
		* @property source[0..1]  source
		* @property sourceType[0..1]  sourceType
		* @property featureName[0..*]  featureName
		*/
		class sourceIndication extends ComplexAttributeType
		{
			/**
			* ComplexAttribute sourceIndication
			*
			* Information about the source document, publication, or reference from which object data or textual material included or referenced in a dataset are derived
			*
			* @property categoryOfAuthority[0..1]  categoryOfAuthority The type of person, government agency or organisation granted powers of managing or controlling access to and/or activity in an area
			* @property country[0..1]  country The name of a nation. (Adapted from The American Heritage Dictionaries)
			* @property reportedDate[0..1]  reportedDate The date that the item was observed, done, or investigated
			* @property source[0..1]  source An identifier (publication, document, reference work, instrument, vessel, etc) from which information comes or is acquired.
			* @property sourceType[0..1]  sourceType type of the source
			* @property featureName[0..*]  featureName The complex attribute provides the name of an entity, defines the national language of the name, and provides the option to display the name at various system display settings.
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('categoryOfAuthority', 'categoryOfAuthority', 0, 1);
				$this->addAttribute('country', 'country', 0, 1);
				$this->addAttribute('reportedDate', 'reportedDate', 0, 1);
				$this->addAttribute('source', 'source', 0, 1);
				$this->addAttribute('sourceType', 'sourceType', 0, 1);
				$this->addAttribute('featureName', 'featureName', 0, MAX_OCCUR);
				
			}
		}
	
		/**
		* ComplexAttribute surveyDateRange
		*
		* The complex attribute describes the period of the hydrographic survey, as the time between its sub-attributes.
		* 
		* @property dateEnd[1..1]  dateEnd
		* @property dateStart[0..1]  dateStart
		*/
		class surveyDateRange extends ComplexAttributeType
		{
			/**
			* ComplexAttribute surveyDateRange
			*
			* The complex attribute describes the period of the hydrographic survey, as the time between its sub-attributes.
			*
			* @property dateEnd[1..1]  dateEnd The latest date on which an object (e.g., a buoy) will be present.
			* @property dateStart[0..1]  dateStart The earliest date on which an object (e.g., a buoy) will be present.
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('dateEnd', 'dateEnd', 1, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				
			}
		}
	
		/**
		* ComplexAttribute telecommunications
		*
		* A means or channel of communicating at a distance by electrical or electromagnetic means such as telegraphy, telephony, or broadcasting.
		* 
		* @property categoryOfCommPref[0..1]  categoryOfCommPref
		* @property telecommunicationIdentifier[1..1]  telecommunicationIdentifier
		* @property telcomCarrier[0..1]  telcomCarrier
		* @property contactInstructions[0..1]  contactInstructions
		* @property telecommunicationService[0..*]  telecommunicationService
		* @property scheduleByDoW[0..*]  scheduleByDoW
		*/
		class telecommunications extends ComplexAttributeType
		{
			/**
			* ComplexAttribute telecommunications
			*
			* A means or channel of communicating at a distance by electrical or electromagnetic means such as telegraphy, telephony, or broadcasting.
			*
			* @property categoryOfCommPref[0..1]  categoryOfCommPref Classification of frequencies, VHF channels, telephone numbers, or other means of communication based on preference.
			* @property telecommunicationIdentifier[1..1]  telecommunicationIdentifier An identifier, such as words, numbers, letters, symbols, or any combination of those used to establish a contact to a particular person, organisation or service.
			* @property telcomCarrier[0..1]  telcomCarrier The name of a provider or type of carrier for a telecommunication service. This service may include land line based, shore based or satellite based radio connections.
			* @property contactInstructions[0..1]  contactInstructions Instructions provided on how to contact a particular person, organisation or service.
			* @property telecommunicationService[0..*]  telecommunicationService Classification of methods of communication over a distance by electrical, electronic, or electromagnetic means.
			* @property scheduleByDoW[0..*]  scheduleByDoW The nature and timings of a daily schedule by days of the week.
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('categoryOfCommPref', 'categoryOfCommPref', 0, 1);
				$this->addAttribute('telecommunicationIdentifier', 'telecommunicationIdentifier', 1, 1);
				$this->addAttribute('telcomCarrier', 'telcomCarrier', 0, 1);
				$this->addAttribute('contactInstructions', 'contactInstructions', 0, 1);
				$this->addAttribute('telecommunicationService', 'telecommunicationService', 0, MAX_OCCUR);
				$this->addAttribute('scheduleByDoW', 'scheduleByDoW', 0, MAX_OCCUR);
				
			}
		}
	
		/**
		* ComplexAttribute textContent
		*
		* Textual material, or a pointer to a resource providing textual material. May be accompanied by basic information about its source and relationship to the source.
		* 
		* @property categoryOfText[0..1]  categoryOfText
		* @property information[0..*]  information
		* @property onlineResource[0..1]  onlineResource
		* @property sourceIndication[0..1]  sourceIndication
		*/
		class textContent extends ComplexAttributeType
		{
			/**
			* ComplexAttribute textContent
			*
			* Textual material, or a pointer to a resource providing textual material. May be accompanied by basic information about its source and relationship to the source.
			*
			* @property categoryOfText[0..1]  categoryOfText Classification of completeness of textual information in relation to the source.
			* @property information[0..*]  information The complex attribute provides additional textual information that cannot be provided using other allowable attributes for the feature, and defines the language of the text string.
			* @property onlineResource[0..1]  onlineResource Information about online sources from which a resource or data can be obtained.
			* @property sourceIndication[0..1]  sourceIndication Information about the source document, publication, or reference from which object data or textual material included or referenced in a dataset are derived
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('categoryOfText', 'categoryOfText', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('onlineResource', 'onlineResource', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				
			}
		}
	
		/**
		* ComplexAttribute tmIntervalsByDoW
		*
		* Time intervals by days of the week
		* 
		* @property dayOfWeek[0..7]  dayOfWeek
		* @property dayOfWeekIsRange[0..1]  dayOfWeekIsRange
		* @property timeReference[1..1]  timeReference
		* @property timeOfDayStart[0..*]  timeOfDayStart
		* @property timeOfDayEnd[0..*]  timeOfDayEnd
		*/
		class tmIntervalsByDoW extends ComplexAttributeType
		{
			/**
			* ComplexAttribute tmIntervalsByDoW
			*
			* Time intervals by days of the week
			*
			* @property dayOfWeek[0..7]  dayOfWeek The days of the week
			* @property dayOfWeekIsRange[0..1]  dayOfWeekIsRange A statement expressing if the days of the week identified define a range or not.
			* @property timeReference[1..1]  timeReference Indicates whether a time value is local time or Coordinated Universal Time.
			* @property timeOfDayStart[0..*]  timeOfDayStart Starting time of day, possibly for a period within the day
			* @property timeOfDayEnd[0..*]  timeOfDayEnd Ending time of day, possibly for a period within the day
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('dayOfWeek', 'dayOfWeek', 0, 7);
				$this->addAttribute('dayOfWeekIsRange', 'dayOfWeekIsRange', 0, 1);
				$this->addAttribute('timeReference', 'timeReference', 1, 1);
				$this->addAttribute('timeOfDayStart', 'timeOfDayStart', 0, MAX_OCCUR);
				$this->addAttribute('timeOfDayEnd', 'timeOfDayEnd', 0, MAX_OCCUR);
				
			}
		}
	
		/**
		* ComplexAttribute vesselsMeasurements
		*
		* Terms and definitions specifically related to vessels
		* 
		* @property comparisonOperator[0..1]  comparisonOperator
		* @property vesselsCharacteristics[0..1]  vesselsCharacteristics
		* @property vesselsCharacteristicsValue[0..1]  vesselsCharacteristicsValue
		* @property vesselsCharacteristicsUnit[0..1]  vesselsCharacteristicsUnit
		*/
		class vesselsMeasurements extends ComplexAttributeType
		{
			/**
			* ComplexAttribute vesselsMeasurements
			*
			* Terms and definitions specifically related to vessels
			*
			* @property comparisonOperator[0..1]  comparisonOperator Numerical comparison
			* @property vesselsCharacteristics[0..1]  vesselsCharacteristics Characteristics of vessels
			* @property vesselsCharacteristicsValue[0..1]  vesselsCharacteristicsValue The value of a particular characteristic such as a dimension or tonnage of a vessel
			* @property vesselsCharacteristicsUnit[0..1]  vesselsCharacteristicsUnit the unit used for vessel characteristics attribute
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('comparisonOperator', 'comparisonOperator', 0, 1);
				$this->addAttribute('vesselsCharacteristics', 'vesselsCharacteristics', 0, 1);
				$this->addAttribute('vesselsCharacteristicsValue', 'vesselsCharacteristicsValue', 0, 1);
				$this->addAttribute('vesselsCharacteristicsUnit', 'vesselsCharacteristicsUnit', 0, 1);
				
			}
		}
	

	
	//********************************* FEATURE TYPES ***********************************************************
	
		/**
		* FeatureType FeatureType
		*
		* Generalized feature type which carries all the common attributes
		* 
		* 
		* @property fixedDateRange[0..1] fixedDateRange |Defined in FeatureType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in FeatureType
		* @property featureName[0..*] featureName |Defined in FeatureType
		* @property sourceIndication[0..1] sourceIndication |Defined in FeatureType
		* @property textContent[0..1] textContent |Defined in FeatureType
		* @property TextPlacement[0..1] textAssociation_positions_TextPlacement |Defined in FeatureType
		* @property Applicability[0..*] PermissionType_permission_Applicability |Defined in FeatureType
		* @property AbstractRxN[0..*] associatedRxN_theRxN_AbstractRxN |Defined in FeatureType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in FeatureType
		*/
		abstract class FeatureType extends AbstractFeatureType
		{
		
			/**
			* FeatureType FeatureType
			*
			* Generalized feature type which carries all the common attributes
			* 
			* 
		* @property fixedDateRange[0..1] fixedDateRange |Defined in FeatureType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in FeatureType
		* @property featureName[0..*] featureName |Defined in FeatureType
		* @property sourceIndication[0..1] sourceIndication |Defined in FeatureType
		* @property textContent[0..1] textContent |Defined in FeatureType
		* @property TextPlacement[0..1] textAssociation_positions_TextPlacement |Defined in FeatureType
		* @property Applicability[0..*] PermissionType_permission_Applicability |Defined in FeatureType
		* @property AbstractRxN[0..*] associatedRxN_theRxN_AbstractRxN |Defined in FeatureType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in FeatureType
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('fixedDateRange', 'fixedDateRange', 0, 1);
				$this->addAttribute('periodicDateRange', 'periodicDateRange', 0, MAX_OCCUR);
				$this->addAttribute('featureName', 'featureName', 0, MAX_OCCUR);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('textContent', 'textContent', 0, 1);
				
				//FeatureBindings
				$this->addAttribute('textAssociation_positions_TextPlacement', 'TextPlacement', 0, 1 );
				
				//InformationBindings
				$this->addAttribute('PermissionType_permission_Applicability', 'Applicability', 0, MAX_OCCUR);
				$this->addAttribute('associatedRxN_theRxN_AbstractRxN', 'AbstractRxN', 0, MAX_OCCUR);
				$this->addAttribute('additionalInformation_providesInformation_NauticalInformation', 'NauticalInformation', 0, MAX_OCCUR);
				
			}
		}
	
		/**
		* FeatureType MarineProtectedArea
		*
		* Any area of the intertidal or sub-tidal terrain, together with its overlying water and associated flora, fauna, historical and cultural features, which has been reserved by law or other effective means to protect part or all of the enclosed environment.
		* 
		* 
		* @property categoryOfMarineProtectedArea[1..1] categoryOfMarineProtectedArea |Defined in MarineProtectedArea
		* @property categoryOfRestrictedArea[0..*] categoryOfRestrictedArea |Defined in MarineProtectedArea
		* @property jurisdiction[1..1] jurisdiction |Defined in MarineProtectedArea
		* @property restriction[0..*] restriction |Defined in MarineProtectedArea
		* @property status[0..*] status |Defined in MarineProtectedArea
		* @property Authority[0..*] protectedAreaAuthority_responsibleAuthority_Authority |Defined in MarineProtectedArea
		* @property fixedDateRange[0..1] fixedDateRange |Defined in FeatureType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in FeatureType
		* @property featureName[0..*] featureName |Defined in FeatureType
		* @property sourceIndication[0..1] sourceIndication |Defined in FeatureType
		* @property textContent[0..1] textContent |Defined in FeatureType
		* @property TextPlacement[0..1] textAssociation_positions_TextPlacement |Defined in FeatureType
		* @property Applicability[0..*] PermissionType_permission_Applicability |Defined in FeatureType
		* @property AbstractRxN[0..*] associatedRxN_theRxN_AbstractRxN |Defined in FeatureType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in FeatureType
		*/
		 class MarineProtectedArea extends FeatureType
		{
		
			/**
			* FeatureType MarineProtectedArea
			*
			* Any area of the intertidal or sub-tidal terrain, together with its overlying water and associated flora, fauna, historical and cultural features, which has been reserved by law or other effective means to protect part or all of the enclosed environment.
			* 
			* 
		* @property categoryOfMarineProtectedArea[1..1] categoryOfMarineProtectedArea |Defined in MarineProtectedArea
		* @property categoryOfRestrictedArea[0..*] categoryOfRestrictedArea |Defined in MarineProtectedArea
		* @property jurisdiction[1..1] jurisdiction |Defined in MarineProtectedArea
		* @property restriction[0..*] restriction |Defined in MarineProtectedArea
		* @property status[0..*] status |Defined in MarineProtectedArea
		* @property Authority[0..*] protectedAreaAuthority_responsibleAuthority_Authority |Defined in MarineProtectedArea
		* @property fixedDateRange[0..1] fixedDateRange |Defined in FeatureType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in FeatureType
		* @property featureName[0..*] featureName |Defined in FeatureType
		* @property sourceIndication[0..1] sourceIndication |Defined in FeatureType
		* @property textContent[0..1] textContent |Defined in FeatureType
		* @property TextPlacement[0..1] textAssociation_positions_TextPlacement |Defined in FeatureType
		* @property Applicability[0..*] PermissionType_permission_Applicability |Defined in FeatureType
		* @property AbstractRxN[0..*] associatedRxN_theRxN_AbstractRxN |Defined in FeatureType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in FeatureType
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('categoryOfMarineProtectedArea', 'categoryOfMarineProtectedArea', 1, 1);
				$this->addAttribute('categoryOfRestrictedArea', 'categoryOfRestrictedArea', 0, MAX_OCCUR);
				$this->addAttribute('jurisdiction', 'jurisdiction', 1, 1);
				$this->addAttribute('restriction', 'restriction', 0, MAX_OCCUR);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				
				//FeatureBindings
				
				//InformationBindings
				$this->addAttribute('protectedAreaAuthority_responsibleAuthority_Authority', 'Authority', 0, MAX_OCCUR);
				
			}
		}
	
		/**
		* FeatureType RestrictedAreaNavigational
		*
		* A specified area of land or water designated by an appropriate authority within which access or navigation is restricted in accordance with certain specified conditions.
				A navigational restricted area is an area where the restrictions have a direct impact on the navigation of a vessel in the area.
		* 
		* 
		* @property categoryOfRestrictedArea[0..*] categoryOfRestrictedArea |Defined in RestrictedAreaNavigational
		* @property restriction[0..*] restriction |Defined in RestrictedAreaNavigational
		* @property status[0..*] status |Defined in RestrictedAreaNavigational
		* @property fixedDateRange[0..1] fixedDateRange |Defined in FeatureType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in FeatureType
		* @property featureName[0..*] featureName |Defined in FeatureType
		* @property sourceIndication[0..1] sourceIndication |Defined in FeatureType
		* @property textContent[0..1] textContent |Defined in FeatureType
		* @property TextPlacement[0..1] textAssociation_positions_TextPlacement |Defined in FeatureType
		* @property Applicability[0..*] PermissionType_permission_Applicability |Defined in FeatureType
		* @property AbstractRxN[0..*] associatedRxN_theRxN_AbstractRxN |Defined in FeatureType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in FeatureType
		*/
		 class RestrictedAreaNavigational extends FeatureType
		{
		
			/**
			* FeatureType RestrictedAreaNavigational
			*
			* A specified area of land or water designated by an appropriate authority within which access or navigation is restricted in accordance with certain specified conditions.
				A navigational restricted area is an area where the restrictions have a direct impact on the navigation of a vessel in the area.
			* 
			* 
		* @property categoryOfRestrictedArea[0..*] categoryOfRestrictedArea |Defined in RestrictedAreaNavigational
		* @property restriction[0..*] restriction |Defined in RestrictedAreaNavigational
		* @property status[0..*] status |Defined in RestrictedAreaNavigational
		* @property fixedDateRange[0..1] fixedDateRange |Defined in FeatureType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in FeatureType
		* @property featureName[0..*] featureName |Defined in FeatureType
		* @property sourceIndication[0..1] sourceIndication |Defined in FeatureType
		* @property textContent[0..1] textContent |Defined in FeatureType
		* @property TextPlacement[0..1] textAssociation_positions_TextPlacement |Defined in FeatureType
		* @property Applicability[0..*] PermissionType_permission_Applicability |Defined in FeatureType
		* @property AbstractRxN[0..*] associatedRxN_theRxN_AbstractRxN |Defined in FeatureType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in FeatureType
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('categoryOfRestrictedArea', 'categoryOfRestrictedArea', 0, MAX_OCCUR);
				$this->addAttribute('restriction', 'restriction', 0, MAX_OCCUR);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType RestrictedAreaRegulatory
		*
		* A specified area of land or water designated by an appropriate authority within which access or navigation is restricted in accordance with certain specified conditions.
				A regulatory restricted area is an area where the restrictions have no direct impact on the navigation of a vessel in the area, but impact on the activities that can take place within the area.
		* 
		* 
		* @property categoryOfRestrictedArea[0..*] categoryOfRestrictedArea |Defined in RestrictedAreaRegulatory
		* @property restriction[0..*] restriction |Defined in RestrictedAreaRegulatory
		* @property status[0..*] status |Defined in RestrictedAreaRegulatory
		* @property fixedDateRange[0..1] fixedDateRange |Defined in FeatureType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in FeatureType
		* @property featureName[0..*] featureName |Defined in FeatureType
		* @property sourceIndication[0..1] sourceIndication |Defined in FeatureType
		* @property textContent[0..1] textContent |Defined in FeatureType
		* @property TextPlacement[0..1] textAssociation_positions_TextPlacement |Defined in FeatureType
		* @property Applicability[0..*] PermissionType_permission_Applicability |Defined in FeatureType
		* @property AbstractRxN[0..*] associatedRxN_theRxN_AbstractRxN |Defined in FeatureType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in FeatureType
		*/
		 class RestrictedAreaRegulatory extends FeatureType
		{
		
			/**
			* FeatureType RestrictedAreaRegulatory
			*
			* A specified area of land or water designated by an appropriate authority within which access or navigation is restricted in accordance with certain specified conditions.
				A regulatory restricted area is an area where the restrictions have no direct impact on the navigation of a vessel in the area, but impact on the activities that can take place within the area.
			* 
			* 
		* @property categoryOfRestrictedArea[0..*] categoryOfRestrictedArea |Defined in RestrictedAreaRegulatory
		* @property restriction[0..*] restriction |Defined in RestrictedAreaRegulatory
		* @property status[0..*] status |Defined in RestrictedAreaRegulatory
		* @property fixedDateRange[0..1] fixedDateRange |Defined in FeatureType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in FeatureType
		* @property featureName[0..*] featureName |Defined in FeatureType
		* @property sourceIndication[0..1] sourceIndication |Defined in FeatureType
		* @property textContent[0..1] textContent |Defined in FeatureType
		* @property TextPlacement[0..1] textAssociation_positions_TextPlacement |Defined in FeatureType
		* @property Applicability[0..*] PermissionType_permission_Applicability |Defined in FeatureType
		* @property AbstractRxN[0..*] associatedRxN_theRxN_AbstractRxN |Defined in FeatureType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in FeatureType
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('categoryOfRestrictedArea', 'categoryOfRestrictedArea', 0, MAX_OCCUR);
				$this->addAttribute('restriction', 'restriction', 0, MAX_OCCUR);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType VesselTrafficServiceArea
		*
		* The area of any service implemented by a relevant authority primarily designed to improve safety and efficiency of traffic flow and the protection of the environment. It may range from simple information messages, to extensive organisation of the traffic involving national or regional schemes.
		* 
		* 
		* @property categoryOfVesselTrafficService[1..1] categoryOfVesselTrafficService |Defined in VesselTrafficServiceArea
		* @property Authority[0..1] srvControl_controlAuthority_Authority |Defined in VesselTrafficServiceArea
		* @property ShipReport[0..*] trafficServRept_reptForTrafficServ_ShipReport |Defined in VesselTrafficServiceArea
		* @property fixedDateRange[0..1] fixedDateRange |Defined in FeatureType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in FeatureType
		* @property featureName[0..*] featureName |Defined in FeatureType
		* @property sourceIndication[0..1] sourceIndication |Defined in FeatureType
		* @property textContent[0..1] textContent |Defined in FeatureType
		* @property TextPlacement[0..1] textAssociation_positions_TextPlacement |Defined in FeatureType
		* @property Applicability[0..*] PermissionType_permission_Applicability |Defined in FeatureType
		* @property AbstractRxN[0..*] associatedRxN_theRxN_AbstractRxN |Defined in FeatureType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in FeatureType
		*/
		 class VesselTrafficServiceArea extends FeatureType
		{
		
			/**
			* FeatureType VesselTrafficServiceArea
			*
			* The area of any service implemented by a relevant authority primarily designed to improve safety and efficiency of traffic flow and the protection of the environment. It may range from simple information messages, to extensive organisation of the traffic involving national or regional schemes.
			* 
			* 
		* @property categoryOfVesselTrafficService[1..1] categoryOfVesselTrafficService |Defined in VesselTrafficServiceArea
		* @property Authority[0..1] srvControl_controlAuthority_Authority |Defined in VesselTrafficServiceArea
		* @property ShipReport[0..*] trafficServRept_reptForTrafficServ_ShipReport |Defined in VesselTrafficServiceArea
		* @property fixedDateRange[0..1] fixedDateRange |Defined in FeatureType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in FeatureType
		* @property featureName[0..*] featureName |Defined in FeatureType
		* @property sourceIndication[0..1] sourceIndication |Defined in FeatureType
		* @property textContent[0..1] textContent |Defined in FeatureType
		* @property TextPlacement[0..1] textAssociation_positions_TextPlacement |Defined in FeatureType
		* @property Applicability[0..*] PermissionType_permission_Applicability |Defined in FeatureType
		* @property AbstractRxN[0..*] associatedRxN_theRxN_AbstractRxN |Defined in FeatureType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in FeatureType
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('categoryOfVesselTrafficService', 'categoryOfVesselTrafficService', 1, 1);
				
				//FeatureBindings
				
				//InformationBindings
				$this->addAttribute('srvControl_controlAuthority_Authority', 'Authority', 0, 1);
				$this->addAttribute('trafficServRept_reptForTrafficServ_ShipReport', 'ShipReport', 0, MAX_OCCUR);
				
			}
		}
	
		/**
		* FeatureType DataCoverage
		*
		* A geographical area that describes the coverage and extent of spatial types.
		* 
		* 
		* @property maximumDisplayScale[1..1] maximumDisplayScale |Defined in DataCoverage
		* @property minimumDisplayScale[1..1] minimumDisplayScale |Defined in DataCoverage
		*/
		 class DataCoverage extends AbstractFeatureType
		{
		
			/**
			* FeatureType DataCoverage
			*
			* A geographical area that describes the coverage and extent of spatial types.
			* 
			* 
		* @property maximumDisplayScale[1..1] maximumDisplayScale |Defined in DataCoverage
		* @property minimumDisplayScale[1..1] minimumDisplayScale |Defined in DataCoverage
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('maximumDisplayScale', 'maximumDisplayScale', 1, 1);
				$this->addAttribute('minimumDisplayScale', 'minimumDisplayScale', 1, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType QualityOfNonBathymetricData
		*
		* An area within which a uniform assessment of the quality of the non-bathymetric data exists
		* 
		* 
		* @property categoryOfTemporalVariation[1..1] categoryOfTemporalVariation |Defined in QualityOfNonBathymetricData
		* @property dataAssessment[1..1] dataAssessment |Defined in QualityOfNonBathymetricData
		* @property directionUncertainty[0..1] directionUncertainty |Defined in QualityOfNonBathymetricData
		* @property horizontalDistanceUncertainty[0..1] horizontalDistanceUncertainty |Defined in QualityOfNonBathymetricData
		* @property horizontalPositionalUncertainty[1..1] horizontalPositionalUncertainty |Defined in QualityOfNonBathymetricData
		* @property information[0..*] information |Defined in QualityOfNonBathymetricData
		* @property sourceIndication[0..1] sourceIndication |Defined in QualityOfNonBathymetricData
		* @property surveyDateRange[0..1] surveyDateRange |Defined in QualityOfNonBathymetricData
		*/
		 class QualityOfNonBathymetricData extends AbstractFeatureType
		{
		
			/**
			* FeatureType QualityOfNonBathymetricData
			*
			* An area within which a uniform assessment of the quality of the non-bathymetric data exists
			* 
			* 
		* @property categoryOfTemporalVariation[1..1] categoryOfTemporalVariation |Defined in QualityOfNonBathymetricData
		* @property dataAssessment[1..1] dataAssessment |Defined in QualityOfNonBathymetricData
		* @property directionUncertainty[0..1] directionUncertainty |Defined in QualityOfNonBathymetricData
		* @property horizontalDistanceUncertainty[0..1] horizontalDistanceUncertainty |Defined in QualityOfNonBathymetricData
		* @property horizontalPositionalUncertainty[1..1] horizontalPositionalUncertainty |Defined in QualityOfNonBathymetricData
		* @property information[0..*] information |Defined in QualityOfNonBathymetricData
		* @property sourceIndication[0..1] sourceIndication |Defined in QualityOfNonBathymetricData
		* @property surveyDateRange[0..1] surveyDateRange |Defined in QualityOfNonBathymetricData
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('categoryOfTemporalVariation', 'categoryOfTemporalVariation', 1, 1);
				$this->addAttribute('dataAssessment', 'dataAssessment', 1, 1);
				$this->addAttribute('directionUncertainty', 'directionUncertainty', 0, 1);
				$this->addAttribute('horizontalDistanceUncertainty', 'horizontalDistanceUncertainty', 0, 1);
				$this->addAttribute('horizontalPositionalUncertainty', 'horizontalPositionalUncertainty', 1, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('surveyDateRange', 'surveyDateRange', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType TextPlacement
		*
		* The Text Placement feature is used in association with the Feature Name attribute or a light description to optimise text positioning in ECDIS.
		* 
		* 
		* @property flipBearing[0..1] flipBearing |Defined in TextPlacement
		* @property scaleMinimum[0..1] scaleMinimum |Defined in TextPlacement
		* @property textJustification[1..1] textJustification |Defined in TextPlacement
		* @property text[0..1] text |Defined in TextPlacement
		* @property textType[0..1] textType |Defined in TextPlacement
		* @property FeatureType[1..1] textAssociation_identifies_FeatureType |Defined in TextPlacement
		*/
		 class TextPlacement extends AbstractFeatureType
		{
		
			/**
			* FeatureType TextPlacement
			*
			* The Text Placement feature is used in association with the Feature Name attribute or a light description to optimise text positioning in ECDIS.
			* 
			* 
		* @property flipBearing[0..1] flipBearing |Defined in TextPlacement
		* @property scaleMinimum[0..1] scaleMinimum |Defined in TextPlacement
		* @property textJustification[1..1] textJustification |Defined in TextPlacement
		* @property text[0..1] text |Defined in TextPlacement
		* @property textType[0..1] textType |Defined in TextPlacement
		* @property FeatureType[1..1] textAssociation_identifies_FeatureType |Defined in TextPlacement
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('flipBearing', 'flipBearing', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('textJustification', 'textJustification', 1, 1);
				$this->addAttribute('text', 'text', 0, 1);
				$this->addAttribute('textType', 'textType', 0, 1);
				
				//FeatureBindings
				$this->addAttribute('textAssociation_identifies_FeatureType', 'FeatureType', 1, 1 );
				
				//InformationBindings
				
			}
		}
	
	
	
	//********************************* INFORMATION TYPES ***********************************************************
	
		/**
		* InformationType InformationType
		*
		* Generalized information type which carries all the common attributes
		* 
		* 
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
		*/
		abstract class InformationType extends AbstractInformationType
		{
			
			/**
			* InformationType InformationType
			*
			* Generalized information type which carries all the common attributes
			* 
			* 
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('fixedDateRange', 'fixedDateRange', 0, 1);
				$this->addAttribute('periodicDateRange', 'periodicDateRange', 0, MAX_OCCUR);
				$this->addAttribute('featureName', 'featureName', 0, MAX_OCCUR);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, MAX_OCCUR);
				
				//FeatureBindings
				
				//InformationBindings
				$this->addAttribute('additionalInformation_providesInformation', 'NauticalInformation', 0, MAX_OCCUR);
				
			}
		}
	
		/**
		* InformationType AbstractRxN
		*
		* An abstract superclass for information types that encode rules, recommendations, and general information in text or graphic form.
		* 
		* 
		* @property categoryOfAuthority[0..1] categoryOfAuthority |Defined in AbstractRxN
		* @property textContent[0..*] textContent |Defined in AbstractRxN
		* @property graphic[0..*] graphic |Defined in AbstractRxN
		* @property rxnCode[0..*] rxnCode |Defined in AbstractRxN
		* @property Applicability[0..*] InclusionType_isApplicableTo_Applicability |Defined in AbstractRxN
		* @property AbstractRxN[0..*] relatedOrganisation_theOrganisation_AbstractRxN |Defined in AbstractRxN
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
		*/
		abstract class AbstractRxN extends InformationType
		{
			
			/**
			* InformationType AbstractRxN
			*
			* An abstract superclass for information types that encode rules, recommendations, and general information in text or graphic form.
			* 
			* 
		* @property categoryOfAuthority[0..1] categoryOfAuthority |Defined in AbstractRxN
		* @property textContent[0..*] textContent |Defined in AbstractRxN
		* @property graphic[0..*] graphic |Defined in AbstractRxN
		* @property rxnCode[0..*] rxnCode |Defined in AbstractRxN
		* @property Applicability[0..*] InclusionType_isApplicableTo_Applicability |Defined in AbstractRxN
		* @property AbstractRxN[0..*] relatedOrganisation_theOrganisation_AbstractRxN |Defined in AbstractRxN
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('categoryOfAuthority', 'categoryOfAuthority', 0, 1);
				$this->addAttribute('textContent', 'textContent', 0, MAX_OCCUR);
				$this->addAttribute('graphic', 'graphic', 0, MAX_OCCUR);
				$this->addAttribute('rxnCode', 'rxnCode', 0, MAX_OCCUR);
				
				//FeatureBindings
				
				//InformationBindings
				$this->addAttribute('InclusionType_isApplicableTo', 'Applicability', 0, MAX_OCCUR);
				$this->addAttribute('relatedOrganisation_theOrganisation', 'AbstractRxN', 0, MAX_OCCUR);
				
			}
		}
	
		/**
		* InformationType Applicability
		*
		* Describes the relationship between vessel characteristics and: (i) the applicability of an associated information object or feature to the vessel; or, (ii) the use of a facility, place, or service by the vessel; or, (iii) passage of the vessel through an area.
		* 
		* 
		* @property ballast[0..1] ballast |Defined in Applicability
		* @property categoryOfCargo[0..*] categoryOfCargo |Defined in Applicability
		* @property categoryOfDangerousOrHazardousCargo[0..*] categoryOfDangerousOrHazardousCargo |Defined in Applicability
		* @property categoryOfVessel[0..1] categoryOfVessel |Defined in Applicability
		* @property categoryOfVesselRegistry[0..1] categoryOfVesselRegistry |Defined in Applicability
		* @property logicalConnectives[0..1] logicalConnectives |Defined in Applicability
		* @property thicknessOfIceCapability[0..1] thicknessOfIceCapability |Defined in Applicability
		* @property vesselPerformance[0..1] vesselPerformance |Defined in Applicability
		* @property information[0..*] information |Defined in Applicability
		* @property vesselsMeasurements[0..*] vesselsMeasurements |Defined in Applicability
		* @property AbstractRxN[0..*] InclusionType_theApplicableRxN_AbstractRxN |Defined in Applicability
		* @property ShipReport[0..*] reportReqmt_theShipReport_ShipReport |Defined in Applicability
		* @property InformationType[0..*] PermissionType_vslLocation_InformationType |Defined in Applicability
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
		*/
		 class Applicability extends InformationType
		{
			
			/**
			* InformationType Applicability
			*
			* Describes the relationship between vessel characteristics and: (i) the applicability of an associated information object or feature to the vessel; or, (ii) the use of a facility, place, or service by the vessel; or, (iii) passage of the vessel through an area.
			* 
			* 
		* @property ballast[0..1] ballast |Defined in Applicability
		* @property categoryOfCargo[0..*] categoryOfCargo |Defined in Applicability
		* @property categoryOfDangerousOrHazardousCargo[0..*] categoryOfDangerousOrHazardousCargo |Defined in Applicability
		* @property categoryOfVessel[0..1] categoryOfVessel |Defined in Applicability
		* @property categoryOfVesselRegistry[0..1] categoryOfVesselRegistry |Defined in Applicability
		* @property logicalConnectives[0..1] logicalConnectives |Defined in Applicability
		* @property thicknessOfIceCapability[0..1] thicknessOfIceCapability |Defined in Applicability
		* @property vesselPerformance[0..1] vesselPerformance |Defined in Applicability
		* @property information[0..*] information |Defined in Applicability
		* @property vesselsMeasurements[0..*] vesselsMeasurements |Defined in Applicability
		* @property AbstractRxN[0..*] InclusionType_theApplicableRxN_AbstractRxN |Defined in Applicability
		* @property ShipReport[0..*] reportReqmt_theShipReport_ShipReport |Defined in Applicability
		* @property InformationType[0..*] PermissionType_vslLocation_InformationType |Defined in Applicability
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('ballast', 'ballast', 0, 1);
				$this->addAttribute('categoryOfCargo', 'categoryOfCargo', 0, MAX_OCCUR);
				$this->addAttribute('categoryOfDangerousOrHazardousCargo', 'categoryOfDangerousOrHazardousCargo', 0, MAX_OCCUR);
				$this->addAttribute('categoryOfVessel', 'categoryOfVessel', 0, 1);
				$this->addAttribute('categoryOfVesselRegistry', 'categoryOfVesselRegistry', 0, 1);
				$this->addAttribute('logicalConnectives', 'logicalConnectives', 0, 1);
				$this->addAttribute('thicknessOfIceCapability', 'thicknessOfIceCapability', 0, 1);
				$this->addAttribute('vesselPerformance', 'vesselPerformance', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('vesselsMeasurements', 'vesselsMeasurements', 0, MAX_OCCUR);
				
				//FeatureBindings
				
				//InformationBindings
				$this->addAttribute('InclusionType_theApplicableRxN', 'AbstractRxN', 0, MAX_OCCUR);
				$this->addAttribute('reportReqmt_theShipReport', 'ShipReport', 0, MAX_OCCUR);
				$this->addAttribute('PermissionType_vslLocation', 'InformationType', 0, MAX_OCCUR);
				
			}
		}
	
		/**
		* InformationType Authority
		*
		* A person or organisation having political or administrative power and control.
		* 
		* 
		* @property categoryOfAuthority[1..1] categoryOfAuthority |Defined in Authority
		* @property textContent[0..1] textContent |Defined in Authority
		* @property ContactDetails[0..*] authorityContact_theContactDetails_ContactDetails |Defined in Authority
		* @property ShipReport[0..*] reptAuthority_theShipReport_ShipReport |Defined in Authority
		* @property AbstractRxN[0..*] relatedOrganisation_theInformation_AbstractRxN |Defined in Authority
		* @property ServiceHours[0..*] authorityHours_theServiceHours_ServiceHours |Defined in Authority
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
		*/
		 class Authority extends InformationType
		{
			
			/**
			* InformationType Authority
			*
			* A person or organisation having political or administrative power and control.
			* 
			* 
		* @property categoryOfAuthority[1..1] categoryOfAuthority |Defined in Authority
		* @property textContent[0..1] textContent |Defined in Authority
		* @property ContactDetails[0..*] authorityContact_theContactDetails_ContactDetails |Defined in Authority
		* @property ShipReport[0..*] reptAuthority_theShipReport_ShipReport |Defined in Authority
		* @property AbstractRxN[0..*] relatedOrganisation_theInformation_AbstractRxN |Defined in Authority
		* @property ServiceHours[0..*] authorityHours_theServiceHours_ServiceHours |Defined in Authority
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('categoryOfAuthority', 'categoryOfAuthority', 1, 1);
				$this->addAttribute('textContent', 'textContent', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				$this->addAttribute('authorityContact_theContactDetails', 'ContactDetails', 0, MAX_OCCUR);
				$this->addAttribute('reptAuthority_theShipReport', 'ShipReport', 0, MAX_OCCUR);
				$this->addAttribute('relatedOrganisation_theInformation', 'AbstractRxN', 0, MAX_OCCUR);
				$this->addAttribute('authorityHours_theServiceHours', 'ServiceHours', 0, MAX_OCCUR);
				
			}
		}
	
		/**
		* InformationType ContactDetails
		*
		* information on how to reach a person or organisation by postal, internet, telephone, telex and radio systems
		* 
		* 
		* @property callName[0..1] callName |Defined in ContactDetails
		* @property callSign[0..1] callSign |Defined in ContactDetails
		* @property categoryOfCommPref[0..1] categoryOfCommPref |Defined in ContactDetails
		* @property communicationChannel[0..*] communicationChannel |Defined in ContactDetails
		* @property contactAddress[0..*] contactAddress |Defined in ContactDetails
		* @property contactInstructions[0..1] contactInstructions |Defined in ContactDetails
		* @property frequencyPair[0..*] frequencyPair |Defined in ContactDetails
		* @property information[0..*] information |Defined in ContactDetails
		* @property mMSICode[0..1] mMSICode |Defined in ContactDetails
		* @property onlineResource[0..*] onlineResource |Defined in ContactDetails
		* @property telecommunications[0..*] telecommunications |Defined in ContactDetails
		* @property Authority[0..*] authorityContact_theAuthority_Authority |Defined in ContactDetails
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
		*/
		 class ContactDetails extends InformationType
		{
			
			/**
			* InformationType ContactDetails
			*
			* information on how to reach a person or organisation by postal, internet, telephone, telex and radio systems
			* 
			* 
		* @property callName[0..1] callName |Defined in ContactDetails
		* @property callSign[0..1] callSign |Defined in ContactDetails
		* @property categoryOfCommPref[0..1] categoryOfCommPref |Defined in ContactDetails
		* @property communicationChannel[0..*] communicationChannel |Defined in ContactDetails
		* @property contactAddress[0..*] contactAddress |Defined in ContactDetails
		* @property contactInstructions[0..1] contactInstructions |Defined in ContactDetails
		* @property frequencyPair[0..*] frequencyPair |Defined in ContactDetails
		* @property information[0..*] information |Defined in ContactDetails
		* @property mMSICode[0..1] mMSICode |Defined in ContactDetails
		* @property onlineResource[0..*] onlineResource |Defined in ContactDetails
		* @property telecommunications[0..*] telecommunications |Defined in ContactDetails
		* @property Authority[0..*] authorityContact_theAuthority_Authority |Defined in ContactDetails
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('callName', 'callName', 0, 1);
				$this->addAttribute('callSign', 'callSign', 0, 1);
				$this->addAttribute('categoryOfCommPref', 'categoryOfCommPref', 0, 1);
				$this->addAttribute('communicationChannel', 'communicationChannel', 0, MAX_OCCUR);
				$this->addAttribute('contactAddress', 'contactAddress', 0, MAX_OCCUR);
				$this->addAttribute('contactInstructions', 'contactInstructions', 0, 1);
				$this->addAttribute('frequencyPair', 'frequencyPair', 0, MAX_OCCUR);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('mMSICode', 'mMSICode', 0, 1);
				$this->addAttribute('onlineResource', 'onlineResource', 0, MAX_OCCUR);
				$this->addAttribute('telecommunications', 'telecommunications', 0, MAX_OCCUR);
				
				//FeatureBindings
				
				//InformationBindings
				$this->addAttribute('authorityContact_theAuthority', 'Authority', 0, MAX_OCCUR);
				
			}
		}
	
		/**
		* InformationType NauticalInformation
		*
		* Nautical information about a related area or facility.
		* 
		* 
		* @property InformationType[0..*] additionalInformation_informationProvidedFor_InformationType |Defined in NauticalInformation
		* @property categoryOfAuthority[0..1] categoryOfAuthority |Defined in AbstractRxN
		* @property textContent[0..*] textContent |Defined in AbstractRxN
		* @property graphic[0..*] graphic |Defined in AbstractRxN
		* @property rxnCode[0..*] rxnCode |Defined in AbstractRxN
		* @property Applicability[0..*] InclusionType_isApplicableTo_Applicability |Defined in AbstractRxN
		* @property AbstractRxN[0..*] relatedOrganisation_theOrganisation_AbstractRxN |Defined in AbstractRxN
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
		*/
		 class NauticalInformation extends AbstractRxN
		{
			
			/**
			* InformationType NauticalInformation
			*
			* Nautical information about a related area or facility.
			* 
			* 
		* @property InformationType[0..*] additionalInformation_informationProvidedFor_InformationType |Defined in NauticalInformation
		* @property categoryOfAuthority[0..1] categoryOfAuthority |Defined in AbstractRxN
		* @property textContent[0..*] textContent |Defined in AbstractRxN
		* @property graphic[0..*] graphic |Defined in AbstractRxN
		* @property rxnCode[0..*] rxnCode |Defined in AbstractRxN
		* @property Applicability[0..*] InclusionType_isApplicableTo_Applicability |Defined in AbstractRxN
		* @property AbstractRxN[0..*] relatedOrganisation_theOrganisation_AbstractRxN |Defined in AbstractRxN
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				
				//FeatureBindings
				
				//InformationBindings
				$this->addAttribute('additionalInformation_informationProvidedFor', 'InformationType', 0, MAX_OCCUR);
				
			}
		}
	
		/**
		* InformationType NonStandardWorkingDay
		*
		* Days when many services are not available. Often days of festivity or recreation when normal working hours are limited, esp. a national or religious festival, etc.
		* 
		* 
		* @property dateFixed[0..*] dateFixed |Defined in NonStandardWorkingDay
		* @property dateVariable[0..*] dateVariable |Defined in NonStandardWorkingDay
		* @property information[0..*] information |Defined in NonStandardWorkingDay
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
		*/
		 class NonStandardWorkingDay extends InformationType
		{
			
			/**
			* InformationType NonStandardWorkingDay
			*
			* Days when many services are not available. Often days of festivity or recreation when normal working hours are limited, esp. a national or religious festival, etc.
			* 
			* 
		* @property dateFixed[0..*] dateFixed |Defined in NonStandardWorkingDay
		* @property dateVariable[0..*] dateVariable |Defined in NonStandardWorkingDay
		* @property information[0..*] information |Defined in NonStandardWorkingDay
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('dateFixed', 'dateFixed', 0, MAX_OCCUR);
				$this->addAttribute('dateVariable', 'dateVariable', 0, MAX_OCCUR);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* InformationType ServiceHours
		*
		* The time when a service is available and known exceptions.
		* 
		* 
		* @property scheduleByDoW[1..*] scheduleByDoW |Defined in ServiceHours
		* @property information[0..*] information |Defined in ServiceHours
		* @property NonStandardWorkingDay[0..*] exceptionalWorkday_partialWorkingDay_NonStandardWorkingDay |Defined in ServiceHours
		* @property Authority[0..*] authorityHours_theAuthority_srvHrs_Authority |Defined in ServiceHours
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
		*/
		 class ServiceHours extends InformationType
		{
			
			/**
			* InformationType ServiceHours
			*
			* The time when a service is available and known exceptions.
			* 
			* 
		* @property scheduleByDoW[1..*] scheduleByDoW |Defined in ServiceHours
		* @property information[0..*] information |Defined in ServiceHours
		* @property NonStandardWorkingDay[0..*] exceptionalWorkday_partialWorkingDay_NonStandardWorkingDay |Defined in ServiceHours
		* @property Authority[0..*] authorityHours_theAuthority_srvHrs_Authority |Defined in ServiceHours
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('scheduleByDoW', 'scheduleByDoW', 1, MAX_OCCUR);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				
				//FeatureBindings
				
				//InformationBindings
				$this->addAttribute('exceptionalWorkday_partialWorkingDay', 'NonStandardWorkingDay', 0, MAX_OCCUR);
				$this->addAttribute('authorityHours_theAuthority_srvHrs', 'Authority', 0, MAX_OCCUR);
				
			}
		}
	
		/**
		* InformationType ShipReport
		*
		* Describes how a ship should report to a maritime authority, including when to report, what to report and whether the format conforms to the IMO standard.
		* 
		* 
		* @property categoryofShipReport[1..*] categoryofShipReport |Defined in ShipReport
		* @property imoFormatForReporting[1..1] imoFormatForReporting |Defined in ShipReport
		* @property noticeTime[1..*] noticeTime |Defined in ShipReport
		* @property textContent[0..1] textContent |Defined in ShipReport
		* @property Applicability[0..*] reportReqmt_mustBeFiledBy_Applicability |Defined in ShipReport
		* @property Authority[0..*] reptAuthority_reportTo_Authority |Defined in ShipReport
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
		*/
		 class ShipReport extends InformationType
		{
			
			/**
			* InformationType ShipReport
			*
			* Describes how a ship should report to a maritime authority, including when to report, what to report and whether the format conforms to the IMO standard.
			* 
			* 
		* @property categoryofShipReport[1..*] categoryofShipReport |Defined in ShipReport
		* @property imoFormatForReporting[1..1] imoFormatForReporting |Defined in ShipReport
		* @property noticeTime[1..*] noticeTime |Defined in ShipReport
		* @property textContent[0..1] textContent |Defined in ShipReport
		* @property Applicability[0..*] reportReqmt_mustBeFiledBy_Applicability |Defined in ShipReport
		* @property Authority[0..*] reptAuthority_reportTo_Authority |Defined in ShipReport
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('categoryofShipReport', 'categoryofShipReport', 1, MAX_OCCUR);
				$this->addAttribute('imoFormatForReporting', 'imoFormatForReporting', 1, 1);
				$this->addAttribute('noticeTime', 'noticeTime', 1, MAX_OCCUR);
				$this->addAttribute('textContent', 'textContent', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				$this->addAttribute('reportReqmt_mustBeFiledBy', 'Applicability', 0, MAX_OCCUR);
				$this->addAttribute('reptAuthority_reportTo', 'Authority', 0, MAX_OCCUR);
				
			}
		}
	
		/**
		* InformationType Recommendations
		*
		* Recommendations for a related area or facility.
		* 
		* 
		* @property categoryOfAuthority[0..1] categoryOfAuthority |Defined in AbstractRxN
		* @property textContent[0..*] textContent |Defined in AbstractRxN
		* @property graphic[0..*] graphic |Defined in AbstractRxN
		* @property rxnCode[0..*] rxnCode |Defined in AbstractRxN
		* @property Applicability[0..*] InclusionType_isApplicableTo_Applicability |Defined in AbstractRxN
		* @property AbstractRxN[0..*] relatedOrganisation_theOrganisation_AbstractRxN |Defined in AbstractRxN
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
		*/
		 class Recommendations extends AbstractRxN
		{
			
			/**
			* InformationType Recommendations
			*
			* Recommendations for a related area or facility.
			* 
			* 
		* @property categoryOfAuthority[0..1] categoryOfAuthority |Defined in AbstractRxN
		* @property textContent[0..*] textContent |Defined in AbstractRxN
		* @property graphic[0..*] graphic |Defined in AbstractRxN
		* @property rxnCode[0..*] rxnCode |Defined in AbstractRxN
		* @property Applicability[0..*] InclusionType_isApplicableTo_Applicability |Defined in AbstractRxN
		* @property AbstractRxN[0..*] relatedOrganisation_theOrganisation_AbstractRxN |Defined in AbstractRxN
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* InformationType Regulations
		*
		* Regulations for a related area or facility.
		* 
		* 
		* @property categoryOfAuthority[0..1] categoryOfAuthority |Defined in AbstractRxN
		* @property textContent[0..*] textContent |Defined in AbstractRxN
		* @property graphic[0..*] graphic |Defined in AbstractRxN
		* @property rxnCode[0..*] rxnCode |Defined in AbstractRxN
		* @property Applicability[0..*] InclusionType_isApplicableTo_Applicability |Defined in AbstractRxN
		* @property AbstractRxN[0..*] relatedOrganisation_theOrganisation_AbstractRxN |Defined in AbstractRxN
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
		*/
		 class Regulations extends AbstractRxN
		{
			
			/**
			* InformationType Regulations
			*
			* Regulations for a related area or facility.
			* 
			* 
		* @property categoryOfAuthority[0..1] categoryOfAuthority |Defined in AbstractRxN
		* @property textContent[0..*] textContent |Defined in AbstractRxN
		* @property graphic[0..*] graphic |Defined in AbstractRxN
		* @property rxnCode[0..*] rxnCode |Defined in AbstractRxN
		* @property Applicability[0..*] InclusionType_isApplicableTo_Applicability |Defined in AbstractRxN
		* @property AbstractRxN[0..*] relatedOrganisation_theOrganisation_AbstractRxN |Defined in AbstractRxN
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* InformationType Restrictions
		*
		* Restrictions for a related area or facility.
		* 
		* 
		* @property categoryOfAuthority[0..1] categoryOfAuthority |Defined in AbstractRxN
		* @property textContent[0..*] textContent |Defined in AbstractRxN
		* @property graphic[0..*] graphic |Defined in AbstractRxN
		* @property rxnCode[0..*] rxnCode |Defined in AbstractRxN
		* @property Applicability[0..*] InclusionType_isApplicableTo_Applicability |Defined in AbstractRxN
		* @property AbstractRxN[0..*] relatedOrganisation_theOrganisation_AbstractRxN |Defined in AbstractRxN
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
		*/
		 class Restrictions extends AbstractRxN
		{
			
			/**
			* InformationType Restrictions
			*
			* Restrictions for a related area or facility.
			* 
			* 
		* @property categoryOfAuthority[0..1] categoryOfAuthority |Defined in AbstractRxN
		* @property textContent[0..*] textContent |Defined in AbstractRxN
		* @property graphic[0..*] graphic |Defined in AbstractRxN
		* @property rxnCode[0..*] rxnCode |Defined in AbstractRxN
		* @property Applicability[0..*] InclusionType_isApplicableTo_Applicability |Defined in AbstractRxN
		* @property AbstractRxN[0..*] relatedOrganisation_theOrganisation_AbstractRxN |Defined in AbstractRxN
		* @property fixedDateRange[0..1] fixedDateRange |Defined in InformationType
		* @property periodicDateRange[0..*] periodicDateRange |Defined in InformationType
		* @property featureName[0..*] featureName |Defined in InformationType
		* @property sourceIndication[0..*] sourceIndication |Defined in InformationType
		* @property NauticalInformation[0..*] additionalInformation_providesInformation_NauticalInformation |Defined in InformationType
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* InformationType SpatialQuality
		*
		* 
		* 
		* 
		* @property categoryOfTemporalVariation[0..1] categoryOfTemporalVariation |Defined in SpatialQuality
		* @property qualityOfHorizontalMeasurement[0..1] qualityOfHorizontalMeasurement |Defined in SpatialQuality
		* @property horizontalPositionalUncertainty[0..1] horizontalPositionalUncertainty |Defined in SpatialQuality
		*/
		 class SpatialQuality extends AbstractInformationType
		{
			
			/**
			* InformationType SpatialQuality
			*
			* 
			* 
			* 
		* @property categoryOfTemporalVariation[0..1] categoryOfTemporalVariation |Defined in SpatialQuality
		* @property qualityOfHorizontalMeasurement[0..1] qualityOfHorizontalMeasurement |Defined in SpatialQuality
		* @property horizontalPositionalUncertainty[0..1] horizontalPositionalUncertainty |Defined in SpatialQuality
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('categoryOfTemporalVariation', 'categoryOfTemporalVariation', 0, 1);
				$this->addAttribute('qualityOfHorizontalMeasurement', 'qualityOfHorizontalMeasurement', 0, 1);
				$this->addAttribute('horizontalPositionalUncertainty', 'horizontalPositionalUncertainty', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* InformationType SpatialQualityPoints
		*
		* 
		* 
		* 
		* @property categoryOfTemporalVariation[0..1] categoryOfTemporalVariation |Defined in SpatialQuality
		* @property qualityOfHorizontalMeasurement[0..1] qualityOfHorizontalMeasurement |Defined in SpatialQuality
		* @property horizontalPositionalUncertainty[0..1] horizontalPositionalUncertainty |Defined in SpatialQuality
		*/
		 class SpatialQualityPoints extends SpatialQuality
		{
			
			/**
			* InformationType SpatialQualityPoints
			*
			* 
			* 
			* 
		* @property categoryOfTemporalVariation[0..1] categoryOfTemporalVariation |Defined in SpatialQuality
		* @property qualityOfHorizontalMeasurement[0..1] qualityOfHorizontalMeasurement |Defined in SpatialQuality
		* @property horizontalPositionalUncertainty[0..1] horizontalPositionalUncertainty |Defined in SpatialQuality
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
	
	//********************************* ROLES ***********************************************************
	
		/**
		* Role
		* The applicable regulation, restriction, recommendation or nautical information
		*/
		class theApplicableRxN extends AbstractRole{}
	
		/**
		* Role
		* The location in which the information item applies
		*/
		class appliesInLocation extends AbstractRole{}
	
		/**
		* Role
		* A pointer to an Authority object
		*/
		class theAuthority extends AbstractRole{}
	
		/**
		* Role
		* The authority for which service hours are given
		*/
		class theAuthority_srvHrs extends AbstractRole{}
	
		/**
		* Role
		* A pointer to an Contact Details object
		*/
		class theContactDetails extends AbstractRole{}
	
		/**
		* Role
		* The controlling organization or authority for a geographically located service
		*/
		class controlAuthority extends AbstractRole{}
	
		/**
		* Role
		* The service controlled by an organisation or authority
		*/
		class controlledService extends AbstractRole{}
	
		/**
		* Role
		* A pointer to a specific spatial type(s).
		*/
		class definedFor extends AbstractRole{}
	
		/**
		* Role
		* A pointer to an information type providing spatial quality information.
		*/
		class defines extends AbstractRole{}
	
		/**
		* Role
		* A pointer to a specific feature(s).
		*/
		class identifies extends AbstractRole{}
	
		/**
		* Role
		* A pointer to a specific feature(s) for which further information is required.
		*/
		class informationProvidedFor extends AbstractRole{}
	
		/**
		* Role
		* The object or class of objects to which the regulation, restriction, recommendation, or nautical information applies
		*/
		class isApplicableTo extends AbstractRole{}
	
		/**
		* Role
		* Information related to an organisation
		*/
		class theInformation extends AbstractRole{}
	
		/**
		* Role
		* The marine protected area for which the authority is responsible
		*/
		class theMarineProtectedArea extends AbstractRole{}
	
		/**
		* Role
		* The organisation to which information relates
		*/
		class theOrganisation extends AbstractRole{}
	
		/**
		* Role
		* The work hours for a non-standard workday
		*/
		class partialWorkingDay extends AbstractRole{}
	
		/**
		* Role
		* The permissions for a location
		*/
		class permission extends AbstractRole{}
	
		/**
		* Role
		* The class (generally, qualifying vessels) which must file the report
		*/
		class mustBeFiledBy extends AbstractRole{}
	
		/**
		* Role
		* A pointer to a specific cartographically positioned location for text.
		*/
		class positions extends AbstractRole{}
	
		/**
		* Role
		* A pointer to an object that provides more information about the referencing feature or information type.
		*/
		class providesInformation extends AbstractRole{}
	
		/**
		* Role
		* The feature pertaining to a report
		*/
		class reptForLocation extends AbstractRole{}
	
		/**
		* Role
		* The organisation or place to which a report is sent.
		*/
		class reportTo extends AbstractRole{}
	
		/**
		* Role
		* The responsible authority
		*/
		class responsibleAuthority extends AbstractRole{}
	
		/**
		* Role
		* The regulation, restriction, recommendation, or nautical information
		*/
		class theRxN extends AbstractRole{}
	
		/**
		* Role
		* Service hours for an authority ore service provider
		*/
		class theServiceHours extends AbstractRole{}
	
		/**
		* Role
		* The usual service hours to which an exception applies
		*/
		class theServiceHours_nsdy extends AbstractRole{}
	
		/**
		* Role
		* The report to be filed by a vessel
		*/
		class theShipReport extends AbstractRole{}
	
		/**
		* Role
		* The report for a traffic service
		*/
		class reptForTrafficServ extends AbstractRole{}
	
		/**
		* Role
		* The location to which the permission statement applies
		*/
		class vslLocation extends AbstractRole{}
	
	
	//********************************* FeatureAssociations ***********************************************************
	
		/**
		* FeatureAssociation
		* A feature association for the binding between a geo feature and the cartographically positioned location for text.
		*/
		class textAssociation extends AbstractFeatureAssociation
		{
			
			public $identifies = null;
			public $positions = null;
		}
	
	
	
	//********************************* InformationAssociations ***********************************************************
	
		/**
		* InformationAssociation
		* A feature association for the binding between at least one instance of a geo feature and an instance of an information type.
		*/
		class additionalInformation extends AbstractInformationAssociation
		{
			
			public $providesInformation = null;
			
			public $informationProvidedFor = null;
			
		}
	
		/**
		* InformationAssociation
		* Contact information for an authority
		*/
		class authorityContact extends AbstractInformationAssociation
		{
			
			public $theAuthority = null;
			
			public $theContactDetails = null;
			
		}
	
		/**
		* InformationAssociation
		* Service hours for an authority
		*/
		class authorityHours extends AbstractInformationAssociation
		{
			
			public $theAuthority_srvHrs = null;
			
			public $theServiceHours = null;
			
		}
	
		/**
		* InformationAssociation
		* Association between a geographic location and a regulation, restriction, recommendation, or nautical information
		*/
		class associatedRxN extends AbstractInformationAssociation
		{
			
			public $appliesInLocation = null;
			
			public $theRxN = null;
			
		}
	
		/**
		* InformationAssociation
		* Exception to the usual working day
		*/
		class exceptionalWorkday extends AbstractInformationAssociation
		{
			
			public $theServiceHours_nsdy = null;
			
			public $partialWorkingDay = null;
			
		}
	
		/**
		* InformationAssociation
		* Association class specifying the relationship between the subset of vessels described by an APPLIC data object and a regulation (restriction, recommendation, or nautical information).
		*/
		class InclusionType extends AbstractInformationAssociation
		{
			
			public $theApplicableRxN = null;
			
			public $isApplicableTo = null;
			
		}
	
		/**
		* InformationAssociation
		* Association class for associations describing whether the subsets of vessels determined by the ship characteristics specified in APPLIC may (or must, etc.) transit,  enter, or use  a feature.
		*/
		class PermissionType extends AbstractInformationAssociation
		{
			
			public $vslLocation = null;
			
			public $permission = null;
			
		}
	
		/**
		* InformationAssociation
		* Authority responsible for a protected area.
		*/
		class protectedAreaAuthority extends AbstractInformationAssociation
		{
			
			public $theMarineProtectedArea = null;
			
			public $responsibleAuthority = null;
			
		}
	
		/**
		* InformationAssociation
		* Related organisation
		*/
		class relatedOrganisation extends AbstractInformationAssociation
		{
			
			public $theInformation = null;
			
			public $theOrganisation = null;
			
		}
	
		/**
		* InformationAssociation
		* The authority with which a report must be filed
		*/
		class reptAuthority extends AbstractInformationAssociation
		{
			
			public $reportTo = null;
			
			public $theShipReport = null;
			
		}
	
		/**
		* InformationAssociation
		* Association between types of reports and classes of vessels which must file report of the type described
		*/
		class reportReqmt extends AbstractInformationAssociation
		{
			
			public $theShipReport = null;
			
			public $mustBeFiledBy = null;
			
		}
	
		/**
		* InformationAssociation
		* Association between a geographically located service and the organisation that controls it
		*/
		class srvControl extends AbstractInformationAssociation
		{
			
			public $controlledService = null;
			
			public $controlAuthority = null;
			
		}
	
		/**
		* InformationAssociation
		* An association for the binding between a spatial type and its spatial quality information.
		*/
		class spatialAssociation extends AbstractInformationAssociation
		{
			
			public $definedFor = null;
			
			public $defines = null;
			
		}
	
		/**
		* InformationAssociation
		* Association between traffic control service and reports required of vessels pertaining to that area
		*/
		class trafficServRept extends AbstractInformationAssociation
		{
			
			public $reptForLocation = null;
			
			public $reptForTrafficServ = null;
			
		}
	?>