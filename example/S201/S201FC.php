<?php
	/**
	* S100 PS Features as PHP, generated by FIHO-S100-TOOLS-FC2PHP
	* Feature Catalogue for S-201 AtoN version 0.1
	*/
	
	//********************************* SIMPLE ATTRIBUTES ***********************************************************
	
			/**
			* Enumeration aidAvailabilityCategory
			*
			* 
			* @property int value
			*/
			class aidAvailabilityCategory extends EnumerationType
			{
				/**
				* Enumeration aidAvailabilityCategory
				*
				* 
				* @param int value
				* 
				* 1=Category 1
				* 2=Category 2
				* 3=Categpru 3
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "Category 1");
					$this->addValue(2, "Category 2");
					$this->addValue(3, "Categpru 3");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute atoNMaintenanceRecord
			*
			* 
			* @property text value
			*/
			class atoNMaintenanceRecord extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* Enumeration beaconShape
			*
			* The shape a beacon exhibits
			* @property int value
			*/
			class beaconShape extends EnumerationType
			{
				/**
				* Enumeration beaconShape
				*
				* The shape a beacon exhibits
				* @param int value
				* 
				* 1=stake, pole, perch, post
				* 2=withy
				* 3=beacon tower
				* 4=lattice beacon
				* 5=pile beacon
				* 6=cairn
				* 7=buoyant beacon
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "stake, pole, perch, post");
					$this->addValue(2, "withy");
					$this->addValue(3, "beacon tower");
					$this->addValue(4, "lattice beacon");
					$this->addValue(5, "pile beacon");
					$this->addValue(6, "cairn");
					$this->addValue(7, "buoyant beacon");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration buildingShape
			*
			* The specific shape of the building.
			* @property int value
			*/
			class buildingShape extends EnumerationType
			{
				/**
				* Enumeration buildingShape
				*
				* The specific shape of the building.
				* @param int value
				* 
				* 5=high-rise building
				* 6=pyramid
				* 7=cylindrical
				* 8=spherical
				* 9=cubic
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(5, "high-rise building");
					$this->addValue(6, "pyramid");
					$this->addValue(7, "cylindrical");
					$this->addValue(8, "spherical");
					$this->addValue(9, "cubic");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration buoyShape
			*
			* The shape a buoy exhibits
			* @property int value
			*/
			class buoyShape extends EnumerationType
			{
				/**
				* Enumeration buoyShape
				*
				* The shape a buoy exhibits
				* @param int value
				* 
				* 1=conical (nun, ogival)
				* 2=can (cylindrical)
				* 3=spherical
				* 4=pillar
				* 5=spar (spindle)
				* 6=barrel (tun)
				* 7=super-buoy
				* 8=ice buoy
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "conical (nun, ogival)");
					$this->addValue(2, "can (cylindrical)");
					$this->addValue(3, "spherical");
					$this->addValue(4, "pillar");
					$this->addValue(5, "spar (spindle)");
					$this->addValue(6, "barrel (tun)");
					$this->addValue(7, "super-buoy");
					$this->addValue(8, "ice buoy");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfAggregation
			*
			* 
			* @property int value
			*/
			class categoryOfAggregation extends EnumerationType
			{
				/**
				* Enumeration categoryOfAggregation
				*
				* 
				* @param int value
				* 
				* 1=leading line
				* 2=range system
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "leading line");
					$this->addValue(2, "range system");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfAssociation
			*
			* 
			* @property int value
			*/
			class categoryOfAssociation extends EnumerationType
			{
				/**
				* Enumeration categoryOfAssociation
				*
				* 
				* @param int value
				* 
				* 1=channel markings
				* 2=danger markings
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "channel markings");
					$this->addValue(2, "danger markings");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfCardinalMark
			*
			* Cardinal marks are classified according to the quadrant of space they occupy.
			* @property int value
			*/
			class categoryOfCardinalMark extends EnumerationType
			{
				/**
				* Enumeration categoryOfCardinalMark
				*
				* Cardinal marks are classified according to the quadrant of space they occupy.
				* @param int value
				* 
				* 1=north cardinal mark
				* 2=east cardinal mark
				* 3=south cardinal mark
				* 4=west cardinal mark
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "north cardinal mark");
					$this->addValue(2, "east cardinal mark");
					$this->addValue(3, "south cardinal mark");
					$this->addValue(4, "west cardinal mark");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfFogSignal
			*
			* Classification of the various means of generating the fog signal.
			* @property int value
			*/
			class categoryOfFogSignal extends EnumerationType
			{
				/**
				* Enumeration categoryOfFogSignal
				*
				* Classification of the various means of generating the fog signal.
				* @param int value
				* 
				* 1=explosive
				* 2=diaphone
				* 3=siren
				* 4=nautophone
				* 5=reed
				* 6=tyfon
				* 7=bell
				* 8=whistle
				* 9=gong
				* 10=horn
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "explosive");
					$this->addValue(2, "diaphone");
					$this->addValue(3, "siren");
					$this->addValue(4, "nautophone");
					$this->addValue(5, "reed");
					$this->addValue(6, "tyfon");
					$this->addValue(7, "bell");
					$this->addValue(8, "whistle");
					$this->addValue(9, "gong");
					$this->addValue(10, "horn");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfInstallationBuoy
			*
			* Classification of fixed installation buoy
			* @property int value
			*/
			class categoryOfInstallationBuoy extends EnumerationType
			{
				/**
				* Enumeration categoryOfInstallationBuoy
				*
				* Classification of fixed installation buoy
				* @param int value
				* 
				* 1=catenary anchor leg mooring (CALM)
				* 2=single buoy mooring (SBM)
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "catenary anchor leg mooring (CALM)");
					$this->addValue(2, "single buoy mooring (SBM)");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfLateralMark
			*
			* Classification of lateral buoys
			* @property int value
			*/
			class categoryOfLateralMark extends EnumerationType
			{
				/**
				* Enumeration categoryOfLateralMark
				*
				* Classification of lateral buoys
				* @param int value
				* 
				* 1=port-hand lateral mark
				* 2=starboard-hand lateral mark
				* 3=preferred channel to starboard lateral mark
				* 4=preferred channel to port lateral mark
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "port-hand lateral mark");
					$this->addValue(2, "starboard-hand lateral mark");
					$this->addValue(3, "preferred channel to starboard lateral mark");
					$this->addValue(4, "preferred channel to port lateral mark");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfLight
			*
			* Classification of diffrent light types
			* @property int value
			*/
			class categoryOfLight extends EnumerationType
			{
				/**
				* Enumeration categoryOfLight
				*
				* Classification of diffrent light types
				* @param int value
				* 
				* 4=leading light
				* 5=aero light
				* 6=air obstruction light
				* 7=fog detector light
				* 8=flood light
				* 9=strip light
				* 10=subsidiary light
				* 11=spotlight
				* 12=front
				* 13=rear
				* 14=lower
				* 15=upper
				* 17=emergency
				* 18=bearing light
				* 19=horizontally disposed
				* 20=vertically disposed
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(4, "leading light");
					$this->addValue(5, "aero light");
					$this->addValue(6, "air obstruction light");
					$this->addValue(7, "fog detector light");
					$this->addValue(8, "flood light");
					$this->addValue(9, "strip light");
					$this->addValue(10, "subsidiary light");
					$this->addValue(11, "spotlight");
					$this->addValue(12, "front");
					$this->addValue(13, "rear");
					$this->addValue(14, "lower");
					$this->addValue(15, "upper");
					$this->addValue(17, "emergency");
					$this->addValue(18, "bearing light");
					$this->addValue(19, "horizontally disposed");
					$this->addValue(20, "vertically disposed");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfNavigationLine
			*
			* Classification of route guidence given to vessels
			* @property int value
			*/
			class categoryOfNavigationLine extends EnumerationType
			{
				/**
				* Enumeration categoryOfNavigationLine
				*
				* Classification of route guidence given to vessels
				* @param int value
				* 
				* 1=clearing line
				* 2=transit line
				* 3=leading line bearing a recommended track
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "clearing line");
					$this->addValue(2, "transit line");
					$this->addValue(3, "leading line bearing a recommended track");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfOffshorePlatform
			*
			* Classification of an offshore raised structure
			* @property int value
			*/
			class categoryOfOffshorePlatform extends EnumerationType
			{
				/**
				* Enumeration categoryOfOffshorePlatform
				*
				* Classification of an offshore raised structure
				* @param int value
				* 
				* 1=oil derrick/rig
				* 2=production platform
				* 3=observation/research platform
				* 4=articulated loading platform (ALP)
				* 5=single anchor leg mooring (SALM)
				* 6=mooring tower
				* 7=artificial island
				* 8=floating production, storage and offloading vessel (FPSO)
				* 9=accommodation platform
				* 10=navigation, communication and control buoy (NCCB)
				* 11=offshore oil tank
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "oil derrick/rig");
					$this->addValue(2, "production platform");
					$this->addValue(3, "observation/research platform");
					$this->addValue(4, "articulated loading platform (ALP)");
					$this->addValue(5, "single anchor leg mooring (SALM)");
					$this->addValue(6, "mooring tower");
					$this->addValue(7, "artificial island");
					$this->addValue(8, "floating production, storage and offloading vessel (FPSO)");
					$this->addValue(9, "accommodation platform");
					$this->addValue(10, "navigation, communication and control buoy (NCCB)");
					$this->addValue(11, "offshore oil tank");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfPile
			*
			* Classification of pile, driven into the earth as a foundation or support for a structure
			* @property int value
			*/
			class categoryOfPile extends EnumerationType
			{
				/**
				* Enumeration categoryOfPile
				*
				* Classification of pile, driven into the earth as a foundation or support for a structure
				* @param int value
				* 
				* 1=stake
				* 3=post
				* 4=tripodal
				* 5=piling
				* 6=area of piles
				* 7=pipe
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "stake");
					$this->addValue(3, "post");
					$this->addValue(4, "tripodal");
					$this->addValue(5, "piling");
					$this->addValue(6, "area of piles");
					$this->addValue(7, "pipe");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfRadarTransponderBeacon
			*
			* Classification of radar transponder beacon based on fuctionality.
			* @property int value
			*/
			class categoryOfRadarTransponderBeacon extends EnumerationType
			{
				/**
				* Enumeration categoryOfRadarTransponderBeacon
				*
				* Classification of radar transponder beacon based on fuctionality.
				* @param int value
				* 
				* 1=ramark, radar beacon transmitting continuously
				* 2=racon, radar transponder beacon
				* 3=leading racon/radar transponder beacon
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "ramark, radar beacon transmitting continuously");
					$this->addValue(2, "racon, radar transponder beacon");
					$this->addValue(3, "leading racon/radar transponder beacon");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfRecommendedTrack
			*
			* Classification of track based on defining navigational marks
			* @property int value
			*/
			class categoryOfRecommendedTrack extends EnumerationType
			{
				/**
				* Enumeration categoryOfRecommendedTrack
				*
				* Classification of track based on defining navigational marks
				* @param int value
				* 
				* 1=based on a system of fixed marks
				* 2=not based on a system of fixed marks
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "based on a system of fixed marks");
					$this->addValue(2, "not based on a system of fixed marks");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfSiloTank
			*
			* Classification based on the product
			* @property int value
			*/
			class categoryOfSiloTank extends EnumerationType
			{
				/**
				* Enumeration categoryOfSiloTank
				*
				* Classification based on the product
				* @param int value
				* 
				* 1=silo in general
				* 2=tank in general
				* 3=grain elevator
				* 4=water tower
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "silo in general");
					$this->addValue(2, "tank in general");
					$this->addValue(3, "grain elevator");
					$this->addValue(4, "water tower");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration categoryOfSpecialPurposeMark
			*
			* Classification of an aid to navigation which signifies some special purpose
			* @property int value
			*/
			class categoryOfSpecialPurposeMark extends EnumerationType
			{
				/**
				* Enumeration categoryOfSpecialPurposeMark
				*
				* Classification of an aid to navigation which signifies some special purpose
				* @param int value
				* 
				* 1=firing danger mark
				* 2=target mark
				* 3=marker ship mark
				* 4=degaussing range mark
				* 5=barge mark
				* 6=cable mark
				* 7=spoil ground mark
				* 8=outfall mark
				* 9=ODAS
				* 10=recording mark
				* 11=seaplane anchorage mark
				* 12=recreation zone mark
				* 13=private mark
				* 14=mooring mark
				* 15=LANBY
				* 16=leading mark
				* 17=measured distance mark
				* 18=notice mark
				* 19=TSS mark
				* 20=anchoring prohibited mark
				* 21=berthing prohibited mark
				* 22=overtaking prohibited mark
				* 23=two-way traffic prohibited mark
				* 24="reduced wake" mark
				* 25=speed limit mark
				* 26=stop mark
				* 27=general warning mark
				* 28="sound ships siren" mark
				* 29=restricted vertical clearance mark
				* 30=maximum vessel's draught mark
				* 31=restricted horizontal clearance mark
				* 32=strong current warning mark
				* 33=berthing permitted mark
				* 34=overhead power cable mark
				* 35="channel edge gradient" mark
				* 36=telephone mark
				* 37=ferry crossing mark
				* 39=pipeline mark
				* 40=anchorage mark
				* 41=clearing mark
				* 42=control mark
				* 43=diving mark
				* 44=refuge beacon
				* 45=foul ground mark
				* 46=yachting mark
				* 47=heliport mark
				* 48=GNSS mark
				* 49=seaplane landing mark
				* 50=entry prohibited mark
				* 51=work in progress mark
				* 52=mark with unknown purpose
				* 53=wellhead mark
				* 54=channel separation mark
				* 55=marine farm mark
				* 56=artificial reef mark
				* 57=ice mark
				* 58=nature reserve mark
				* 59=fish aggregating device (FAD)
				* 60=wreck mark
				* 61=customs mark
				* 62=causeway mark
				* 63=wave recorder
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "firing danger mark");
					$this->addValue(2, "target mark");
					$this->addValue(3, "marker ship mark");
					$this->addValue(4, "degaussing range mark");
					$this->addValue(5, "barge mark");
					$this->addValue(6, "cable mark");
					$this->addValue(7, "spoil ground mark");
					$this->addValue(8, "outfall mark");
					$this->addValue(9, "ODAS");
					$this->addValue(10, "recording mark");
					$this->addValue(11, "seaplane anchorage mark");
					$this->addValue(12, "recreation zone mark");
					$this->addValue(13, "private mark");
					$this->addValue(14, "mooring mark");
					$this->addValue(15, "LANBY");
					$this->addValue(16, "leading mark");
					$this->addValue(17, "measured distance mark");
					$this->addValue(18, "notice mark");
					$this->addValue(19, "TSS mark");
					$this->addValue(20, "anchoring prohibited mark");
					$this->addValue(21, "berthing prohibited mark");
					$this->addValue(22, "overtaking prohibited mark");
					$this->addValue(23, "two-way traffic prohibited mark");
					$this->addValue(24, ""reduced wake" mark");
					$this->addValue(25, "speed limit mark");
					$this->addValue(26, "stop mark");
					$this->addValue(27, "general warning mark");
					$this->addValue(28, ""sound ships siren" mark");
					$this->addValue(29, "restricted vertical clearance mark");
					$this->addValue(30, "maximum vessel's draught mark");
					$this->addValue(31, "restricted horizontal clearance mark");
					$this->addValue(32, "strong current warning mark");
					$this->addValue(33, "berthing permitted mark");
					$this->addValue(34, "overhead power cable mark");
					$this->addValue(35, ""channel edge gradient" mark");
					$this->addValue(36, "telephone mark");
					$this->addValue(37, "ferry crossing mark");
					$this->addValue(39, "pipeline mark");
					$this->addValue(40, "anchorage mark");
					$this->addValue(41, "clearing mark");
					$this->addValue(42, "control mark");
					$this->addValue(43, "diving mark");
					$this->addValue(44, "refuge beacon");
					$this->addValue(45, "foul ground mark");
					$this->addValue(46, "yachting mark");
					$this->addValue(47, "heliport mark");
					$this->addValue(48, "GNSS mark");
					$this->addValue(49, "seaplane landing mark");
					$this->addValue(50, "entry prohibited mark");
					$this->addValue(51, "work in progress mark");
					$this->addValue(52, "mark with unknown purpose");
					$this->addValue(53, "wellhead mark");
					$this->addValue(54, "channel separation mark");
					$this->addValue(55, "marine farm mark");
					$this->addValue(56, "artificial reef mark");
					$this->addValue(57, "ice mark");
					$this->addValue(58, "nature reserve mark");
					$this->addValue(59, "fish aggregating device (FAD)");
					$this->addValue(60, "wreck mark");
					$this->addValue(61, "customs mark");
					$this->addValue(62, "causeway mark");
					$this->addValue(63, "wave recorder");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration colour
			*
			* The property possessed by an object of producing different sensations on the eye as a result of the way it reflects or emits light.
			* @property int value
			*/
			class colour extends EnumerationType
			{
				/**
				* Enumeration colour
				*
				* The property possessed by an object of producing different sensations on the eye as a result of the way it reflects or emits light.
				* @param int value
				* 
				* 1=white
				* 2=black
				* 3=red
				* 4=green
				* 5=blue
				* 6=yellow
				* 7=grey
				* 8=brown
				* 9=amber
				* 10=violet
				* 11=orange
				* 12=magenta
				* 13=pink
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "white");
					$this->addValue(2, "black");
					$this->addValue(3, "red");
					$this->addValue(4, "green");
					$this->addValue(5, "blue");
					$this->addValue(6, "yellow");
					$this->addValue(7, "grey");
					$this->addValue(8, "brown");
					$this->addValue(9, "amber");
					$this->addValue(10, "violet");
					$this->addValue(11, "orange");
					$this->addValue(12, "magenta");
					$this->addValue(13, "pink");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration colourPattern
			*
			* A regular repeated design containing more than one colour
			* @property int value
			*/
			class colourPattern extends EnumerationType
			{
				/**
				* Enumeration colourPattern
				*
				* A regular repeated design containing more than one colour
				* @param int value
				* 
				* 1=horizontal stripes
				* 2=vertical stripes
				* 3=diagonal stripes
				* 4=squared
				* 5=stripes (direction unknown)
				* 6=border stripe
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "horizontal stripes");
					$this->addValue(2, "vertical stripes");
					$this->addValue(3, "diagonal stripes");
					$this->addValue(4, "squared");
					$this->addValue(5, "stripes (direction unknown)");
					$this->addValue(6, "border stripe");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration condition
			*
			* The various conditions of buildings and other constructions.
			* @property int value
			*/
			class condition extends EnumerationType
			{
				/**
				* Enumeration condition
				*
				* The various conditions of buildings and other constructions.
				* @param int value
				* 
				* 1=under construction
				* 2=ruined
				* 3=under reclamation
				* 4=wingless
				* 5=planned construction
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "under construction");
					$this->addValue(2, "ruined");
					$this->addValue(3, "under reclamation");
					$this->addValue(4, "wingless");
					$this->addValue(5, "planned construction");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute dateEnd
			*
			* The latest date on which an object (e.g., a buoy) will be present.
			* @property text value
			*/
			class dateEnd extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute dateStart
			*
			* The earliest date on which an object (e.g., a buoy) will be present.
			* @property text value
			*/
			class dateStart extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute depthRangeMaximumValue
			*
			* The maximum (deepest) value of a depth range.
			* @property real value
			*/
			class depthRangeMaximumValue extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute depthRangeMinimumValue
			*
			* The minimum (shoalest) value of a depth range.
			* @property real value
			*/
			class depthRangeMinimumValue extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute elevation
			*
			* The altitude of the ground level of an object, measured from a specified vertical datum.
			* @property real value
			*/
			class elevation extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* Enumeration exhibitionConditionOfLight
			*
			* The outward display of the light
			* @property int value
			*/
			class exhibitionConditionOfLight extends EnumerationType
			{
				/**
				* Enumeration exhibitionConditionOfLight
				*
				* The outward display of the light
				* @param int value
				* 
				* 1=light shown without change of character
				* 2=daytime light
				* 3=fog light
				* 4=night light
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "light shown without change of character");
					$this->addValue(2, "daytime light");
					$this->addValue(3, "fog light");
					$this->addValue(4, "night light");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration function
			*
			* A specific role that describes a feature
			* @property int value
			*/
			class function extends EnumerationType
			{
				/**
				* Enumeration function
				*
				* A specific role that describes a feature
				* @param int value
				* 
				* 2=harbour-master's office
				* 3=customs office
				* 4=health office
				* 5=hospital
				* 6=post office
				* 7=hotel
				* 8=railway station
				* 9=police station
				* 10=water-police station
				* 11=pilot office
				* 12=pilot lookout
				* 13=bank office
				* 14=headquarters for district control
				* 15=transit shed/warehouse
				* 16=factory
				* 17=power station
				* 18=administrative
				* 19=educational facility
				* 20=church
				* 21=chapel
				* 22=temple
				* 23=pagoda
				* 24=shinto shrine
				* 25=buddhist temple
				* 26=mosque
				* 27=marabout
				* 28=lookout
				* 29=communication
				* 30=television
				* 31=radio
				* 32=radar
				* 33=light support
				* 34=microwave
				* 35=cooling
				* 36=observation
				* 37=time ball
				* 38=clock
				* 39=control
				* 40=airship mooring
				* 41=stadium
				* 42=bus station
				* 43=passenger terminal building
				* 44=sea rescue control
				* 45=observatory
				* 46=ore crusher
				* 47=boathouse
				* 48=pumping station
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(2, "harbour-master's office");
					$this->addValue(3, "customs office");
					$this->addValue(4, "health office");
					$this->addValue(5, "hospital");
					$this->addValue(6, "post office");
					$this->addValue(7, "hotel");
					$this->addValue(8, "railway station");
					$this->addValue(9, "police station");
					$this->addValue(10, "water-police station");
					$this->addValue(11, "pilot office");
					$this->addValue(12, "pilot lookout");
					$this->addValue(13, "bank office");
					$this->addValue(14, "headquarters for district control");
					$this->addValue(15, "transit shed/warehouse");
					$this->addValue(16, "factory");
					$this->addValue(17, "power station");
					$this->addValue(18, "administrative");
					$this->addValue(19, "educational facility");
					$this->addValue(20, "church");
					$this->addValue(21, "chapel");
					$this->addValue(22, "temple");
					$this->addValue(23, "pagoda");
					$this->addValue(24, "shinto shrine");
					$this->addValue(25, "buddhist temple");
					$this->addValue(26, "mosque");
					$this->addValue(27, "marabout");
					$this->addValue(28, "lookout");
					$this->addValue(29, "communication");
					$this->addValue(30, "television");
					$this->addValue(31, "radio");
					$this->addValue(32, "radar");
					$this->addValue(33, "light support");
					$this->addValue(34, "microwave");
					$this->addValue(35, "cooling");
					$this->addValue(36, "observation");
					$this->addValue(37, "time ball");
					$this->addValue(38, "clock");
					$this->addValue(39, "control");
					$this->addValue(40, "airship mooring");
					$this->addValue(41, "stadium");
					$this->addValue(42, "bus station");
					$this->addValue(43, "passenger terminal building");
					$this->addValue(44, "sea rescue control");
					$this->addValue(45, "observatory");
					$this->addValue(46, "ore crusher");
					$this->addValue(47, "boathouse");
					$this->addValue(48, "pumping station");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute height
			*
			* The value of the vertical distance to the highest point of the object, measured from a specified vertical datum.
			* @property real value
			*/
			class height extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute horizontalAccuracy
			*
			* The best estimate of the horizontal accuracy of horizontal clearance and distances.
			* @property real value
			*/
			class horizontalAccuracy extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute horizontalLength
			*
			* A measurement of the longer of two linear axis.
			* @property real value
			*/
			class horizontalLength extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute horizontalWidth
			*
			* A measurement of the shorter of two linear axis.
			* @property real value
			*/
			class horizontalWidth extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute idcode
			*
			* 
			* @property text value
			*/
			class idcode extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute information
			*
			* 
			* @property text value
			*/
			class information extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute informationInNationalLanguage
			*
			* Textual information in national language characters
			* @property text value
			*/
			class informationInNationalLanguage extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute inspectionFrequency
			*
			* 
			* @property text value
			*/
			class inspectionFrequency extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute inspectionRequirements
			*
			* 
			* @property text value
			*/
			class inspectionRequirements extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute installationDate
			*
			* 
			* @property text value
			*/
			class installationDate extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* Enumeration lightCharacteristic
			*
			* The typical behaviour associated with the light
			* @property int value
			*/
			class lightCharacteristic extends EnumerationType
			{
				/**
				* Enumeration lightCharacteristic
				*
				* The typical behaviour associated with the light
				* @param int value
				* 
				* 1=fixed
				* 2=flashing
				* 3=long-flashing
				* 4=quick-flashing
				* 5=very quick flashing
				* 6=ultra quick flashing
				* 7=isophased
				* 8=occulting
				* 9=interrupted quick flashing
				* 10=interrupted very quick flashing
				* 11=interrupted ultra quick flashing
				* 12=morse
				* 13=fixed and flash
				* 14=flash and long-flash
				* 15=occulting  and flash
				* 16=fixed and long-flash
				* 17=occulting alternating
				* 18=long-flash alternating
				* 19=flash alternating
				* 25=quick-flash plus long-flash
				* 26=very quick-flash plus long-flash
				* 27=ultra quick-flash plus long-flash
				* 28=alternating
				* 29=fixed and alternating flashing
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "fixed");
					$this->addValue(2, "flashing");
					$this->addValue(3, "long-flashing");
					$this->addValue(4, "quick-flashing");
					$this->addValue(5, "very quick flashing");
					$this->addValue(6, "ultra quick flashing");
					$this->addValue(7, "isophased");
					$this->addValue(8, "occulting");
					$this->addValue(9, "interrupted quick flashing");
					$this->addValue(10, "interrupted very quick flashing");
					$this->addValue(11, "interrupted ultra quick flashing");
					$this->addValue(12, "morse");
					$this->addValue(13, "fixed and flash");
					$this->addValue(14, "flash and long-flash");
					$this->addValue(15, "occulting  and flash");
					$this->addValue(16, "fixed and long-flash");
					$this->addValue(17, "occulting alternating");
					$this->addValue(18, "long-flash alternating");
					$this->addValue(19, "flash alternating");
					$this->addValue(25, "quick-flash plus long-flash");
					$this->addValue(26, "very quick-flash plus long-flash");
					$this->addValue(27, "ultra quick-flash plus long-flash");
					$this->addValue(28, "alternating");
					$this->addValue(29, "fixed and alternating flashing");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration lightVisibility
			*
			* The specific visibility of a light, with respect to the light's intensity and ease of recognition.
			* @property int value
			*/
			class lightVisibility extends EnumerationType
			{
				/**
				* Enumeration lightVisibility
				*
				* The specific visibility of a light, with respect to the light's intensity and ease of recognition.
				* @param int value
				* 
				* 1=high intensity
				* 2=low intensity
				* 3=faint
				* 4=intensified
				* 5=unintensified
				* 6=visibility deliberately restricted
				* 7=obscured
				* 8=partially obscured
				* 9=visible in line of range
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "high intensity");
					$this->addValue(2, "low intensity");
					$this->addValue(3, "faint");
					$this->addValue(4, "intensified");
					$this->addValue(5, "unintensified");
					$this->addValue(6, "visibility deliberately restricted");
					$this->addValue(7, "obscured");
					$this->addValue(8, "partially obscured");
					$this->addValue(9, "visible in line of range");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute mannedStructure
			*
			* 
			* @property boolean value
			*/
			class mannedStructure extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_boolean($value);
				}
			}
         
			/**
			* Enumeration marksNavigationalSystemOf
			*
			* The system of navigational buoyage a region complies with.
			* @property int value
			*/
			class marksNavigationalSystemOf extends EnumerationType
			{
				/**
				* Enumeration marksNavigationalSystemOf
				*
				* The system of navigational buoyage a region complies with.
				* @param int value
				* 
				* 1=IALA A
				* 2=IALA B
				* 9=no system
				* 10=other system
				* 11=CEVNI
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "IALA A");
					$this->addValue(2, "IALA B");
					$this->addValue(9, "no system");
					$this->addValue(10, "other system");
					$this->addValue(11, "CEVNI");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute multiplicityOfLights
			*
			* The number of lights of identical character that exist as a co-located group.
			* @property integer value
			*/
			class multiplicityOfLights extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_integer($value);
				}
			}
         
			/**
			* Enumeration natureOfConstruction
			*
			* The buildings primary construction material
			* @property int value
			*/
			class natureOfConstruction extends EnumerationType
			{
				/**
				* Enumeration natureOfConstruction
				*
				* The buildings primary construction material
				* @param int value
				* 
				* 1=masonry
				* 2=concreted
				* 3=loose boulders
				* 4=hard surface
				* 5=unsurfaced
				* 6=wooden
				* 7=metal
				* 8=glass reinforced plastic (GRP)
				* 9=painted
				* 11=latticed
				* 12=glass
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "masonry");
					$this->addValue(2, "concreted");
					$this->addValue(3, "loose boulders");
					$this->addValue(4, "hard surface");
					$this->addValue(5, "unsurfaced");
					$this->addValue(6, "wooden");
					$this->addValue(7, "metal");
					$this->addValue(8, "glass reinforced plastic (GRP)");
					$this->addValue(9, "painted");
					$this->addValue(11, "latticed");
					$this->addValue(12, "glass");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute objectName
			*
			* The individual name of an object.
			* @property text value
			*/
			class objectName extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute objectNameInNationalLanguage
			*
			* Name of object in national language characters.
			* @property text value
			*/
			class objectNameInNationalLanguage extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute orientationValue
			*
			* 
			* @property real value
			*/
			class orientationValue extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute periodicDateEnd
			*
			* The end of the active period for a seasonal object (e.g., a buoy).
			* @property text value
			*/
			class periodicDateEnd extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute periodicDateStart
			*
			* The start of the active period for a seasonal object (e.g., a buoy).
			* @property text value
			*/
			class periodicDateStart extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute pictorialRepresentation
			*
			* Indicates whether a pictorial representation of the object is available.
			* @property text value
			*/
			class pictorialRepresentation extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* Enumeration product
			*
			* The various substances which are transported, stored or exploited.
			* @property int value
			*/
			class product extends EnumerationType
			{
				/**
				* Enumeration product
				*
				* The various substances which are transported, stored or exploited.
				* @param int value
				* 
				* 1=oil
				* 2=gas
				* 3=water
				* 4=stone
				* 5=coal
				* 6=ore
				* 7=chemicals
				* 8=drinking water
				* 9=milk
				* 10=bauxite
				* 11=coke
				* 12=iron ingots
				* 13=salt
				* 14=sand
				* 15=timber
				* 16=sawdust/wood chips
				* 17=scrap metal
				* 18=liquified natural gas (LNG)
				* 19=liquified petroleum gas (LPG)
				* 20=wine
				* 21=cement
				* 22=grain
				* 23=electricity
				* 24=ice
				* 25=clay
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "oil");
					$this->addValue(2, "gas");
					$this->addValue(3, "water");
					$this->addValue(4, "stone");
					$this->addValue(5, "coal");
					$this->addValue(6, "ore");
					$this->addValue(7, "chemicals");
					$this->addValue(8, "drinking water");
					$this->addValue(9, "milk");
					$this->addValue(10, "bauxite");
					$this->addValue(11, "coke");
					$this->addValue(12, "iron ingots");
					$this->addValue(13, "salt");
					$this->addValue(14, "sand");
					$this->addValue(15, "timber");
					$this->addValue(16, "sawdust/wood chips");
					$this->addValue(17, "scrap metal");
					$this->addValue(18, "liquified natural gas (LNG)");
					$this->addValue(19, "liquified petroleum gas (LPG)");
					$this->addValue(20, "wine");
					$this->addValue(21, "cement");
					$this->addValue(22, "grain");
					$this->addValue(23, "electricity");
					$this->addValue(24, "ice");
					$this->addValue(25, "clay");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration qualityOfSoundingMeasurement
			*
			* The reliability of the value of a sounding.
			* @property int value
			*/
			class qualityOfSoundingMeasurement extends EnumerationType
			{
				/**
				* Enumeration qualityOfSoundingMeasurement
				*
				* The reliability of the value of a sounding.
				* @param int value
				* 
				* 1=depth known
				* 2=depth or least depth unknown
				* 3=doubtful sounding
				* 4=unreliable sounding
				* 5=no bottom found at value shown
				* 6=least depth known
				* 7=least depth unknown, safe clearance at depth shown
				* 8=value reported (not surveyed)
				* 9=value reported (not confirmed)
				* 10=maintained depth
				* 11=not regularly maintained
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "depth known");
					$this->addValue(2, "depth or least depth unknown");
					$this->addValue(3, "doubtful sounding");
					$this->addValue(4, "unreliable sounding");
					$this->addValue(5, "no bottom found at value shown");
					$this->addValue(6, "least depth known");
					$this->addValue(7, "least depth unknown, safe clearance at depth shown");
					$this->addValue(8, "value reported (not surveyed)");
					$this->addValue(9, "value reported (not confirmed)");
					$this->addValue(10, "maintained depth");
					$this->addValue(11, "not regularly maintained");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute radarConspicuous
			*
			* 
			* @property boolean value
			*/
			class radarConspicuous extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_boolean($value);
				}
			}
         
			/**
			* SimpleAttribute radarWaveLength
			*
			* The distance between two successive peaks (or other points of identical phase) on an electromagnetic wave in the radar band of the electromagnetic spectrum.
			* @property text value
			*/
			class radarWaveLength extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute remoteMonitoringSystem
			*
			* 
			* @property text value
			*/
			class remoteMonitoringSystem extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute remotlyMonitored
			*
			* 
			* @property text value
			*/
			class remotlyMonitored extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute scaleMinimum
			*
			* The minimum scale at which the object may be used, e.g., for ECDIS presentation.
			* @property integer value
			*/
			class scaleMinimum extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_integer($value);
				}
			}
         
			/**
			* SimpleAttribute sectorLimitOne
			*
			* The sector limit 1 specifies the first limit of the sector. The order of sector limit 1 and sector limit 2 is clockwise around the central object (e.g., a light).
			* @property real value
			*/
			class sectorLimitOne extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute sectorLimitTwo
			*
			* The sector limit 2 specifies the second limit of the sector. The order of sector limit 1 and sector limit 2 is clockwise around the central object (e.g., a light).
			* @property real value
			*/
			class sectorLimitTwo extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute signalFrequency
			*
			* The frequency of a signal.
			* @property integer value
			*/
			class signalFrequency extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_integer($value);
				}
			}
         
			/**
			* Enumeration signalGeneration
			*
			* The mechanism used to generate a fog signal.
			* @property int value
			*/
			class signalGeneration extends EnumerationType
			{
				/**
				* Enumeration signalGeneration
				*
				* The mechanism used to generate a fog signal.
				* @param int value
				* 
				* 1=automatically
				* 2=by wave action
				* 3=by hand
				* 4=by wind
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "automatically");
					$this->addValue(2, "by wave action");
					$this->addValue(3, "by hand");
					$this->addValue(4, "by wind");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute signalGroup
			*
			* The number of signals, the combination of signals or the morse character(s) within one period of full sequence.
			* @property text value
			*/
			class signalGroup extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute signalOutput
			*
			* 
			* @property text value
			*/
			class signalOutput extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute signalPeriod
			*
			* The time occupied by an entire cycle of intervals of light and eclipse.
			* @property real value
			*/
			class signalPeriod extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute signalSequence
			*
			* The sequence of times occupied by intervals of light and eclipse for all 'light characteristics' except for occulting where the sequence of times is occupied by intervals of eclipse and light.
			* @property text value
			*/
			class signalSequence extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute soundingUncertainty
			*
			* The best estimate of the accuracy of the sounding data. The maximum of the one-dimensional error. The error is assumed to be positive and negative. The plus/minus character shall not be encoded.
			* @property real value
			*/
			class soundingUncertainty extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute sourceDate
			*
			* The production date of the source, e.g., the date of measurement.
			* @property text value
			*/
			class sourceDate extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute sourceIndication
			*
			* Information about the source of the object.
			* @property text value
			*/
			class sourceIndication extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* Enumeration status
			*
			* The condition of an object at a given instant in time
			* @property int value
			*/
			class status extends EnumerationType
			{
				/**
				* Enumeration status
				*
				* The condition of an object at a given instant in time
				* @param int value
				* 
				* 1=permanent
				* 2=occasional
				* 3=recommended
				* 4=not in use
				* 5=periodic/intermittent
				* 6=reserved
				* 7=temporary
				* 8=private
				* 9=mandatory
				* 11=extinguished
				* 12=illuminated
				* 13=historic
				* 14=public
				* 15=synchronized
				* 16=watched
				* 17=un-watched
				* 18=existence doubtful
				* 28=buoyed
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "permanent");
					$this->addValue(2, "occasional");
					$this->addValue(3, "recommended");
					$this->addValue(4, "not in use");
					$this->addValue(5, "periodic/intermittent");
					$this->addValue(6, "reserved");
					$this->addValue(7, "temporary");
					$this->addValue(8, "private");
					$this->addValue(9, "mandatory");
					$this->addValue(11, "extinguished");
					$this->addValue(12, "illuminated");
					$this->addValue(13, "historic");
					$this->addValue(14, "public");
					$this->addValue(15, "synchronized");
					$this->addValue(16, "watched");
					$this->addValue(17, "un-watched");
					$this->addValue(18, "existence doubtful");
					$this->addValue(28, "buoyed");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration techniqueOfSoundingMeasurement
			*
			* Survey method used to obtain depth information 
			* @property int value
			*/
			class techniqueOfSoundingMeasurement extends EnumerationType
			{
				/**
				* Enumeration techniqueOfSoundingMeasurement
				*
				* Survey method used to obtain depth information 
				* @param int value
				* 
				* 1=found by echo-sounder
				* 2=found by side-scan-sonar
				* 3=found by multi-beam
				* 4=found by diver
				* 5=found by lead-line
				* 6=swept by wire-drag
				* 7=found by laser
				* 8=swept by vertical acoustic system
				* 9=found by electromagnetic sensor
				* 10=photogrammetry
				* 11=satellite imagery
				* 12=found by levelling
				* 13=swept by side-scan-sonar
				* 14=computer generated
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "found by echo-sounder");
					$this->addValue(2, "found by side-scan-sonar");
					$this->addValue(3, "found by multi-beam");
					$this->addValue(4, "found by diver");
					$this->addValue(5, "found by lead-line");
					$this->addValue(6, "swept by wire-drag");
					$this->addValue(7, "found by laser");
					$this->addValue(8, "swept by vertical acoustic system");
					$this->addValue(9, "found by electromagnetic sensor");
					$this->addValue(10, "photogrammetry");
					$this->addValue(11, "satellite imagery");
					$this->addValue(12, "found by levelling");
					$this->addValue(13, "swept by side-scan-sonar");
					$this->addValue(14, "computer generated");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute textualDescription
			*
			* 
			* @property text value
			*/
			class textualDescription extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute textualDescriptionInNationalLanguage
			*
			* The file name of an external text file that contains the text in a national language.
			* @property text value
			*/
			class textualDescriptionInNationalLanguage extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* Enumeration topmarkDaymarkShape
			*
			* The shape a topmark or day mark exhibits
			* @property int value
			*/
			class topmarkDaymarkShape extends EnumerationType
			{
				/**
				* Enumeration topmarkDaymarkShape
				*
				* The shape a topmark or day mark exhibits
				* @param int value
				* 
				* 1=cone, point up
				* 2=cone, point down
				* 3=sphere
				* 4=2 spheres
				* 5=cylinder (can)
				* 6=board
				* 7=x-shape (St. Andrew's cross)
				* 8=upright cross (St. George's Cross)
				* 9=cube, point up
				* 10=2 cones, point to point
				* 11=2 cones, base to base
				* 12=rhombus
				* 13=2 cones (points upward)
				* 14=2 cones (points downward)
				* 15=besom, point up (broom or perch)
				* 16=besom, point down (broom or perch)
				* 17=flag
				* 18=sphere over rhombus
				* 19=square
				* 20=rectangle, horizontal
				* 21=rectangle, vertical
				* 22=trapezium, up
				* 23=trapezium, down
				* 24=triangle, point up
				* 25=triangle, point down
				* 26=circle
				* 27=two upright crosses (one over the other)
				* 28=T-shape
				* 29=triangle pointing up over a circle
				* 30=upright cross over a circle
				* 31=rhombus over a circle
				* 32=circle over a triangle pointing up
				* 33=other shape (see INFORM)
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "cone, point up");
					$this->addValue(2, "cone, point down");
					$this->addValue(3, "sphere");
					$this->addValue(4, "2 spheres");
					$this->addValue(5, "cylinder (can)");
					$this->addValue(6, "board");
					$this->addValue(7, "x-shape (St. Andrew's cross)");
					$this->addValue(8, "upright cross (St. George's Cross)");
					$this->addValue(9, "cube, point up");
					$this->addValue(10, "2 cones, point to point");
					$this->addValue(11, "2 cones, base to base");
					$this->addValue(12, "rhombus");
					$this->addValue(13, "2 cones (points upward)");
					$this->addValue(14, "2 cones (points downward)");
					$this->addValue(15, "besom, point up (broom or perch)");
					$this->addValue(16, "besom, point down (broom or perch)");
					$this->addValue(17, "flag");
					$this->addValue(18, "sphere over rhombus");
					$this->addValue(19, "square");
					$this->addValue(20, "rectangle, horizontal");
					$this->addValue(21, "rectangle, vertical");
					$this->addValue(22, "trapezium, up");
					$this->addValue(23, "trapezium, down");
					$this->addValue(24, "triangle, point up");
					$this->addValue(25, "triangle, point down");
					$this->addValue(26, "circle");
					$this->addValue(27, "two upright crosses (one over the other)");
					$this->addValue(28, "T-shape");
					$this->addValue(29, "triangle pointing up over a circle");
					$this->addValue(30, "upright cross over a circle");
					$this->addValue(31, "rhombus over a circle");
					$this->addValue(32, "circle over a triangle pointing up");
					$this->addValue(33, "other shape (see INFORM)");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration trafficFlow
			*
			* 
			* @property int value
			*/
			class trafficFlow extends EnumerationType
			{
				/**
				* Enumeration trafficFlow
				*
				* 
				* @param int value
				* 
				* 1=inbound
				* 2=outbound
				* 3=one-way
				* 4=two-way
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "inbound");
					$this->addValue(2, "outbound");
					$this->addValue(3, "one-way");
					$this->addValue(4, "two-way");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute typeOfBattery
			*
			* 
			* @property text value
			*/
			class typeOfBattery extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute typeOfBuoy
			*
			* 
			* @property text value
			*/
			class typeOfBuoy extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute typeOfEnvironmentObservationEquipment
			*
			* 
			* @property text value
			*/
			class typeOfEnvironmentObservationEquipment extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute typeOfLight
			*
			* 
			* @property text value
			*/
			class typeOfLight extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute valueOfGeographicalRange
			*
			* 
			* @property text value
			*/
			class valueOfGeographicalRange extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute valueOfLuminousRange
			*
			* 
			* @property text value
			*/
			class valueOfLuminousRange extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute valueOfMaximumRange
			*
			* The extreme distance at which an object can be seen or a signal detected.
			* @property real value
			*/
			class valueOfMaximumRange extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute valueOfNominalRange
			*
			* The nominal range at which an object can be seen or a signal detected.
			* @property real value
			*/
			class valueOfNominalRange extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* Enumeration verticalDatum
			*
			* Vertical datum used for measuring  elevations of points on the earth's surface. Its the datum to which both heights and soundings are referred.
			* @property int value
			*/
			class verticalDatum extends EnumerationType
			{
				/**
				* Enumeration verticalDatum
				*
				* Vertical datum used for measuring  elevations of points on the earth's surface. Its the datum to which both heights and soundings are referred.
				* @param int value
				* 
				* 1=mean low water springs
				* 2=mean lower low water springs
				* 3=mean sea level
				* 4=lowest low water
				* 5=mean low water
				* 6=lowest low water springs
				* 7=approximate mean low water springs
				* 8=Indian spring low water
				* 9=low water springs
				* 10=approximate lowest astronomical tide
				* 11=nearly lowest low water
				* 12=mean lower low water
				* 13=low water
				* 14=approximate mean low water
				* 15=approximate mean lower low water
				* 16=mean high water
				* 17=mean high water springs
				* 18=high water
				* 19=approximate mean sea level
				* 20=high water springs
				* 21=mean higher high water
				* 22=equinoctial spring low water
				* 23=lowest astronomical tide
				* 24=local datum
				* 25=international great lakes datum 1985
				* 26=mean water level
				* 27=lower low water large tide
				* 28=higher high water large tide
				* 29=nearly highest high water
				* 30=highest astronomical tide (HAT)
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "mean low water springs");
					$this->addValue(2, "mean lower low water springs");
					$this->addValue(3, "mean sea level");
					$this->addValue(4, "lowest low water");
					$this->addValue(5, "mean low water");
					$this->addValue(6, "lowest low water springs");
					$this->addValue(7, "approximate mean low water springs");
					$this->addValue(8, "Indian spring low water");
					$this->addValue(9, "low water springs");
					$this->addValue(10, "approximate lowest astronomical tide");
					$this->addValue(11, "nearly lowest low water");
					$this->addValue(12, "mean lower low water");
					$this->addValue(13, "low water");
					$this->addValue(14, "approximate mean low water");
					$this->addValue(15, "approximate mean lower low water");
					$this->addValue(16, "mean high water");
					$this->addValue(17, "mean high water springs");
					$this->addValue(18, "high water");
					$this->addValue(19, "approximate mean sea level");
					$this->addValue(20, "high water springs");
					$this->addValue(21, "mean higher high water");
					$this->addValue(22, "equinoctial spring low water");
					$this->addValue(23, "lowest astronomical tide");
					$this->addValue(24, "local datum");
					$this->addValue(25, "international great lakes datum 1985");
					$this->addValue(26, "mean water level");
					$this->addValue(27, "lower low water large tide");
					$this->addValue(28, "higher high water large tide");
					$this->addValue(29, "nearly highest high water");
					$this->addValue(30, "highest astronomical tide (HAT)");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute verticalLength
			*
			* The total vertical length of an object.
			* @property real value
			*/
			class verticalLength extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute verticalUncertainty
			*
			* The best estimate of the vertical accuracy of heights, vertical distances and vertical clearances, excluding sounding measurements. The one-dimensional error. The error is assumed to be positive and negative. The plus/minus character shall not be encoded.
			* @property real value
			*/
			class verticalUncertainty extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* Enumeration visuallyConspicuous
			*
			* 
			* @property int value
			*/
			class visuallyConspicuous extends EnumerationType
			{
				/**
				* Enumeration visuallyConspicuous
				*
				* 
				* @param int value
				* 
				* 1=visually conspicuous
				* 2=not visually conspicuous
				* 2=prominent
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "visually conspicuous");
					$this->addValue(2, "not visually conspicuous");
					$this->addValue(2, "prominent");
					parent::__construct($value);
				}
			}
	     
	
	//********************************* COMPLEX ATTRIBUTES ***********************************************************
	

	
	//********************************* FEATURE TYPES ***********************************************************
	
		/**
		* FeatureType BeaconSpecialPurpose/General
		*
		* A special purpose beacon is primarily used to indicate an area or feature, the nature of which is apparent from reference to a chart, Sailing Directions or Notices to Mariners (UKHO NP 735, 5th Edition). Beacon in general: A beacon whose appearance or purpose is not adequately known.
		* 
		* 
		* @property beaconShape[1..1] beaconShape |Defined in BeaconSpecialPurpose/General
		* @property categoryOfSpecialPurposeMark[1..*] categoryOfSpecialPurposeMark |Defined in BeaconSpecialPurpose/General
		* @property colour[1..*] colour |Defined in BeaconSpecialPurpose/General
		* @property colourPattern[0..1] colourPattern |Defined in BeaconSpecialPurpose/General
		* @property condition[0..1] condition |Defined in BeaconSpecialPurpose/General
		* @property radarConspicuous[0..1] radarConspicuous |Defined in BeaconSpecialPurpose/General
		* @property visuallyConspicuous[0..1] visuallyConspicuous |Defined in BeaconSpecialPurpose/General
		* @property elevation[0..1] elevation |Defined in BeaconSpecialPurpose/General
		* @property height[0..1] height |Defined in BeaconSpecialPurpose/General
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in BeaconSpecialPurpose/General
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in BeaconSpecialPurpose/General
		* @property verticalLength[0..1] verticalLength |Defined in BeaconSpecialPurpose/General
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in BeaconSpecialPurpose/General
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in BeaconSpecialPurpose/General
		* @property objectName[0..1] objectName |Defined in BeaconSpecialPurpose/General
		* @property status[0..*] status |Defined in BeaconSpecialPurpose/General
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in BeaconSpecialPurpose/General
		* @property idcode[1..1] idcode |Defined in BeaconSpecialPurpose/General
		* @property dateEnd[0..1] dateEnd |Defined in BeaconSpecialPurpose/General
		* @property dateStart[0..1] dateStart |Defined in BeaconSpecialPurpose/General
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in BeaconSpecialPurpose/General
		* @property periodicDateStart[0..1] periodicDateStart |Defined in BeaconSpecialPurpose/General
		* @property information[0..*] information |Defined in BeaconSpecialPurpose/General
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in BeaconSpecialPurpose/General
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in BeaconSpecialPurpose/General
		* @property textualDescription[0..1] textualDescription |Defined in BeaconSpecialPurpose/General
		* @property scaleMinimum[0..1] scaleMinimum |Defined in BeaconSpecialPurpose/General
		* @property sourceDate[0..1] sourceDate |Defined in BeaconSpecialPurpose/General
		* @property sourceIndication[0..1] sourceIndication |Defined in BeaconSpecialPurpose/General
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in BeaconSpecialPurpose/General
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in BeaconSpecialPurpose/General
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in BeaconSpecialPurpose/General
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in BeaconSpecialPurpose/General
		* @property installationDate[0..1] installationDate |Defined in BeaconSpecialPurpose/General
		*/
		 class BeaconSpecialPurpose/General extends AbstractFeatureType
		{
		
			/**
			* FeatureType BeaconSpecialPurpose/General
			*
			* A special purpose beacon is primarily used to indicate an area or feature, the nature of which is apparent from reference to a chart, Sailing Directions or Notices to Mariners (UKHO NP 735, 5th Edition). Beacon in general: A beacon whose appearance or purpose is not adequately known.
			* 
			* 
		* @property beaconShape[1..1] beaconShape |Defined in BeaconSpecialPurpose/General
		* @property categoryOfSpecialPurposeMark[1..*] categoryOfSpecialPurposeMark |Defined in BeaconSpecialPurpose/General
		* @property colour[1..*] colour |Defined in BeaconSpecialPurpose/General
		* @property colourPattern[0..1] colourPattern |Defined in BeaconSpecialPurpose/General
		* @property condition[0..1] condition |Defined in BeaconSpecialPurpose/General
		* @property radarConspicuous[0..1] radarConspicuous |Defined in BeaconSpecialPurpose/General
		* @property visuallyConspicuous[0..1] visuallyConspicuous |Defined in BeaconSpecialPurpose/General
		* @property elevation[0..1] elevation |Defined in BeaconSpecialPurpose/General
		* @property height[0..1] height |Defined in BeaconSpecialPurpose/General
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in BeaconSpecialPurpose/General
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in BeaconSpecialPurpose/General
		* @property verticalLength[0..1] verticalLength |Defined in BeaconSpecialPurpose/General
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in BeaconSpecialPurpose/General
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in BeaconSpecialPurpose/General
		* @property objectName[0..1] objectName |Defined in BeaconSpecialPurpose/General
		* @property status[0..*] status |Defined in BeaconSpecialPurpose/General
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in BeaconSpecialPurpose/General
		* @property idcode[1..1] idcode |Defined in BeaconSpecialPurpose/General
		* @property dateEnd[0..1] dateEnd |Defined in BeaconSpecialPurpose/General
		* @property dateStart[0..1] dateStart |Defined in BeaconSpecialPurpose/General
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in BeaconSpecialPurpose/General
		* @property periodicDateStart[0..1] periodicDateStart |Defined in BeaconSpecialPurpose/General
		* @property information[0..*] information |Defined in BeaconSpecialPurpose/General
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in BeaconSpecialPurpose/General
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in BeaconSpecialPurpose/General
		* @property textualDescription[0..1] textualDescription |Defined in BeaconSpecialPurpose/General
		* @property scaleMinimum[0..1] scaleMinimum |Defined in BeaconSpecialPurpose/General
		* @property sourceDate[0..1] sourceDate |Defined in BeaconSpecialPurpose/General
		* @property sourceIndication[0..1] sourceIndication |Defined in BeaconSpecialPurpose/General
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in BeaconSpecialPurpose/General
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in BeaconSpecialPurpose/General
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in BeaconSpecialPurpose/General
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in BeaconSpecialPurpose/General
		* @property installationDate[0..1] installationDate |Defined in BeaconSpecialPurpose/General
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('beaconShape', 'beaconShape', 1, 1);
				$this->addAttribute('categoryOfSpecialPurposeMark', 'categoryOfSpecialPurposeMark', 1, MAX_OCCUR);
				$this->addAttribute('colour', 'colour', 1, MAX_OCCUR);
				$this->addAttribute('colourPattern', 'colourPattern', 0, 1);
				$this->addAttribute('condition', 'condition', 0, 1);
				$this->addAttribute('radarConspicuous', 'radarConspicuous', 0, 1);
				$this->addAttribute('visuallyConspicuous', 'visuallyConspicuous', 0, 1);
				$this->addAttribute('elevation', 'elevation', 0, 1);
				$this->addAttribute('height', 'height', 0, 1);
				$this->addAttribute('marksNavigationalSystemOf', 'marksNavigationalSystemOf', 0, 1);
				$this->addAttribute('natureOfConstruction', 'natureOfConstruction', 0, MAX_OCCUR);
				$this->addAttribute('verticalLength', 'verticalLength', 0, 1);
				$this->addAttribute('verticalUncertainty', 'verticalUncertainty', 0, 1);
				$this->addAttribute('objectNameInNationalLanguage', 'objectNameInNationalLanguage', 0, 1);
				$this->addAttribute('objectName', 'objectName', 0, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('aidAvailabilityCategory', 'aidAvailabilityCategory', 1, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType BeaconLateral
		*
		* A lateral beacon is used to indicate the port or starboard hand side of the route to be followed. They are generally used for well defined channels and are used in conjunction with a conventional direction of buoyage.
		* 
		* 
		* @property beaconShape[1..1] beaconShape |Defined in BeaconLateral
		* @property categoryOfLateralMark[1..1] categoryOfLateralMark |Defined in BeaconLateral
		* @property colour[1..*] colour |Defined in BeaconLateral
		* @property colourPattern[0..1] colourPattern |Defined in BeaconLateral
		* @property condition[0..1] condition |Defined in BeaconLateral
		* @property radarConspicuous[0..1] radarConspicuous |Defined in BeaconLateral
		* @property visuallyConspicuous[0..1] visuallyConspicuous |Defined in BeaconLateral
		* @property elevation[0..1] elevation |Defined in BeaconLateral
		* @property height[0..1] height |Defined in BeaconLateral
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in BeaconLateral
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in BeaconLateral
		* @property verticalLength[0..1] verticalLength |Defined in BeaconLateral
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in BeaconLateral
		* @property objectName[0..1] objectName |Defined in BeaconLateral
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in BeaconLateral
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in BeaconLateral
		* @property idcode[1..1] idcode |Defined in BeaconLateral
		* @property dateEnd[0..1] dateEnd |Defined in BeaconLateral
		* @property dateStart[0..1] dateStart |Defined in BeaconLateral
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in BeaconLateral
		* @property periodicDateStart[0..1] periodicDateStart |Defined in BeaconLateral
		* @property information[0..*] information |Defined in BeaconLateral
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in BeaconLateral
		* @property textualDescription[0..1] textualDescription |Defined in BeaconLateral
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in BeaconLateral
		* @property scaleMinimum[0..1] scaleMinimum |Defined in BeaconLateral
		* @property sourceDate[0..1] sourceDate |Defined in BeaconLateral
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in BeaconLateral
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in BeaconLateral
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in BeaconLateral
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in BeaconLateral
		* @property installationDate[0..1] installationDate |Defined in BeaconLateral
		*/
		 class BeaconLateral extends AbstractFeatureType
		{
		
			/**
			* FeatureType BeaconLateral
			*
			* A lateral beacon is used to indicate the port or starboard hand side of the route to be followed. They are generally used for well defined channels and are used in conjunction with a conventional direction of buoyage.
			* 
			* 
		* @property beaconShape[1..1] beaconShape |Defined in BeaconLateral
		* @property categoryOfLateralMark[1..1] categoryOfLateralMark |Defined in BeaconLateral
		* @property colour[1..*] colour |Defined in BeaconLateral
		* @property colourPattern[0..1] colourPattern |Defined in BeaconLateral
		* @property condition[0..1] condition |Defined in BeaconLateral
		* @property radarConspicuous[0..1] radarConspicuous |Defined in BeaconLateral
		* @property visuallyConspicuous[0..1] visuallyConspicuous |Defined in BeaconLateral
		* @property elevation[0..1] elevation |Defined in BeaconLateral
		* @property height[0..1] height |Defined in BeaconLateral
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in BeaconLateral
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in BeaconLateral
		* @property verticalLength[0..1] verticalLength |Defined in BeaconLateral
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in BeaconLateral
		* @property objectName[0..1] objectName |Defined in BeaconLateral
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in BeaconLateral
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in BeaconLateral
		* @property idcode[1..1] idcode |Defined in BeaconLateral
		* @property dateEnd[0..1] dateEnd |Defined in BeaconLateral
		* @property dateStart[0..1] dateStart |Defined in BeaconLateral
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in BeaconLateral
		* @property periodicDateStart[0..1] periodicDateStart |Defined in BeaconLateral
		* @property information[0..*] information |Defined in BeaconLateral
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in BeaconLateral
		* @property textualDescription[0..1] textualDescription |Defined in BeaconLateral
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in BeaconLateral
		* @property scaleMinimum[0..1] scaleMinimum |Defined in BeaconLateral
		* @property sourceDate[0..1] sourceDate |Defined in BeaconLateral
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in BeaconLateral
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in BeaconLateral
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in BeaconLateral
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in BeaconLateral
		* @property installationDate[0..1] installationDate |Defined in BeaconLateral
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('beaconShape', 'beaconShape', 1, 1);
				$this->addAttribute('categoryOfLateralMark', 'categoryOfLateralMark', 1, 1);
				$this->addAttribute('colour', 'colour', 1, MAX_OCCUR);
				$this->addAttribute('colourPattern', 'colourPattern', 0, 1);
				$this->addAttribute('condition', 'condition', 0, 1);
				$this->addAttribute('radarConspicuous', 'radarConspicuous', 0, 1);
				$this->addAttribute('visuallyConspicuous', 'visuallyConspicuous', 0, 1);
				$this->addAttribute('elevation', 'elevation', 0, 1);
				$this->addAttribute('height', 'height', 0, 1);
				$this->addAttribute('marksNavigationalSystemOf', 'marksNavigationalSystemOf', 0, 1);
				$this->addAttribute('natureOfConstruction', 'natureOfConstruction', 0, MAX_OCCUR);
				$this->addAttribute('verticalLength', 'verticalLength', 0, 1);
				$this->addAttribute('verticalUncertainty', 'verticalUncertainty', 0, 1);
				$this->addAttribute('objectName', 'objectName', 0, 1);
				$this->addAttribute('objectNameInNationalLanguage', 'objectNameInNationalLanguage', 0, 1);
				$this->addAttribute('aidAvailabilityCategory', 'aidAvailabilityCategory', 1, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType BeaconCardinal
		*
		* A cardinal beacon is used in conjunction with the compass to indicate where the mariner may find the best navigable water. It is placed in one of the four quadrants (North, East, South and West), bounded by inter-cardinal bearings from the point marked.
		* 
		* 
		* @property beaconShape[1..1] beaconShape |Defined in BeaconCardinal
		* @property categoryOfCardinalMark[1..1] categoryOfCardinalMark |Defined in BeaconCardinal
		* @property colour[1..*] colour |Defined in BeaconCardinal
		* @property colourPattern[0..1] colourPattern |Defined in BeaconCardinal
		* @property condition[0..1] condition |Defined in BeaconCardinal
		* @property radarConspicuous[0..1] radarConspicuous |Defined in BeaconCardinal
		* @property visuallyConspicuous[0..1] visuallyConspicuous |Defined in BeaconCardinal
		* @property elevation[0..1] elevation |Defined in BeaconCardinal
		* @property height[0..1] height |Defined in BeaconCardinal
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in BeaconCardinal
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in BeaconCardinal
		* @property verticalLength[0..1] verticalLength |Defined in BeaconCardinal
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in BeaconCardinal
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in BeaconCardinal
		* @property objectName[0..1] objectName |Defined in BeaconCardinal
		* @property status[0..*] status |Defined in BeaconCardinal
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in BeaconCardinal
		* @property idcode[1..1] idcode |Defined in BeaconCardinal
		* @property dateEnd[0..1] dateEnd |Defined in BeaconCardinal
		* @property dateStart[0..1] dateStart |Defined in BeaconCardinal
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in BeaconCardinal
		* @property periodicDateStart[0..1] periodicDateStart |Defined in BeaconCardinal
		* @property information[0..*] information |Defined in BeaconCardinal
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in BeaconCardinal
		* @property textualDescription[0..1] textualDescription |Defined in BeaconCardinal
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in BeaconCardinal
		* @property scaleMinimum[0..1] scaleMinimum |Defined in BeaconCardinal
		* @property sourceDate[0..1] sourceDate |Defined in BeaconCardinal
		* @property sourceIndication[0..1] sourceIndication |Defined in BeaconCardinal
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in BeaconCardinal
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in BeaconCardinal
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in BeaconCardinal
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in BeaconCardinal
		* @property installationDate[0..1] installationDate |Defined in BeaconCardinal
		*/
		 class BeaconCardinal extends AbstractFeatureType
		{
		
			/**
			* FeatureType BeaconCardinal
			*
			* A cardinal beacon is used in conjunction with the compass to indicate where the mariner may find the best navigable water. It is placed in one of the four quadrants (North, East, South and West), bounded by inter-cardinal bearings from the point marked.
			* 
			* 
		* @property beaconShape[1..1] beaconShape |Defined in BeaconCardinal
		* @property categoryOfCardinalMark[1..1] categoryOfCardinalMark |Defined in BeaconCardinal
		* @property colour[1..*] colour |Defined in BeaconCardinal
		* @property colourPattern[0..1] colourPattern |Defined in BeaconCardinal
		* @property condition[0..1] condition |Defined in BeaconCardinal
		* @property radarConspicuous[0..1] radarConspicuous |Defined in BeaconCardinal
		* @property visuallyConspicuous[0..1] visuallyConspicuous |Defined in BeaconCardinal
		* @property elevation[0..1] elevation |Defined in BeaconCardinal
		* @property height[0..1] height |Defined in BeaconCardinal
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in BeaconCardinal
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in BeaconCardinal
		* @property verticalLength[0..1] verticalLength |Defined in BeaconCardinal
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in BeaconCardinal
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in BeaconCardinal
		* @property objectName[0..1] objectName |Defined in BeaconCardinal
		* @property status[0..*] status |Defined in BeaconCardinal
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in BeaconCardinal
		* @property idcode[1..1] idcode |Defined in BeaconCardinal
		* @property dateEnd[0..1] dateEnd |Defined in BeaconCardinal
		* @property dateStart[0..1] dateStart |Defined in BeaconCardinal
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in BeaconCardinal
		* @property periodicDateStart[0..1] periodicDateStart |Defined in BeaconCardinal
		* @property information[0..*] information |Defined in BeaconCardinal
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in BeaconCardinal
		* @property textualDescription[0..1] textualDescription |Defined in BeaconCardinal
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in BeaconCardinal
		* @property scaleMinimum[0..1] scaleMinimum |Defined in BeaconCardinal
		* @property sourceDate[0..1] sourceDate |Defined in BeaconCardinal
		* @property sourceIndication[0..1] sourceIndication |Defined in BeaconCardinal
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in BeaconCardinal
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in BeaconCardinal
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in BeaconCardinal
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in BeaconCardinal
		* @property installationDate[0..1] installationDate |Defined in BeaconCardinal
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('beaconShape', 'beaconShape', 1, 1);
				$this->addAttribute('categoryOfCardinalMark', 'categoryOfCardinalMark', 1, 1);
				$this->addAttribute('colour', 'colour', 1, MAX_OCCUR);
				$this->addAttribute('colourPattern', 'colourPattern', 0, 1);
				$this->addAttribute('condition', 'condition', 0, 1);
				$this->addAttribute('radarConspicuous', 'radarConspicuous', 0, 1);
				$this->addAttribute('visuallyConspicuous', 'visuallyConspicuous', 0, 1);
				$this->addAttribute('elevation', 'elevation', 0, 1);
				$this->addAttribute('height', 'height', 0, 1);
				$this->addAttribute('marksNavigationalSystemOf', 'marksNavigationalSystemOf', 0, 1);
				$this->addAttribute('natureOfConstruction', 'natureOfConstruction', 0, MAX_OCCUR);
				$this->addAttribute('verticalLength', 'verticalLength', 0, 1);
				$this->addAttribute('verticalUncertainty', 'verticalUncertainty', 0, 1);
				$this->addAttribute('objectNameInNationalLanguage', 'objectNameInNationalLanguage', 0, 1);
				$this->addAttribute('objectName', 'objectName', 0, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('aidAvailabilityCategory', 'aidAvailabilityCategory', 1, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType BeaconIsolatedDanger
		*
		* An isolated danger beacon is a beacon erected on an isolated danger of limited extent, which has navigable water all around it.
		* 
		* 
		* @property beaconShape[1..1] beaconShape |Defined in BeaconIsolatedDanger
		* @property colour[1..*] colour |Defined in BeaconIsolatedDanger
		* @property colourPattern[0..1] colourPattern |Defined in BeaconIsolatedDanger
		* @property condition[0..1] condition |Defined in BeaconIsolatedDanger
		* @property radarConspicuous[0..1] radarConspicuous |Defined in BeaconIsolatedDanger
		* @property visuallyConspicuous[0..1] visuallyConspicuous |Defined in BeaconIsolatedDanger
		* @property elevation[0..1] elevation |Defined in BeaconIsolatedDanger
		* @property height[0..1] height |Defined in BeaconIsolatedDanger
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in BeaconIsolatedDanger
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in BeaconIsolatedDanger
		* @property verticalLength[0..1] verticalLength |Defined in BeaconIsolatedDanger
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in BeaconIsolatedDanger
		* @property objectName[0..1] objectName |Defined in BeaconIsolatedDanger
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in BeaconIsolatedDanger
		* @property status[0..*] status |Defined in BeaconIsolatedDanger
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in BeaconIsolatedDanger
		* @property idcode[1..1] idcode |Defined in BeaconIsolatedDanger
		* @property dateEnd[0..1] dateEnd |Defined in BeaconIsolatedDanger
		* @property dateStart[0..1] dateStart |Defined in BeaconIsolatedDanger
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in BeaconIsolatedDanger
		* @property periodicDateStart[0..1] periodicDateStart |Defined in BeaconIsolatedDanger
		* @property information[0..*] information |Defined in BeaconIsolatedDanger
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in BeaconIsolatedDanger
		* @property textualDescription[0..1] textualDescription |Defined in BeaconIsolatedDanger
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in BeaconIsolatedDanger
		* @property scaleMinimum[0..1] scaleMinimum |Defined in BeaconIsolatedDanger
		* @property sourceDate[0..1] sourceDate |Defined in BeaconIsolatedDanger
		* @property sourceIndication[0..1] sourceIndication |Defined in BeaconIsolatedDanger
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in BeaconIsolatedDanger
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in BeaconIsolatedDanger
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in BeaconIsolatedDanger
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in BeaconIsolatedDanger
		* @property installationDate[0..1] installationDate |Defined in BeaconIsolatedDanger
		*/
		 class BeaconIsolatedDanger extends AbstractFeatureType
		{
		
			/**
			* FeatureType BeaconIsolatedDanger
			*
			* An isolated danger beacon is a beacon erected on an isolated danger of limited extent, which has navigable water all around it.
			* 
			* 
		* @property beaconShape[1..1] beaconShape |Defined in BeaconIsolatedDanger
		* @property colour[1..*] colour |Defined in BeaconIsolatedDanger
		* @property colourPattern[0..1] colourPattern |Defined in BeaconIsolatedDanger
		* @property condition[0..1] condition |Defined in BeaconIsolatedDanger
		* @property radarConspicuous[0..1] radarConspicuous |Defined in BeaconIsolatedDanger
		* @property visuallyConspicuous[0..1] visuallyConspicuous |Defined in BeaconIsolatedDanger
		* @property elevation[0..1] elevation |Defined in BeaconIsolatedDanger
		* @property height[0..1] height |Defined in BeaconIsolatedDanger
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in BeaconIsolatedDanger
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in BeaconIsolatedDanger
		* @property verticalLength[0..1] verticalLength |Defined in BeaconIsolatedDanger
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in BeaconIsolatedDanger
		* @property objectName[0..1] objectName |Defined in BeaconIsolatedDanger
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in BeaconIsolatedDanger
		* @property status[0..*] status |Defined in BeaconIsolatedDanger
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in BeaconIsolatedDanger
		* @property idcode[1..1] idcode |Defined in BeaconIsolatedDanger
		* @property dateEnd[0..1] dateEnd |Defined in BeaconIsolatedDanger
		* @property dateStart[0..1] dateStart |Defined in BeaconIsolatedDanger
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in BeaconIsolatedDanger
		* @property periodicDateStart[0..1] periodicDateStart |Defined in BeaconIsolatedDanger
		* @property information[0..*] information |Defined in BeaconIsolatedDanger
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in BeaconIsolatedDanger
		* @property textualDescription[0..1] textualDescription |Defined in BeaconIsolatedDanger
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in BeaconIsolatedDanger
		* @property scaleMinimum[0..1] scaleMinimum |Defined in BeaconIsolatedDanger
		* @property sourceDate[0..1] sourceDate |Defined in BeaconIsolatedDanger
		* @property sourceIndication[0..1] sourceIndication |Defined in BeaconIsolatedDanger
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in BeaconIsolatedDanger
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in BeaconIsolatedDanger
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in BeaconIsolatedDanger
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in BeaconIsolatedDanger
		* @property installationDate[0..1] installationDate |Defined in BeaconIsolatedDanger
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('beaconShape', 'beaconShape', 1, 1);
				$this->addAttribute('colour', 'colour', 1, MAX_OCCUR);
				$this->addAttribute('colourPattern', 'colourPattern', 0, 1);
				$this->addAttribute('condition', 'condition', 0, 1);
				$this->addAttribute('radarConspicuous', 'radarConspicuous', 0, 1);
				$this->addAttribute('visuallyConspicuous', 'visuallyConspicuous', 0, 1);
				$this->addAttribute('elevation', 'elevation', 0, 1);
				$this->addAttribute('height', 'height', 0, 1);
				$this->addAttribute('marksNavigationalSystemOf', 'marksNavigationalSystemOf', 0, 1);
				$this->addAttribute('natureOfConstruction', 'natureOfConstruction', 0, MAX_OCCUR);
				$this->addAttribute('verticalLength', 'verticalLength', 0, 1);
				$this->addAttribute('verticalUncertainty', 'verticalUncertainty', 0, 1);
				$this->addAttribute('objectName', 'objectName', 0, 1);
				$this->addAttribute('objectNameInNationalLanguage', 'objectNameInNationalLanguage', 0, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('aidAvailabilityCategory', 'aidAvailabilityCategory', 1, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType BeaconSafeWater
		*
		* A safe water beacon is a prominent specially constructed object forming a conspicuous mark as a fixed aid to navigation or for use in hydrographic survey.
		* 
		* 
		* @property beaconShape[1..1] beaconShape |Defined in BeaconSafeWater
		* @property categoryOfCardinalMark[1..*] categoryOfCardinalMark |Defined in BeaconSafeWater
		* @property colour[1..*] colour |Defined in BeaconSafeWater
		* @property colourPattern[0..1] colourPattern |Defined in BeaconSafeWater
		* @property condition[0..1] condition |Defined in BeaconSafeWater
		* @property radarConspicuous[0..1] radarConspicuous |Defined in BeaconSafeWater
		* @property visuallyConspicuous[0..1] visuallyConspicuous |Defined in BeaconSafeWater
		* @property elevation[0..1] elevation |Defined in BeaconSafeWater
		* @property height[0..1] height |Defined in BeaconSafeWater
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in BeaconSafeWater
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in BeaconSafeWater
		* @property verticalLength[0..1] verticalLength |Defined in BeaconSafeWater
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in BeaconSafeWater
		* @property objectName[0..1] objectName |Defined in BeaconSafeWater
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in BeaconSafeWater
		* @property status[0..*] status |Defined in BeaconSafeWater
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in BeaconSafeWater
		* @property idcode[0..1] idcode |Defined in BeaconSafeWater
		* @property dateEnd[0..1] dateEnd |Defined in BeaconSafeWater
		* @property dateStart[0..1] dateStart |Defined in BeaconSafeWater
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in BeaconSafeWater
		* @property periodicDateStart[0..1] periodicDateStart |Defined in BeaconSafeWater
		* @property information[0..*] information |Defined in BeaconSafeWater
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in BeaconSafeWater
		* @property textualDescription[0..1] textualDescription |Defined in BeaconSafeWater
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in BeaconSafeWater
		* @property scaleMinimum[0..1] scaleMinimum |Defined in BeaconSafeWater
		* @property sourceDate[0..1] sourceDate |Defined in BeaconSafeWater
		* @property sourceIndication[0..1] sourceIndication |Defined in BeaconSafeWater
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in BeaconSafeWater
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in BeaconSafeWater
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in BeaconSafeWater
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in BeaconSafeWater
		* @property installationDate[0..1] installationDate |Defined in BeaconSafeWater
		*/
		 class BeaconSafeWater extends AbstractFeatureType
		{
		
			/**
			* FeatureType BeaconSafeWater
			*
			* A safe water beacon is a prominent specially constructed object forming a conspicuous mark as a fixed aid to navigation or for use in hydrographic survey.
			* 
			* 
		* @property beaconShape[1..1] beaconShape |Defined in BeaconSafeWater
		* @property categoryOfCardinalMark[1..*] categoryOfCardinalMark |Defined in BeaconSafeWater
		* @property colour[1..*] colour |Defined in BeaconSafeWater
		* @property colourPattern[0..1] colourPattern |Defined in BeaconSafeWater
		* @property condition[0..1] condition |Defined in BeaconSafeWater
		* @property radarConspicuous[0..1] radarConspicuous |Defined in BeaconSafeWater
		* @property visuallyConspicuous[0..1] visuallyConspicuous |Defined in BeaconSafeWater
		* @property elevation[0..1] elevation |Defined in BeaconSafeWater
		* @property height[0..1] height |Defined in BeaconSafeWater
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in BeaconSafeWater
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in BeaconSafeWater
		* @property verticalLength[0..1] verticalLength |Defined in BeaconSafeWater
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in BeaconSafeWater
		* @property objectName[0..1] objectName |Defined in BeaconSafeWater
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in BeaconSafeWater
		* @property status[0..*] status |Defined in BeaconSafeWater
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in BeaconSafeWater
		* @property idcode[0..1] idcode |Defined in BeaconSafeWater
		* @property dateEnd[0..1] dateEnd |Defined in BeaconSafeWater
		* @property dateStart[0..1] dateStart |Defined in BeaconSafeWater
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in BeaconSafeWater
		* @property periodicDateStart[0..1] periodicDateStart |Defined in BeaconSafeWater
		* @property information[0..*] information |Defined in BeaconSafeWater
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in BeaconSafeWater
		* @property textualDescription[0..1] textualDescription |Defined in BeaconSafeWater
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in BeaconSafeWater
		* @property scaleMinimum[0..1] scaleMinimum |Defined in BeaconSafeWater
		* @property sourceDate[0..1] sourceDate |Defined in BeaconSafeWater
		* @property sourceIndication[0..1] sourceIndication |Defined in BeaconSafeWater
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in BeaconSafeWater
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in BeaconSafeWater
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in BeaconSafeWater
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in BeaconSafeWater
		* @property installationDate[0..1] installationDate |Defined in BeaconSafeWater
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('beaconShape', 'beaconShape', 1, 1);
				$this->addAttribute('categoryOfCardinalMark', 'categoryOfCardinalMark', 1, MAX_OCCUR);
				$this->addAttribute('colour', 'colour', 1, MAX_OCCUR);
				$this->addAttribute('colourPattern', 'colourPattern', 0, 1);
				$this->addAttribute('condition', 'condition', 0, 1);
				$this->addAttribute('radarConspicuous', 'radarConspicuous', 0, 1);
				$this->addAttribute('visuallyConspicuous', 'visuallyConspicuous', 0, 1);
				$this->addAttribute('elevation', 'elevation', 0, 1);
				$this->addAttribute('height', 'height', 0, 1);
				$this->addAttribute('marksNavigationalSystemOf', 'marksNavigationalSystemOf', 0, 1);
				$this->addAttribute('natureOfConstruction', 'natureOfConstruction', 0, MAX_OCCUR);
				$this->addAttribute('verticalLength', 'verticalLength', 0, 1);
				$this->addAttribute('verticalUncertainty', 'verticalUncertainty', 0, 1);
				$this->addAttribute('objectName', 'objectName', 0, 1);
				$this->addAttribute('objectNameInNationalLanguage', 'objectNameInNationalLanguage', 0, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('aidAvailabilityCategory', 'aidAvailabilityCategory', 1, 1);
				$this->addAttribute('idcode', 'idcode', 0, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType BuoyInstallation
		*
		* An installation buoy is a buoy used for loading tankers with gas or oil.
		* 
		* 
		* @property buoyShape[1..1] buoyShape |Defined in BuoyInstallation
		* @property categoryOfInstallationBuoy[0..1] categoryOfInstallationBuoy |Defined in BuoyInstallation
		* @property colour[1..*] colour |Defined in BuoyInstallation
		* @property colourPattern[0..1] colourPattern |Defined in BuoyInstallation
		* @property radarConspicuous[0..1] radarConspicuous |Defined in BuoyInstallation
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in BuoyInstallation
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in BuoyInstallation
		* @property objectName[0..1] objectName |Defined in BuoyInstallation
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in BuoyInstallation
		* @property status[0..*] status |Defined in BuoyInstallation
		* @property verticalLength[0..1] verticalLength |Defined in BuoyInstallation
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in BuoyInstallation
		* @property typeOfBuoy[0..1] typeOfBuoy |Defined in BuoyInstallation
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in BuoyInstallation
		* @property idcode[1..1] idcode |Defined in BuoyInstallation
		* @property dateEnd[0..1] dateEnd |Defined in BuoyInstallation
		* @property dateStart[0..1] dateStart |Defined in BuoyInstallation
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in BuoyInstallation
		* @property periodicDateStart[0..1] periodicDateStart |Defined in BuoyInstallation
		* @property information[0..*] information |Defined in BuoyInstallation
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in BuoyInstallation
		* @property textualDescription[0..1] textualDescription |Defined in BuoyInstallation
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in BuoyInstallation
		* @property scaleMinimum[0..1] scaleMinimum |Defined in BuoyInstallation
		* @property sourceDate[0..1] sourceDate |Defined in BuoyInstallation
		* @property sourceIndication[0..1] sourceIndication |Defined in BuoyInstallation
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in BuoyInstallation
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in BuoyInstallation
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in BuoyInstallation
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in BuoyInstallation
		* @property installationDate[0..1] installationDate |Defined in BuoyInstallation
		*/
		 class BuoyInstallation extends AbstractFeatureType
		{
		
			/**
			* FeatureType BuoyInstallation
			*
			* An installation buoy is a buoy used for loading tankers with gas or oil.
			* 
			* 
		* @property buoyShape[1..1] buoyShape |Defined in BuoyInstallation
		* @property categoryOfInstallationBuoy[0..1] categoryOfInstallationBuoy |Defined in BuoyInstallation
		* @property colour[1..*] colour |Defined in BuoyInstallation
		* @property colourPattern[0..1] colourPattern |Defined in BuoyInstallation
		* @property radarConspicuous[0..1] radarConspicuous |Defined in BuoyInstallation
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in BuoyInstallation
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in BuoyInstallation
		* @property objectName[0..1] objectName |Defined in BuoyInstallation
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in BuoyInstallation
		* @property status[0..*] status |Defined in BuoyInstallation
		* @property verticalLength[0..1] verticalLength |Defined in BuoyInstallation
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in BuoyInstallation
		* @property typeOfBuoy[0..1] typeOfBuoy |Defined in BuoyInstallation
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in BuoyInstallation
		* @property idcode[1..1] idcode |Defined in BuoyInstallation
		* @property dateEnd[0..1] dateEnd |Defined in BuoyInstallation
		* @property dateStart[0..1] dateStart |Defined in BuoyInstallation
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in BuoyInstallation
		* @property periodicDateStart[0..1] periodicDateStart |Defined in BuoyInstallation
		* @property information[0..*] information |Defined in BuoyInstallation
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in BuoyInstallation
		* @property textualDescription[0..1] textualDescription |Defined in BuoyInstallation
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in BuoyInstallation
		* @property scaleMinimum[0..1] scaleMinimum |Defined in BuoyInstallation
		* @property sourceDate[0..1] sourceDate |Defined in BuoyInstallation
		* @property sourceIndication[0..1] sourceIndication |Defined in BuoyInstallation
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in BuoyInstallation
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in BuoyInstallation
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in BuoyInstallation
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in BuoyInstallation
		* @property installationDate[0..1] installationDate |Defined in BuoyInstallation
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('buoyShape', 'buoyShape', 1, 1);
				$this->addAttribute('categoryOfInstallationBuoy', 'categoryOfInstallationBuoy', 0, 1);
				$this->addAttribute('colour', 'colour', 1, MAX_OCCUR);
				$this->addAttribute('colourPattern', 'colourPattern', 0, 1);
				$this->addAttribute('radarConspicuous', 'radarConspicuous', 0, 1);
				$this->addAttribute('marksNavigationalSystemOf', 'marksNavigationalSystemOf', 0, 1);
				$this->addAttribute('natureOfConstruction', 'natureOfConstruction', 0, MAX_OCCUR);
				$this->addAttribute('objectName', 'objectName', 0, 1);
				$this->addAttribute('objectNameInNationalLanguage', 'objectNameInNationalLanguage', 0, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('verticalLength', 'verticalLength', 0, 1);
				$this->addAttribute('verticalUncertainty', 'verticalUncertainty', 0, 1);
				$this->addAttribute('typeOfBuoy', 'typeOfBuoy', 0, 1);
				$this->addAttribute('aidAvailabilityCategory', 'aidAvailabilityCategory', 1, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType BuoyLateral
		*
		* A lateral buoy is used to indicate the port or starboard hand side of the route to be followed. They are generally used for well defined channels and are used in conjunction with a conventional direction of buoyage.
		* 
		* 
		* @property buoyShape[1..1] buoyShape |Defined in BuoyLateral
		* @property categoryOfLateralMark[1..1] categoryOfLateralMark |Defined in BuoyLateral
		* @property colour[1..*] colour |Defined in BuoyLateral
		* @property colourPattern[0..1] colourPattern |Defined in BuoyLateral
		* @property radarConspicuous[0..1] radarConspicuous |Defined in BuoyLateral
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in BuoyLateral
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in BuoyLateral
		* @property objectName[0..1] objectName |Defined in BuoyLateral
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in BuoyLateral
		* @property status[0..*] status |Defined in BuoyLateral
		* @property verticalLength[0..1] verticalLength |Defined in BuoyLateral
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in BuoyLateral
		* @property typeOfBuoy[0..1] typeOfBuoy |Defined in BuoyLateral
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in BuoyLateral
		* @property idcode[0..1] idcode |Defined in BuoyLateral
		* @property dateEnd[0..1] dateEnd |Defined in BuoyLateral
		* @property dateStart[0..1] dateStart |Defined in BuoyLateral
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in BuoyLateral
		* @property periodicDateStart[0..1] periodicDateStart |Defined in BuoyLateral
		* @property information[0..*] information |Defined in BuoyLateral
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in BuoyLateral
		* @property textualDescription[0..1] textualDescription |Defined in BuoyLateral
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in BuoyLateral
		* @property scaleMinimum[0..1] scaleMinimum |Defined in BuoyLateral
		* @property sourceDate[0..1] sourceDate |Defined in BuoyLateral
		* @property sourceIndication[0..1] sourceIndication |Defined in BuoyLateral
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in BuoyLateral
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in BuoyLateral
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in BuoyLateral
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in BuoyLateral
		* @property installationDate[0..1] installationDate |Defined in BuoyLateral
		*/
		 class BuoyLateral extends AbstractFeatureType
		{
		
			/**
			* FeatureType BuoyLateral
			*
			* A lateral buoy is used to indicate the port or starboard hand side of the route to be followed. They are generally used for well defined channels and are used in conjunction with a conventional direction of buoyage.
			* 
			* 
		* @property buoyShape[1..1] buoyShape |Defined in BuoyLateral
		* @property categoryOfLateralMark[1..1] categoryOfLateralMark |Defined in BuoyLateral
		* @property colour[1..*] colour |Defined in BuoyLateral
		* @property colourPattern[0..1] colourPattern |Defined in BuoyLateral
		* @property radarConspicuous[0..1] radarConspicuous |Defined in BuoyLateral
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in BuoyLateral
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in BuoyLateral
		* @property objectName[0..1] objectName |Defined in BuoyLateral
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in BuoyLateral
		* @property status[0..*] status |Defined in BuoyLateral
		* @property verticalLength[0..1] verticalLength |Defined in BuoyLateral
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in BuoyLateral
		* @property typeOfBuoy[0..1] typeOfBuoy |Defined in BuoyLateral
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in BuoyLateral
		* @property idcode[0..1] idcode |Defined in BuoyLateral
		* @property dateEnd[0..1] dateEnd |Defined in BuoyLateral
		* @property dateStart[0..1] dateStart |Defined in BuoyLateral
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in BuoyLateral
		* @property periodicDateStart[0..1] periodicDateStart |Defined in BuoyLateral
		* @property information[0..*] information |Defined in BuoyLateral
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in BuoyLateral
		* @property textualDescription[0..1] textualDescription |Defined in BuoyLateral
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in BuoyLateral
		* @property scaleMinimum[0..1] scaleMinimum |Defined in BuoyLateral
		* @property sourceDate[0..1] sourceDate |Defined in BuoyLateral
		* @property sourceIndication[0..1] sourceIndication |Defined in BuoyLateral
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in BuoyLateral
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in BuoyLateral
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in BuoyLateral
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in BuoyLateral
		* @property installationDate[0..1] installationDate |Defined in BuoyLateral
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('buoyShape', 'buoyShape', 1, 1);
				$this->addAttribute('categoryOfLateralMark', 'categoryOfLateralMark', 1, 1);
				$this->addAttribute('colour', 'colour', 1, MAX_OCCUR);
				$this->addAttribute('colourPattern', 'colourPattern', 0, 1);
				$this->addAttribute('radarConspicuous', 'radarConspicuous', 0, 1);
				$this->addAttribute('marksNavigationalSystemOf', 'marksNavigationalSystemOf', 0, 1);
				$this->addAttribute('natureOfConstruction', 'natureOfConstruction', 0, MAX_OCCUR);
				$this->addAttribute('objectName', 'objectName', 0, 1);
				$this->addAttribute('objectNameInNationalLanguage', 'objectNameInNationalLanguage', 0, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('verticalLength', 'verticalLength', 0, 1);
				$this->addAttribute('verticalUncertainty', 'verticalUncertainty', 0, 1);
				$this->addAttribute('typeOfBuoy', 'typeOfBuoy', 0, 1);
				$this->addAttribute('aidAvailabilityCategory', 'aidAvailabilityCategory', 1, 1);
				$this->addAttribute('idcode', 'idcode', 0, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType BuoyCardinal
		*
		* A cardinal buoy is used in conjunction with the compass to indicate where the mariner may find the best navigable water. It is placed in one of the four quadrants (North, East, South and West), bounded by inter-cardinal bearings from the point marked.
		* 
		* 
		* @property buoyShape[1..1] buoyShape |Defined in BuoyCardinal
		* @property categoryOfCardinalMark[1..1] categoryOfCardinalMark |Defined in BuoyCardinal
		* @property colour[1..*] colour |Defined in BuoyCardinal
		* @property colourPattern[0..1] colourPattern |Defined in BuoyCardinal
		* @property radarConspicuous[0..1] radarConspicuous |Defined in BuoyCardinal
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in BuoyCardinal
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in BuoyCardinal
		* @property objectName[0..1] objectName |Defined in BuoyCardinal
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in BuoyCardinal
		* @property status[0..*] status |Defined in BuoyCardinal
		* @property verticalLength[0..1] verticalLength |Defined in BuoyCardinal
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in BuoyCardinal
		* @property typeOfBuoy[0..1] typeOfBuoy |Defined in BuoyCardinal
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in BuoyCardinal
		* @property idcode[1..1] idcode |Defined in BuoyCardinal
		* @property dateEnd[0..1] dateEnd |Defined in BuoyCardinal
		* @property dateStart[0..1] dateStart |Defined in BuoyCardinal
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in BuoyCardinal
		* @property periodicDateStart[0..1] periodicDateStart |Defined in BuoyCardinal
		* @property information[0..*] information |Defined in BuoyCardinal
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in BuoyCardinal
		* @property textualDescription[0..1] textualDescription |Defined in BuoyCardinal
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in BuoyCardinal
		* @property scaleMinimum[0..1] scaleMinimum |Defined in BuoyCardinal
		* @property sourceDate[0..1] sourceDate |Defined in BuoyCardinal
		* @property sourceIndication[0..1] sourceIndication |Defined in BuoyCardinal
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in BuoyCardinal
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in BuoyCardinal
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in BuoyCardinal
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in BuoyCardinal
		* @property installationDate[0..1] installationDate |Defined in BuoyCardinal
		*/
		 class BuoyCardinal extends AbstractFeatureType
		{
		
			/**
			* FeatureType BuoyCardinal
			*
			* A cardinal buoy is used in conjunction with the compass to indicate where the mariner may find the best navigable water. It is placed in one of the four quadrants (North, East, South and West), bounded by inter-cardinal bearings from the point marked.
			* 
			* 
		* @property buoyShape[1..1] buoyShape |Defined in BuoyCardinal
		* @property categoryOfCardinalMark[1..1] categoryOfCardinalMark |Defined in BuoyCardinal
		* @property colour[1..*] colour |Defined in BuoyCardinal
		* @property colourPattern[0..1] colourPattern |Defined in BuoyCardinal
		* @property radarConspicuous[0..1] radarConspicuous |Defined in BuoyCardinal
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in BuoyCardinal
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in BuoyCardinal
		* @property objectName[0..1] objectName |Defined in BuoyCardinal
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in BuoyCardinal
		* @property status[0..*] status |Defined in BuoyCardinal
		* @property verticalLength[0..1] verticalLength |Defined in BuoyCardinal
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in BuoyCardinal
		* @property typeOfBuoy[0..1] typeOfBuoy |Defined in BuoyCardinal
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in BuoyCardinal
		* @property idcode[1..1] idcode |Defined in BuoyCardinal
		* @property dateEnd[0..1] dateEnd |Defined in BuoyCardinal
		* @property dateStart[0..1] dateStart |Defined in BuoyCardinal
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in BuoyCardinal
		* @property periodicDateStart[0..1] periodicDateStart |Defined in BuoyCardinal
		* @property information[0..*] information |Defined in BuoyCardinal
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in BuoyCardinal
		* @property textualDescription[0..1] textualDescription |Defined in BuoyCardinal
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in BuoyCardinal
		* @property scaleMinimum[0..1] scaleMinimum |Defined in BuoyCardinal
		* @property sourceDate[0..1] sourceDate |Defined in BuoyCardinal
		* @property sourceIndication[0..1] sourceIndication |Defined in BuoyCardinal
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in BuoyCardinal
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in BuoyCardinal
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in BuoyCardinal
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in BuoyCardinal
		* @property installationDate[0..1] installationDate |Defined in BuoyCardinal
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('buoyShape', 'buoyShape', 1, 1);
				$this->addAttribute('categoryOfCardinalMark', 'categoryOfCardinalMark', 1, 1);
				$this->addAttribute('colour', 'colour', 1, MAX_OCCUR);
				$this->addAttribute('colourPattern', 'colourPattern', 0, 1);
				$this->addAttribute('radarConspicuous', 'radarConspicuous', 0, 1);
				$this->addAttribute('marksNavigationalSystemOf', 'marksNavigationalSystemOf', 0, 1);
				$this->addAttribute('natureOfConstruction', 'natureOfConstruction', 0, MAX_OCCUR);
				$this->addAttribute('objectName', 'objectName', 0, 1);
				$this->addAttribute('objectNameInNationalLanguage', 'objectNameInNationalLanguage', 0, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('verticalLength', 'verticalLength', 0, 1);
				$this->addAttribute('verticalUncertainty', 'verticalUncertainty', 0, 1);
				$this->addAttribute('typeOfBuoy', 'typeOfBuoy', 0, 1);
				$this->addAttribute('aidAvailabilityCategory', 'aidAvailabilityCategory', 1, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType BuoySafeWater
		*
		* A safe water buoy is used to indicate that there is navigable water around the mark.
		* 
		* 
		* @property buoyShape[1..1] buoyShape |Defined in BuoySafeWater
		* @property colour[1..*] colour |Defined in BuoySafeWater
		* @property colourPattern[0..1] colourPattern |Defined in BuoySafeWater
		* @property radarConspicuous[0..1] radarConspicuous |Defined in BuoySafeWater
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in BuoySafeWater
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in BuoySafeWater
		* @property objectName[0..1] objectName |Defined in BuoySafeWater
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in BuoySafeWater
		* @property status[0..*] status |Defined in BuoySafeWater
		* @property verticalLength[0..1] verticalLength |Defined in BuoySafeWater
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in BuoySafeWater
		* @property typeOfBuoy[0..1] typeOfBuoy |Defined in BuoySafeWater
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in BuoySafeWater
		* @property idcode[0..1] idcode |Defined in BuoySafeWater
		* @property dateEnd[0..1] dateEnd |Defined in BuoySafeWater
		* @property dateStart[0..1] dateStart |Defined in BuoySafeWater
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in BuoySafeWater
		* @property periodicDateStart[0..1] periodicDateStart |Defined in BuoySafeWater
		* @property information[0..*] information |Defined in BuoySafeWater
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in BuoySafeWater
		* @property textualDescription[0..1] textualDescription |Defined in BuoySafeWater
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in BuoySafeWater
		* @property scaleMinimum[0..1] scaleMinimum |Defined in BuoySafeWater
		* @property sourceDate[0..1] sourceDate |Defined in BuoySafeWater
		* @property sourceIndication[0..1] sourceIndication |Defined in BuoySafeWater
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in BuoySafeWater
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in BuoySafeWater
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in BuoySafeWater
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in BuoySafeWater
		* @property installationDate[0..1] installationDate |Defined in BuoySafeWater
		*/
		 class BuoySafeWater extends AbstractFeatureType
		{
		
			/**
			* FeatureType BuoySafeWater
			*
			* A safe water buoy is used to indicate that there is navigable water around the mark.
			* 
			* 
		* @property buoyShape[1..1] buoyShape |Defined in BuoySafeWater
		* @property colour[1..*] colour |Defined in BuoySafeWater
		* @property colourPattern[0..1] colourPattern |Defined in BuoySafeWater
		* @property radarConspicuous[0..1] radarConspicuous |Defined in BuoySafeWater
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in BuoySafeWater
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in BuoySafeWater
		* @property objectName[0..1] objectName |Defined in BuoySafeWater
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in BuoySafeWater
		* @property status[0..*] status |Defined in BuoySafeWater
		* @property verticalLength[0..1] verticalLength |Defined in BuoySafeWater
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in BuoySafeWater
		* @property typeOfBuoy[0..1] typeOfBuoy |Defined in BuoySafeWater
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in BuoySafeWater
		* @property idcode[0..1] idcode |Defined in BuoySafeWater
		* @property dateEnd[0..1] dateEnd |Defined in BuoySafeWater
		* @property dateStart[0..1] dateStart |Defined in BuoySafeWater
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in BuoySafeWater
		* @property periodicDateStart[0..1] periodicDateStart |Defined in BuoySafeWater
		* @property information[0..*] information |Defined in BuoySafeWater
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in BuoySafeWater
		* @property textualDescription[0..1] textualDescription |Defined in BuoySafeWater
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in BuoySafeWater
		* @property scaleMinimum[0..1] scaleMinimum |Defined in BuoySafeWater
		* @property sourceDate[0..1] sourceDate |Defined in BuoySafeWater
		* @property sourceIndication[0..1] sourceIndication |Defined in BuoySafeWater
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in BuoySafeWater
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in BuoySafeWater
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in BuoySafeWater
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in BuoySafeWater
		* @property installationDate[0..1] installationDate |Defined in BuoySafeWater
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('buoyShape', 'buoyShape', 1, 1);
				$this->addAttribute('colour', 'colour', 1, MAX_OCCUR);
				$this->addAttribute('colourPattern', 'colourPattern', 0, 1);
				$this->addAttribute('radarConspicuous', 'radarConspicuous', 0, 1);
				$this->addAttribute('marksNavigationalSystemOf', 'marksNavigationalSystemOf', 0, 1);
				$this->addAttribute('natureOfConstruction', 'natureOfConstruction', 0, MAX_OCCUR);
				$this->addAttribute('objectName', 'objectName', 0, 1);
				$this->addAttribute('objectNameInNationalLanguage', 'objectNameInNationalLanguage', 0, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('verticalLength', 'verticalLength', 0, 1);
				$this->addAttribute('verticalUncertainty', 'verticalUncertainty', 0, 1);
				$this->addAttribute('typeOfBuoy', 'typeOfBuoy', 0, 1);
				$this->addAttribute('aidAvailabilityCategory', 'aidAvailabilityCategory', 1, 1);
				$this->addAttribute('idcode', 'idcode', 0, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType BuoyIsolatedDanger
		*
		* A isolated danger buoy is a buoy moored on or above an isolated danger of limited extent, which has navigable water all around it.
		* 
		* 
		* @property buoyShape[1..1] buoyShape |Defined in BuoyIsolatedDanger
		* @property colour[1..*] colour |Defined in BuoyIsolatedDanger
		* @property colourPattern[0..1] colourPattern |Defined in BuoyIsolatedDanger
		* @property radarConspicuous[0..1] radarConspicuous |Defined in BuoyIsolatedDanger
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in BuoyIsolatedDanger
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in BuoyIsolatedDanger
		* @property objectName[0..1] objectName |Defined in BuoyIsolatedDanger
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in BuoyIsolatedDanger
		* @property status[0..*] status |Defined in BuoyIsolatedDanger
		* @property verticalLength[0..1] verticalLength |Defined in BuoyIsolatedDanger
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in BuoyIsolatedDanger
		* @property typeOfBuoy[0..1] typeOfBuoy |Defined in BuoyIsolatedDanger
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in BuoyIsolatedDanger
		* @property idcode[1..1] idcode |Defined in BuoyIsolatedDanger
		* @property dateEnd[0..1] dateEnd |Defined in BuoyIsolatedDanger
		* @property dateStart[0..1] dateStart |Defined in BuoyIsolatedDanger
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in BuoyIsolatedDanger
		* @property periodicDateStart[0..1] periodicDateStart |Defined in BuoyIsolatedDanger
		* @property information[0..*] information |Defined in BuoyIsolatedDanger
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in BuoyIsolatedDanger
		* @property textualDescription[0..1] textualDescription |Defined in BuoyIsolatedDanger
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in BuoyIsolatedDanger
		* @property scaleMinimum[0..1] scaleMinimum |Defined in BuoyIsolatedDanger
		* @property sourceDate[0..1] sourceDate |Defined in BuoyIsolatedDanger
		* @property sourceIndication[0..1] sourceIndication |Defined in BuoyIsolatedDanger
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in BuoyIsolatedDanger
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in BuoyIsolatedDanger
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in BuoyIsolatedDanger
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in BuoyIsolatedDanger
		* @property installationDate[0..1] installationDate |Defined in BuoyIsolatedDanger
		*/
		 class BuoyIsolatedDanger extends AbstractFeatureType
		{
		
			/**
			* FeatureType BuoyIsolatedDanger
			*
			* A isolated danger buoy is a buoy moored on or above an isolated danger of limited extent, which has navigable water all around it.
			* 
			* 
		* @property buoyShape[1..1] buoyShape |Defined in BuoyIsolatedDanger
		* @property colour[1..*] colour |Defined in BuoyIsolatedDanger
		* @property colourPattern[0..1] colourPattern |Defined in BuoyIsolatedDanger
		* @property radarConspicuous[0..1] radarConspicuous |Defined in BuoyIsolatedDanger
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in BuoyIsolatedDanger
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in BuoyIsolatedDanger
		* @property objectName[0..1] objectName |Defined in BuoyIsolatedDanger
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in BuoyIsolatedDanger
		* @property status[0..*] status |Defined in BuoyIsolatedDanger
		* @property verticalLength[0..1] verticalLength |Defined in BuoyIsolatedDanger
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in BuoyIsolatedDanger
		* @property typeOfBuoy[0..1] typeOfBuoy |Defined in BuoyIsolatedDanger
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in BuoyIsolatedDanger
		* @property idcode[1..1] idcode |Defined in BuoyIsolatedDanger
		* @property dateEnd[0..1] dateEnd |Defined in BuoyIsolatedDanger
		* @property dateStart[0..1] dateStart |Defined in BuoyIsolatedDanger
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in BuoyIsolatedDanger
		* @property periodicDateStart[0..1] periodicDateStart |Defined in BuoyIsolatedDanger
		* @property information[0..*] information |Defined in BuoyIsolatedDanger
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in BuoyIsolatedDanger
		* @property textualDescription[0..1] textualDescription |Defined in BuoyIsolatedDanger
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in BuoyIsolatedDanger
		* @property scaleMinimum[0..1] scaleMinimum |Defined in BuoyIsolatedDanger
		* @property sourceDate[0..1] sourceDate |Defined in BuoyIsolatedDanger
		* @property sourceIndication[0..1] sourceIndication |Defined in BuoyIsolatedDanger
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in BuoyIsolatedDanger
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in BuoyIsolatedDanger
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in BuoyIsolatedDanger
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in BuoyIsolatedDanger
		* @property installationDate[0..1] installationDate |Defined in BuoyIsolatedDanger
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('buoyShape', 'buoyShape', 1, 1);
				$this->addAttribute('colour', 'colour', 1, MAX_OCCUR);
				$this->addAttribute('colourPattern', 'colourPattern', 0, 1);
				$this->addAttribute('radarConspicuous', 'radarConspicuous', 0, 1);
				$this->addAttribute('marksNavigationalSystemOf', 'marksNavigationalSystemOf', 0, 1);
				$this->addAttribute('natureOfConstruction', 'natureOfConstruction', 0, MAX_OCCUR);
				$this->addAttribute('objectName', 'objectName', 0, 1);
				$this->addAttribute('objectNameInNationalLanguage', 'objectNameInNationalLanguage', 0, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('verticalLength', 'verticalLength', 0, 1);
				$this->addAttribute('verticalUncertainty', 'verticalUncertainty', 0, 1);
				$this->addAttribute('typeOfBuoy', 'typeOfBuoy', 0, 1);
				$this->addAttribute('aidAvailabilityCategory', 'aidAvailabilityCategory', 1, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType BuoySpecialPurposeGeneral
		*
		* A special purpose buoy is primarily used to indicate an area or feature, the nature of which is apparent from reference to a chart, Sailing Directions or Notices to Mariners (UKHO NP 735, 5th Edition). Buoy in general: A buoy whose appearance or purpose is not adequately known.
		* 
		* 
		* @property buoyShape[1..1] buoyShape |Defined in BuoySpecialPurposeGeneral
		* @property categoryOfSpecialPurposeMark[1..*] categoryOfSpecialPurposeMark |Defined in BuoySpecialPurposeGeneral
		* @property colour[1..*] colour |Defined in BuoySpecialPurposeGeneral
		* @property colourPattern[0..1] colourPattern |Defined in BuoySpecialPurposeGeneral
		* @property radarConspicuous[0..1] radarConspicuous |Defined in BuoySpecialPurposeGeneral
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in BuoySpecialPurposeGeneral
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in BuoySpecialPurposeGeneral
		* @property objectName[0..1] objectName |Defined in BuoySpecialPurposeGeneral
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in BuoySpecialPurposeGeneral
		* @property status[0..*] status |Defined in BuoySpecialPurposeGeneral
		* @property verticalLength[0..1] verticalLength |Defined in BuoySpecialPurposeGeneral
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in BuoySpecialPurposeGeneral
		* @property typeOfBuoy[0..1] typeOfBuoy |Defined in BuoySpecialPurposeGeneral
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in BuoySpecialPurposeGeneral
		* @property idcode[1..1] idcode |Defined in BuoySpecialPurposeGeneral
		* @property dateEnd[0..1] dateEnd |Defined in BuoySpecialPurposeGeneral
		* @property dateStart[0..1] dateStart |Defined in BuoySpecialPurposeGeneral
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in BuoySpecialPurposeGeneral
		* @property periodicDateStart[0..1] periodicDateStart |Defined in BuoySpecialPurposeGeneral
		* @property information[0..*] information |Defined in BuoySpecialPurposeGeneral
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in BuoySpecialPurposeGeneral
		* @property textualDescription[0..1] textualDescription |Defined in BuoySpecialPurposeGeneral
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in BuoySpecialPurposeGeneral
		* @property scaleMinimum[0..1] scaleMinimum |Defined in BuoySpecialPurposeGeneral
		* @property sourceDate[0..1] sourceDate |Defined in BuoySpecialPurposeGeneral
		* @property sourceIndication[0..1] sourceIndication |Defined in BuoySpecialPurposeGeneral
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in BuoySpecialPurposeGeneral
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in BuoySpecialPurposeGeneral
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in BuoySpecialPurposeGeneral
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in BuoySpecialPurposeGeneral
		* @property installationDate[0..1] installationDate |Defined in BuoySpecialPurposeGeneral
		*/
		 class BuoySpecialPurposeGeneral extends AbstractFeatureType
		{
		
			/**
			* FeatureType BuoySpecialPurposeGeneral
			*
			* A special purpose buoy is primarily used to indicate an area or feature, the nature of which is apparent from reference to a chart, Sailing Directions or Notices to Mariners (UKHO NP 735, 5th Edition). Buoy in general: A buoy whose appearance or purpose is not adequately known.
			* 
			* 
		* @property buoyShape[1..1] buoyShape |Defined in BuoySpecialPurposeGeneral
		* @property categoryOfSpecialPurposeMark[1..*] categoryOfSpecialPurposeMark |Defined in BuoySpecialPurposeGeneral
		* @property colour[1..*] colour |Defined in BuoySpecialPurposeGeneral
		* @property colourPattern[0..1] colourPattern |Defined in BuoySpecialPurposeGeneral
		* @property radarConspicuous[0..1] radarConspicuous |Defined in BuoySpecialPurposeGeneral
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in BuoySpecialPurposeGeneral
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in BuoySpecialPurposeGeneral
		* @property objectName[0..1] objectName |Defined in BuoySpecialPurposeGeneral
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in BuoySpecialPurposeGeneral
		* @property status[0..*] status |Defined in BuoySpecialPurposeGeneral
		* @property verticalLength[0..1] verticalLength |Defined in BuoySpecialPurposeGeneral
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in BuoySpecialPurposeGeneral
		* @property typeOfBuoy[0..1] typeOfBuoy |Defined in BuoySpecialPurposeGeneral
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in BuoySpecialPurposeGeneral
		* @property idcode[1..1] idcode |Defined in BuoySpecialPurposeGeneral
		* @property dateEnd[0..1] dateEnd |Defined in BuoySpecialPurposeGeneral
		* @property dateStart[0..1] dateStart |Defined in BuoySpecialPurposeGeneral
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in BuoySpecialPurposeGeneral
		* @property periodicDateStart[0..1] periodicDateStart |Defined in BuoySpecialPurposeGeneral
		* @property information[0..*] information |Defined in BuoySpecialPurposeGeneral
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in BuoySpecialPurposeGeneral
		* @property textualDescription[0..1] textualDescription |Defined in BuoySpecialPurposeGeneral
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in BuoySpecialPurposeGeneral
		* @property scaleMinimum[0..1] scaleMinimum |Defined in BuoySpecialPurposeGeneral
		* @property sourceDate[0..1] sourceDate |Defined in BuoySpecialPurposeGeneral
		* @property sourceIndication[0..1] sourceIndication |Defined in BuoySpecialPurposeGeneral
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in BuoySpecialPurposeGeneral
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in BuoySpecialPurposeGeneral
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in BuoySpecialPurposeGeneral
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in BuoySpecialPurposeGeneral
		* @property installationDate[0..1] installationDate |Defined in BuoySpecialPurposeGeneral
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('buoyShape', 'buoyShape', 1, 1);
				$this->addAttribute('categoryOfSpecialPurposeMark', 'categoryOfSpecialPurposeMark', 1, MAX_OCCUR);
				$this->addAttribute('colour', 'colour', 1, MAX_OCCUR);
				$this->addAttribute('colourPattern', 'colourPattern', 0, 1);
				$this->addAttribute('radarConspicuous', 'radarConspicuous', 0, 1);
				$this->addAttribute('marksNavigationalSystemOf', 'marksNavigationalSystemOf', 0, 1);
				$this->addAttribute('natureOfConstruction', 'natureOfConstruction', 0, MAX_OCCUR);
				$this->addAttribute('objectName', 'objectName', 0, 1);
				$this->addAttribute('objectNameInNationalLanguage', 'objectNameInNationalLanguage', 0, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('verticalLength', 'verticalLength', 0, 1);
				$this->addAttribute('verticalUncertainty', 'verticalUncertainty', 0, 1);
				$this->addAttribute('typeOfBuoy', 'typeOfBuoy', 0, 1);
				$this->addAttribute('aidAvailabilityCategory', 'aidAvailabilityCategory', 1, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType OffshorePlatform
		*
		* A permanent offshore structure, either fixed or floating, used in the production of oil or natural gas.
		* 
		* 
		* @property categoryOfOffshorePlatform[0..1] categoryOfOffshorePlatform |Defined in OffshorePlatform
		* @property colour[0..*] colour |Defined in OffshorePlatform
		* @property colourPattern[0..1] colourPattern |Defined in OffshorePlatform
		* @property condition[0..1] condition |Defined in OffshorePlatform
		* @property radarConspicuous[0..1] radarConspicuous |Defined in OffshorePlatform
		* @property visuallyConspicuous[0..1] visuallyConspicuous |Defined in OffshorePlatform
		* @property height[0..1] height |Defined in OffshorePlatform
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in OffshorePlatform
		* @property objectName[0..1] objectName |Defined in OffshorePlatform
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in OffshorePlatform
		* @property product[0..*] product |Defined in OffshorePlatform
		* @property status[0..*] status |Defined in OffshorePlatform
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in OffshorePlatform
		* @property verticalDatum[0..1] verticalDatum |Defined in OffshorePlatform
		* @property verticalLength[0..1] verticalLength |Defined in OffshorePlatform
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in OffshorePlatform
		* @property idcode[1..1] idcode |Defined in OffshorePlatform
		* @property dateEnd[0..1] dateEnd |Defined in OffshorePlatform
		* @property dateStart[0..1] dateStart |Defined in OffshorePlatform
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in OffshorePlatform
		* @property periodicDateStart[0..1] periodicDateStart |Defined in OffshorePlatform
		* @property information[0..*] information |Defined in OffshorePlatform
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in OffshorePlatform
		* @property textualDescription[0..1] textualDescription |Defined in OffshorePlatform
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in OffshorePlatform
		* @property scaleMinimum[0..1] scaleMinimum |Defined in OffshorePlatform
		* @property sourceDate[0..1] sourceDate |Defined in OffshorePlatform
		* @property sourceIndication[0..1] sourceIndication |Defined in OffshorePlatform
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in OffshorePlatform
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in OffshorePlatform
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in OffshorePlatform
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in OffshorePlatform
		* @property installationDate[0..1] installationDate |Defined in OffshorePlatform
		* @property mannedStructure[0..1] mannedStructure |Defined in OffshorePlatform
		*/
		 class OffshorePlatform extends AbstractFeatureType
		{
		
			/**
			* FeatureType OffshorePlatform
			*
			* A permanent offshore structure, either fixed or floating, used in the production of oil or natural gas.
			* 
			* 
		* @property categoryOfOffshorePlatform[0..1] categoryOfOffshorePlatform |Defined in OffshorePlatform
		* @property colour[0..*] colour |Defined in OffshorePlatform
		* @property colourPattern[0..1] colourPattern |Defined in OffshorePlatform
		* @property condition[0..1] condition |Defined in OffshorePlatform
		* @property radarConspicuous[0..1] radarConspicuous |Defined in OffshorePlatform
		* @property visuallyConspicuous[0..1] visuallyConspicuous |Defined in OffshorePlatform
		* @property height[0..1] height |Defined in OffshorePlatform
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in OffshorePlatform
		* @property objectName[0..1] objectName |Defined in OffshorePlatform
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in OffshorePlatform
		* @property product[0..*] product |Defined in OffshorePlatform
		* @property status[0..*] status |Defined in OffshorePlatform
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in OffshorePlatform
		* @property verticalDatum[0..1] verticalDatum |Defined in OffshorePlatform
		* @property verticalLength[0..1] verticalLength |Defined in OffshorePlatform
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in OffshorePlatform
		* @property idcode[1..1] idcode |Defined in OffshorePlatform
		* @property dateEnd[0..1] dateEnd |Defined in OffshorePlatform
		* @property dateStart[0..1] dateStart |Defined in OffshorePlatform
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in OffshorePlatform
		* @property periodicDateStart[0..1] periodicDateStart |Defined in OffshorePlatform
		* @property information[0..*] information |Defined in OffshorePlatform
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in OffshorePlatform
		* @property textualDescription[0..1] textualDescription |Defined in OffshorePlatform
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in OffshorePlatform
		* @property scaleMinimum[0..1] scaleMinimum |Defined in OffshorePlatform
		* @property sourceDate[0..1] sourceDate |Defined in OffshorePlatform
		* @property sourceIndication[0..1] sourceIndication |Defined in OffshorePlatform
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in OffshorePlatform
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in OffshorePlatform
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in OffshorePlatform
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in OffshorePlatform
		* @property installationDate[0..1] installationDate |Defined in OffshorePlatform
		* @property mannedStructure[0..1] mannedStructure |Defined in OffshorePlatform
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('categoryOfOffshorePlatform', 'categoryOfOffshorePlatform', 0, 1);
				$this->addAttribute('colour', 'colour', 0, MAX_OCCUR);
				$this->addAttribute('colourPattern', 'colourPattern', 0, 1);
				$this->addAttribute('condition', 'condition', 0, 1);
				$this->addAttribute('radarConspicuous', 'radarConspicuous', 0, 1);
				$this->addAttribute('visuallyConspicuous', 'visuallyConspicuous', 0, 1);
				$this->addAttribute('height', 'height', 0, 1);
				$this->addAttribute('natureOfConstruction', 'natureOfConstruction', 0, MAX_OCCUR);
				$this->addAttribute('objectName', 'objectName', 0, 1);
				$this->addAttribute('objectNameInNationalLanguage', 'objectNameInNationalLanguage', 0, 1);
				$this->addAttribute('product', 'product', 0, MAX_OCCUR);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('verticalUncertainty', 'verticalUncertainty', 0, 1);
				$this->addAttribute('verticalDatum', 'verticalDatum', 0, 1);
				$this->addAttribute('verticalLength', 'verticalLength', 0, 1);
				$this->addAttribute('aidAvailabilityCategory', 'aidAvailabilityCategory', 1, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				$this->addAttribute('mannedStructure', 'mannedStructure', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType LightVessel
		*
		* A distinctively marked vessel anchored or moored at a charted point, to serve as an aid to navigation. By night, it displays a characteristic light(s) and is usually equipped with other devices, such as fog signal, submarine sound signal, and radio-beacon, to assist navigation.
		* 
		* 
		* @property colour[1..*] colour |Defined in LightVessel
		* @property colourPattern[0..1] colourPattern |Defined in LightVessel
		* @property radarConspicuous[0..1] radarConspicuous |Defined in LightVessel
		* @property visuallyConspicuous[0..1] visuallyConspicuous |Defined in LightVessel
		* @property horizontalAccuracy[0..1] horizontalAccuracy |Defined in LightVessel
		* @property horizontalLength[0..1] horizontalLength |Defined in LightVessel
		* @property horizontalWidth[0..1] horizontalWidth |Defined in LightVessel
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in LightVessel
		* @property objectName[0..1] objectName |Defined in LightVessel
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in LightVessel
		* @property status[0..*] status |Defined in LightVessel
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in LightVessel
		* @property verticalLength[0..1] verticalLength |Defined in LightVessel
		* @property mannedStructure[0..1] mannedStructure |Defined in LightVessel
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in LightVessel
		* @property idcode[1..1] idcode |Defined in LightVessel
		* @property dateEnd[0..1] dateEnd |Defined in LightVessel
		* @property dateStart[0..1] dateStart |Defined in LightVessel
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in LightVessel
		* @property periodicDateStart[0..1] periodicDateStart |Defined in LightVessel
		* @property information[0..*] information |Defined in LightVessel
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in LightVessel
		* @property textualDescription[0..1] textualDescription |Defined in LightVessel
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in LightVessel
		* @property scaleMinimum[0..1] scaleMinimum |Defined in LightVessel
		* @property sourceDate[0..1] sourceDate |Defined in LightVessel
		* @property sourceIndication[0..1] sourceIndication |Defined in LightVessel
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in LightVessel
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in LightVessel
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in LightVessel
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in LightVessel
		* @property installationDate[0..1] installationDate |Defined in LightVessel
		*/
		 class LightVessel extends AbstractFeatureType
		{
		
			/**
			* FeatureType LightVessel
			*
			* A distinctively marked vessel anchored or moored at a charted point, to serve as an aid to navigation. By night, it displays a characteristic light(s) and is usually equipped with other devices, such as fog signal, submarine sound signal, and radio-beacon, to assist navigation.
			* 
			* 
		* @property colour[1..*] colour |Defined in LightVessel
		* @property colourPattern[0..1] colourPattern |Defined in LightVessel
		* @property radarConspicuous[0..1] radarConspicuous |Defined in LightVessel
		* @property visuallyConspicuous[0..1] visuallyConspicuous |Defined in LightVessel
		* @property horizontalAccuracy[0..1] horizontalAccuracy |Defined in LightVessel
		* @property horizontalLength[0..1] horizontalLength |Defined in LightVessel
		* @property horizontalWidth[0..1] horizontalWidth |Defined in LightVessel
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in LightVessel
		* @property objectName[0..1] objectName |Defined in LightVessel
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in LightVessel
		* @property status[0..*] status |Defined in LightVessel
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in LightVessel
		* @property verticalLength[0..1] verticalLength |Defined in LightVessel
		* @property mannedStructure[0..1] mannedStructure |Defined in LightVessel
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in LightVessel
		* @property idcode[1..1] idcode |Defined in LightVessel
		* @property dateEnd[0..1] dateEnd |Defined in LightVessel
		* @property dateStart[0..1] dateStart |Defined in LightVessel
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in LightVessel
		* @property periodicDateStart[0..1] periodicDateStart |Defined in LightVessel
		* @property information[0..*] information |Defined in LightVessel
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in LightVessel
		* @property textualDescription[0..1] textualDescription |Defined in LightVessel
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in LightVessel
		* @property scaleMinimum[0..1] scaleMinimum |Defined in LightVessel
		* @property sourceDate[0..1] sourceDate |Defined in LightVessel
		* @property sourceIndication[0..1] sourceIndication |Defined in LightVessel
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in LightVessel
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in LightVessel
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in LightVessel
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in LightVessel
		* @property installationDate[0..1] installationDate |Defined in LightVessel
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('colour', 'colour', 1, MAX_OCCUR);
				$this->addAttribute('colourPattern', 'colourPattern', 0, 1);
				$this->addAttribute('radarConspicuous', 'radarConspicuous', 0, 1);
				$this->addAttribute('visuallyConspicuous', 'visuallyConspicuous', 0, 1);
				$this->addAttribute('horizontalAccuracy', 'horizontalAccuracy', 0, 1);
				$this->addAttribute('horizontalLength', 'horizontalLength', 0, 1);
				$this->addAttribute('horizontalWidth', 'horizontalWidth', 0, 1);
				$this->addAttribute('natureOfConstruction', 'natureOfConstruction', 0, MAX_OCCUR);
				$this->addAttribute('objectName', 'objectName', 0, 1);
				$this->addAttribute('objectNameInNationalLanguage', 'objectNameInNationalLanguage', 0, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('verticalUncertainty', 'verticalUncertainty', 0, 1);
				$this->addAttribute('verticalLength', 'verticalLength', 0, 1);
				$this->addAttribute('mannedStructure', 'mannedStructure', 0, 1);
				$this->addAttribute('aidAvailabilityCategory', 'aidAvailabilityCategory', 1, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType Pile
		*
		* A long heavy timber or section of steel, wood, concrete, etc. forced into the earth which may serve as a support, as for a pier, or a free standing pole within a marine environment.
		* 
		* 
		* @property categoryOfPile[0..1] categoryOfPile |Defined in Pile
		* @property colour[0..*] colour |Defined in Pile
		* @property colourPattern[0..1] colourPattern |Defined in Pile
		* @property visuallyConspicuous[0..1] visuallyConspicuous |Defined in Pile
		* @property height[0..1] height |Defined in Pile
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in Pile
		* @property verticalLength[0..1] verticalLength |Defined in Pile
		* @property verticalDatum[0..1] verticalDatum |Defined in Pile
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in Pile
		* @property idcode[1..1] idcode |Defined in Pile
		* @property dateEnd[0..1] dateEnd |Defined in Pile
		* @property dateStart[0..1] dateStart |Defined in Pile
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in Pile
		* @property periodicDateStart[0..1] periodicDateStart |Defined in Pile
		* @property information[0..*] information |Defined in Pile
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in Pile
		* @property textualDescription[0..1] textualDescription |Defined in Pile
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in Pile
		* @property scaleMinimum[0..1] scaleMinimum |Defined in Pile
		* @property sourceDate[0..1] sourceDate |Defined in Pile
		* @property sourceIndication[0..1] sourceIndication |Defined in Pile
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in Pile
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in Pile
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in Pile
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in Pile
		* @property installationDate[0..1] installationDate |Defined in Pile
		*/
		 class Pile extends AbstractFeatureType
		{
		
			/**
			* FeatureType Pile
			*
			* A long heavy timber or section of steel, wood, concrete, etc. forced into the earth which may serve as a support, as for a pier, or a free standing pole within a marine environment.
			* 
			* 
		* @property categoryOfPile[0..1] categoryOfPile |Defined in Pile
		* @property colour[0..*] colour |Defined in Pile
		* @property colourPattern[0..1] colourPattern |Defined in Pile
		* @property visuallyConspicuous[0..1] visuallyConspicuous |Defined in Pile
		* @property height[0..1] height |Defined in Pile
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in Pile
		* @property verticalLength[0..1] verticalLength |Defined in Pile
		* @property verticalDatum[0..1] verticalDatum |Defined in Pile
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in Pile
		* @property idcode[1..1] idcode |Defined in Pile
		* @property dateEnd[0..1] dateEnd |Defined in Pile
		* @property dateStart[0..1] dateStart |Defined in Pile
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in Pile
		* @property periodicDateStart[0..1] periodicDateStart |Defined in Pile
		* @property information[0..*] information |Defined in Pile
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in Pile
		* @property textualDescription[0..1] textualDescription |Defined in Pile
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in Pile
		* @property scaleMinimum[0..1] scaleMinimum |Defined in Pile
		* @property sourceDate[0..1] sourceDate |Defined in Pile
		* @property sourceIndication[0..1] sourceIndication |Defined in Pile
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in Pile
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in Pile
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in Pile
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in Pile
		* @property installationDate[0..1] installationDate |Defined in Pile
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('categoryOfPile', 'categoryOfPile', 0, 1);
				$this->addAttribute('colour', 'colour', 0, MAX_OCCUR);
				$this->addAttribute('colourPattern', 'colourPattern', 0, 1);
				$this->addAttribute('visuallyConspicuous', 'visuallyConspicuous', 0, 1);
				$this->addAttribute('height', 'height', 0, 1);
				$this->addAttribute('verticalUncertainty', 'verticalUncertainty', 0, 1);
				$this->addAttribute('verticalLength', 'verticalLength', 0, 1);
				$this->addAttribute('verticalDatum', 'verticalDatum', 0, 1);
				$this->addAttribute('aidAvailabilityCategory', 'aidAvailabilityCategory', 1, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType SiloTank
		*
		* An enclosed container, used for storage.
		* 
		* 
		* @property buildingShape[0..1] buildingShape |Defined in SiloTank
		* @property categoryOfSiloTank[0..1] categoryOfSiloTank |Defined in SiloTank
		* @property colour[0..*] colour |Defined in SiloTank
		* @property colourPattern[0..1] colourPattern |Defined in SiloTank
		* @property condition[0..1] condition |Defined in SiloTank
		* @property radarConspicuous[0..1] radarConspicuous |Defined in SiloTank
		* @property visuallyConspicuous[0..1] visuallyConspicuous |Defined in SiloTank
		* @property elevation[0..1] elevation |Defined in SiloTank
		* @property height[0..1] height |Defined in SiloTank
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in SiloTank
		* @property objectName[0..1] objectName |Defined in SiloTank
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in SiloTank
		* @property product[0..*] product |Defined in SiloTank
		* @property status[0..*] status |Defined in SiloTank
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in SiloTank
		* @property verticalLength[0..1] verticalLength |Defined in SiloTank
		* @property verticalDatum[0..1] verticalDatum |Defined in SiloTank
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in SiloTank
		* @property idcode[1..1] idcode |Defined in SiloTank
		* @property dateEnd[0..1] dateEnd |Defined in SiloTank
		* @property dateStart[0..1] dateStart |Defined in SiloTank
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in SiloTank
		* @property periodicDateStart[0..1] periodicDateStart |Defined in SiloTank
		* @property information[0..*] information |Defined in SiloTank
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in SiloTank
		* @property textualDescription[0..1] textualDescription |Defined in SiloTank
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in SiloTank
		* @property scaleMinimum[0..1] scaleMinimum |Defined in SiloTank
		* @property sourceDate[0..1] sourceDate |Defined in SiloTank
		* @property sourceIndication[0..1] sourceIndication |Defined in SiloTank
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in SiloTank
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in SiloTank
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in SiloTank
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in SiloTank
		* @property installationDate[0..1] installationDate |Defined in SiloTank
		*/
		 class SiloTank extends AbstractFeatureType
		{
		
			/**
			* FeatureType SiloTank
			*
			* An enclosed container, used for storage.
			* 
			* 
		* @property buildingShape[0..1] buildingShape |Defined in SiloTank
		* @property categoryOfSiloTank[0..1] categoryOfSiloTank |Defined in SiloTank
		* @property colour[0..*] colour |Defined in SiloTank
		* @property colourPattern[0..1] colourPattern |Defined in SiloTank
		* @property condition[0..1] condition |Defined in SiloTank
		* @property radarConspicuous[0..1] radarConspicuous |Defined in SiloTank
		* @property visuallyConspicuous[0..1] visuallyConspicuous |Defined in SiloTank
		* @property elevation[0..1] elevation |Defined in SiloTank
		* @property height[0..1] height |Defined in SiloTank
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in SiloTank
		* @property objectName[0..1] objectName |Defined in SiloTank
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in SiloTank
		* @property product[0..*] product |Defined in SiloTank
		* @property status[0..*] status |Defined in SiloTank
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in SiloTank
		* @property verticalLength[0..1] verticalLength |Defined in SiloTank
		* @property verticalDatum[0..1] verticalDatum |Defined in SiloTank
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in SiloTank
		* @property idcode[1..1] idcode |Defined in SiloTank
		* @property dateEnd[0..1] dateEnd |Defined in SiloTank
		* @property dateStart[0..1] dateStart |Defined in SiloTank
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in SiloTank
		* @property periodicDateStart[0..1] periodicDateStart |Defined in SiloTank
		* @property information[0..*] information |Defined in SiloTank
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in SiloTank
		* @property textualDescription[0..1] textualDescription |Defined in SiloTank
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in SiloTank
		* @property scaleMinimum[0..1] scaleMinimum |Defined in SiloTank
		* @property sourceDate[0..1] sourceDate |Defined in SiloTank
		* @property sourceIndication[0..1] sourceIndication |Defined in SiloTank
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in SiloTank
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in SiloTank
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in SiloTank
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in SiloTank
		* @property installationDate[0..1] installationDate |Defined in SiloTank
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('buildingShape', 'buildingShape', 0, 1);
				$this->addAttribute('categoryOfSiloTank', 'categoryOfSiloTank', 0, 1);
				$this->addAttribute('colour', 'colour', 0, MAX_OCCUR);
				$this->addAttribute('colourPattern', 'colourPattern', 0, 1);
				$this->addAttribute('condition', 'condition', 0, 1);
				$this->addAttribute('radarConspicuous', 'radarConspicuous', 0, 1);
				$this->addAttribute('visuallyConspicuous', 'visuallyConspicuous', 0, 1);
				$this->addAttribute('elevation', 'elevation', 0, 1);
				$this->addAttribute('height', 'height', 0, 1);
				$this->addAttribute('natureOfConstruction', 'natureOfConstruction', 0, MAX_OCCUR);
				$this->addAttribute('objectName', 'objectName', 0, 1);
				$this->addAttribute('objectNameInNationalLanguage', 'objectNameInNationalLanguage', 0, 1);
				$this->addAttribute('product', 'product', 0, MAX_OCCUR);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('verticalUncertainty', 'verticalUncertainty', 0, 1);
				$this->addAttribute('verticalLength', 'verticalLength', 0, 1);
				$this->addAttribute('verticalDatum', 'verticalDatum', 0, 1);
				$this->addAttribute('aidAvailabilityCategory', 'aidAvailabilityCategory', 1, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType Landmark
		*
		* A prominent object at a fixed location which can be used in determining a location or a direction.
		* 
		* 
		* @property colour[0..*] colour |Defined in Landmark
		* @property colourPattern[0..1] colourPattern |Defined in Landmark
		* @property condition[0..1] condition |Defined in Landmark
		* @property radarConspicuous[0..1] radarConspicuous |Defined in Landmark
		* @property visuallyConspicuous[0..1] visuallyConspicuous |Defined in Landmark
		* @property elevation[0..1] elevation |Defined in Landmark
		* @property function[0..*] function |Defined in Landmark
		* @property height[0..*] height |Defined in Landmark
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in Landmark
		* @property objectName[0..1] objectName |Defined in Landmark
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in Landmark
		* @property status[0..*] status |Defined in Landmark
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in Landmark
		* @property verticalLength[0..1] verticalLength |Defined in Landmark
		* @property verticalDatum[0..1] verticalDatum |Defined in Landmark
		* @property mannedStructure[0..1] mannedStructure |Defined in Landmark
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in Landmark
		* @property idcode[1..1] idcode |Defined in Landmark
		* @property dateEnd[0..1] dateEnd |Defined in Landmark
		* @property dateStart[0..1] dateStart |Defined in Landmark
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in Landmark
		* @property periodicDateStart[0..1] periodicDateStart |Defined in Landmark
		* @property information[0..*] information |Defined in Landmark
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in Landmark
		* @property textualDescription[0..1] textualDescription |Defined in Landmark
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in Landmark
		* @property scaleMinimum[0..1] scaleMinimum |Defined in Landmark
		* @property sourceDate[0..1] sourceDate |Defined in Landmark
		* @property sourceIndication[0..1] sourceIndication |Defined in Landmark
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in Landmark
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in Landmark
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in Landmark
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in Landmark
		* @property installationDate[0..1] installationDate |Defined in Landmark
		*/
		 class Landmark extends AbstractFeatureType
		{
		
			/**
			* FeatureType Landmark
			*
			* A prominent object at a fixed location which can be used in determining a location or a direction.
			* 
			* 
		* @property colour[0..*] colour |Defined in Landmark
		* @property colourPattern[0..1] colourPattern |Defined in Landmark
		* @property condition[0..1] condition |Defined in Landmark
		* @property radarConspicuous[0..1] radarConspicuous |Defined in Landmark
		* @property visuallyConspicuous[0..1] visuallyConspicuous |Defined in Landmark
		* @property elevation[0..1] elevation |Defined in Landmark
		* @property function[0..*] function |Defined in Landmark
		* @property height[0..*] height |Defined in Landmark
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in Landmark
		* @property objectName[0..1] objectName |Defined in Landmark
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in Landmark
		* @property status[0..*] status |Defined in Landmark
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in Landmark
		* @property verticalLength[0..1] verticalLength |Defined in Landmark
		* @property verticalDatum[0..1] verticalDatum |Defined in Landmark
		* @property mannedStructure[0..1] mannedStructure |Defined in Landmark
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in Landmark
		* @property idcode[1..1] idcode |Defined in Landmark
		* @property dateEnd[0..1] dateEnd |Defined in Landmark
		* @property dateStart[0..1] dateStart |Defined in Landmark
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in Landmark
		* @property periodicDateStart[0..1] periodicDateStart |Defined in Landmark
		* @property information[0..*] information |Defined in Landmark
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in Landmark
		* @property textualDescription[0..1] textualDescription |Defined in Landmark
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in Landmark
		* @property scaleMinimum[0..1] scaleMinimum |Defined in Landmark
		* @property sourceDate[0..1] sourceDate |Defined in Landmark
		* @property sourceIndication[0..1] sourceIndication |Defined in Landmark
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in Landmark
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in Landmark
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in Landmark
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in Landmark
		* @property installationDate[0..1] installationDate |Defined in Landmark
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('colour', 'colour', 0, MAX_OCCUR);
				$this->addAttribute('colourPattern', 'colourPattern', 0, 1);
				$this->addAttribute('condition', 'condition', 0, 1);
				$this->addAttribute('radarConspicuous', 'radarConspicuous', 0, 1);
				$this->addAttribute('visuallyConspicuous', 'visuallyConspicuous', 0, 1);
				$this->addAttribute('elevation', 'elevation', 0, 1);
				$this->addAttribute('function', 'function', 0, MAX_OCCUR);
				$this->addAttribute('height', 'height', 0, MAX_OCCUR);
				$this->addAttribute('natureOfConstruction', 'natureOfConstruction', 0, MAX_OCCUR);
				$this->addAttribute('objectName', 'objectName', 0, 1);
				$this->addAttribute('objectNameInNationalLanguage', 'objectNameInNationalLanguage', 0, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('verticalUncertainty', 'verticalUncertainty', 0, 1);
				$this->addAttribute('verticalLength', 'verticalLength', 0, 1);
				$this->addAttribute('verticalDatum', 'verticalDatum', 0, 1);
				$this->addAttribute('mannedStructure', 'mannedStructure', 0, 1);
				$this->addAttribute('aidAvailabilityCategory', 'aidAvailabilityCategory', 1, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType LightFloat
		*
		* A boat-like structure used instead of a light buoy in waters where strong streams or currents are experienced, or when a greater elevation than that of a light buoy is necessary.
		* 
		* 
		* @property colour[1..*] colour |Defined in LightFloat
		* @property colourPattern[0..1] colourPattern |Defined in LightFloat
		* @property radarConspicuous[0..1] radarConspicuous |Defined in LightFloat
		* @property visuallyConspicuous[0..1] visuallyConspicuous |Defined in LightFloat
		* @property horizontalLength[0..1] horizontalLength |Defined in LightFloat
		* @property horizontalWidth[0..1] horizontalWidth |Defined in LightFloat
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in LightFloat
		* @property objectName[0..1] objectName |Defined in LightFloat
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in LightFloat
		* @property status[0..*] status |Defined in LightFloat
		* @property verticalLength[0..1] verticalLength |Defined in LightFloat
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in LightFloat
		* @property mannedStructure[0..1] mannedStructure |Defined in LightFloat
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in LightFloat
		* @property idcode[1..1] idcode |Defined in LightFloat
		* @property dateEnd[0..1] dateEnd |Defined in LightFloat
		* @property dateStart[0..1] dateStart |Defined in LightFloat
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in LightFloat
		* @property periodicDateStart[0..1] periodicDateStart |Defined in LightFloat
		* @property information[0..*] information |Defined in LightFloat
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in LightFloat
		* @property textualDescription[0..1] textualDescription |Defined in LightFloat
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in LightFloat
		* @property scaleMinimum[0..1] scaleMinimum |Defined in LightFloat
		* @property sourceDate[0..1] sourceDate |Defined in LightFloat
		* @property sourceIndication[0..1] sourceIndication |Defined in LightFloat
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in LightFloat
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in LightFloat
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in LightFloat
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in LightFloat
		* @property installationDate[0..1] installationDate |Defined in LightFloat
		*/
		 class LightFloat extends AbstractFeatureType
		{
		
			/**
			* FeatureType LightFloat
			*
			* A boat-like structure used instead of a light buoy in waters where strong streams or currents are experienced, or when a greater elevation than that of a light buoy is necessary.
			* 
			* 
		* @property colour[1..*] colour |Defined in LightFloat
		* @property colourPattern[0..1] colourPattern |Defined in LightFloat
		* @property radarConspicuous[0..1] radarConspicuous |Defined in LightFloat
		* @property visuallyConspicuous[0..1] visuallyConspicuous |Defined in LightFloat
		* @property horizontalLength[0..1] horizontalLength |Defined in LightFloat
		* @property horizontalWidth[0..1] horizontalWidth |Defined in LightFloat
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in LightFloat
		* @property objectName[0..1] objectName |Defined in LightFloat
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in LightFloat
		* @property status[0..*] status |Defined in LightFloat
		* @property verticalLength[0..1] verticalLength |Defined in LightFloat
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in LightFloat
		* @property mannedStructure[0..1] mannedStructure |Defined in LightFloat
		* @property aidAvailabilityCategory[1..1] aidAvailabilityCategory |Defined in LightFloat
		* @property idcode[1..1] idcode |Defined in LightFloat
		* @property dateEnd[0..1] dateEnd |Defined in LightFloat
		* @property dateStart[0..1] dateStart |Defined in LightFloat
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in LightFloat
		* @property periodicDateStart[0..1] periodicDateStart |Defined in LightFloat
		* @property information[0..*] information |Defined in LightFloat
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in LightFloat
		* @property textualDescription[0..1] textualDescription |Defined in LightFloat
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in LightFloat
		* @property scaleMinimum[0..1] scaleMinimum |Defined in LightFloat
		* @property sourceDate[0..1] sourceDate |Defined in LightFloat
		* @property sourceIndication[0..1] sourceIndication |Defined in LightFloat
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in LightFloat
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in LightFloat
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in LightFloat
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in LightFloat
		* @property installationDate[0..1] installationDate |Defined in LightFloat
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('colour', 'colour', 1, MAX_OCCUR);
				$this->addAttribute('colourPattern', 'colourPattern', 0, 1);
				$this->addAttribute('radarConspicuous', 'radarConspicuous', 0, 1);
				$this->addAttribute('visuallyConspicuous', 'visuallyConspicuous', 0, 1);
				$this->addAttribute('horizontalLength', 'horizontalLength', 0, 1);
				$this->addAttribute('horizontalWidth', 'horizontalWidth', 0, 1);
				$this->addAttribute('natureOfConstruction', 'natureOfConstruction', 0, MAX_OCCUR);
				$this->addAttribute('objectName', 'objectName', 0, 1);
				$this->addAttribute('objectNameInNationalLanguage', 'objectNameInNationalLanguage', 0, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('verticalLength', 'verticalLength', 0, 1);
				$this->addAttribute('verticalUncertainty', 'verticalUncertainty', 0, 1);
				$this->addAttribute('mannedStructure', 'mannedStructure', 0, 1);
				$this->addAttribute('aidAvailabilityCategory', 'aidAvailabilityCategory', 1, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType Topmark
		*
		* A characteristic shape secured at the top of a buoy or beacon to aid in its identification.
		* 
		* 
		* @property colour[1..*] colour |Defined in Topmark
		* @property colourPattern[0..1] colourPattern |Defined in Topmark
		* @property height[0..1] height |Defined in Topmark
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in Topmark
		* @property status[0..*] status |Defined in Topmark
		* @property topmarkDaymarkShape[1..1] topmarkDaymarkShape |Defined in Topmark
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in Topmark
		* @property verticalLength[0..1] verticalLength |Defined in Topmark
		* @property verticalDatum[0..1] verticalDatum |Defined in Topmark
		* @property remoteMonitoringSystem[0..*] remoteMonitoringSystem |Defined in Topmark
		* @property remotlyMonitored[0..1] remotlyMonitored |Defined in Topmark
		* @property idcode[1..1] idcode |Defined in Topmark
		* @property dateEnd[0..1] dateEnd |Defined in Topmark
		* @property dateStart[0..1] dateStart |Defined in Topmark
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in Topmark
		* @property periodicDateStart[0..1] periodicDateStart |Defined in Topmark
		* @property information[0..*] information |Defined in Topmark
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in Topmark
		* @property textualDescription[0..1] textualDescription |Defined in Topmark
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in Topmark
		* @property scaleMinimum[0..1] scaleMinimum |Defined in Topmark
		* @property sourceDate[0..1] sourceDate |Defined in Topmark
		* @property sourceIndication[0..1] sourceIndication |Defined in Topmark
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in Topmark
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in Topmark
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in Topmark
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in Topmark
		* @property installationDate[0..1] installationDate |Defined in Topmark
		*/
		 class Topmark extends AbstractFeatureType
		{
		
			/**
			* FeatureType Topmark
			*
			* A characteristic shape secured at the top of a buoy or beacon to aid in its identification.
			* 
			* 
		* @property colour[1..*] colour |Defined in Topmark
		* @property colourPattern[0..1] colourPattern |Defined in Topmark
		* @property height[0..1] height |Defined in Topmark
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in Topmark
		* @property status[0..*] status |Defined in Topmark
		* @property topmarkDaymarkShape[1..1] topmarkDaymarkShape |Defined in Topmark
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in Topmark
		* @property verticalLength[0..1] verticalLength |Defined in Topmark
		* @property verticalDatum[0..1] verticalDatum |Defined in Topmark
		* @property remoteMonitoringSystem[0..*] remoteMonitoringSystem |Defined in Topmark
		* @property remotlyMonitored[0..1] remotlyMonitored |Defined in Topmark
		* @property idcode[1..1] idcode |Defined in Topmark
		* @property dateEnd[0..1] dateEnd |Defined in Topmark
		* @property dateStart[0..1] dateStart |Defined in Topmark
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in Topmark
		* @property periodicDateStart[0..1] periodicDateStart |Defined in Topmark
		* @property information[0..*] information |Defined in Topmark
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in Topmark
		* @property textualDescription[0..1] textualDescription |Defined in Topmark
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in Topmark
		* @property scaleMinimum[0..1] scaleMinimum |Defined in Topmark
		* @property sourceDate[0..1] sourceDate |Defined in Topmark
		* @property sourceIndication[0..1] sourceIndication |Defined in Topmark
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in Topmark
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in Topmark
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in Topmark
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in Topmark
		* @property installationDate[0..1] installationDate |Defined in Topmark
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('colour', 'colour', 1, MAX_OCCUR);
				$this->addAttribute('colourPattern', 'colourPattern', 0, 1);
				$this->addAttribute('height', 'height', 0, 1);
				$this->addAttribute('marksNavigationalSystemOf', 'marksNavigationalSystemOf', 0, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('topmarkDaymarkShape', 'topmarkDaymarkShape', 1, 1);
				$this->addAttribute('verticalUncertainty', 'verticalUncertainty', 0, 1);
				$this->addAttribute('verticalLength', 'verticalLength', 0, 1);
				$this->addAttribute('verticalDatum', 'verticalDatum', 0, 1);
				$this->addAttribute('remoteMonitoringSystem', 'remoteMonitoringSystem', 0, MAX_OCCUR);
				$this->addAttribute('remotlyMonitored', 'remotlyMonitored', 0, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType Light
		*
		* A luminous or lighted aid to navigation.
		* 
		* 
		* @property categoryOfLight[0..*] categoryOfLight |Defined in Light
		* @property colour[1..*] colour |Defined in Light
		* @property exhibitionConditionOfLight[0..1] exhibitionConditionOfLight |Defined in Light
		* @property height[0..1] height |Defined in Light
		* @property lightCharacteristic[1..1] lightCharacteristic |Defined in Light
		* @property lightVisibility[0..*] lightVisibility |Defined in Light
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in Light
		* @property multiplicityOfLights[0..1] multiplicityOfLights |Defined in Light
		* @property objectName[0..1] objectName |Defined in Light
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in Light
		* @property orientationValue[0..1] orientationValue |Defined in Light
		* @property sectorLimitOne[0..1] sectorLimitOne |Defined in Light
		* @property sectorLimitTwo[0..1] sectorLimitTwo |Defined in Light
		* @property signalGroup[0..1] signalGroup |Defined in Light
		* @property signalPeriod[0..1] signalPeriod |Defined in Light
		* @property status[0..*] status |Defined in Light
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in Light
		* @property verticalLength[0..1] verticalLength |Defined in Light
		* @property verticalDatum[0..1] verticalDatum |Defined in Light
		* @property typeOfLight[0..1] typeOfLight |Defined in Light
		* @property typeOfBattery[0..1] typeOfBattery |Defined in Light
		* @property valueOfGeographicalRange[0..1] valueOfGeographicalRange |Defined in Light
		* @property valueOfLuminousRange[0..1] valueOfLuminousRange |Defined in Light
		* @property remoteMonitoringSystem[0..*] remoteMonitoringSystem |Defined in Light
		* @property remotlyMonitored[0..1] remotlyMonitored |Defined in Light
		* @property idcode[1..1] idcode |Defined in Light
		* @property dateEnd[0..1] dateEnd |Defined in Light
		* @property dateStart[0..1] dateStart |Defined in Light
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in Light
		* @property periodicDateStart[0..1] periodicDateStart |Defined in Light
		* @property information[0..*] information |Defined in Light
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in Light
		* @property textualDescription[0..1] textualDescription |Defined in Light
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in Light
		* @property scaleMinimum[0..1] scaleMinimum |Defined in Light
		* @property sourceDate[0..1] sourceDate |Defined in Light
		* @property sourceIndication[0..1] sourceIndication |Defined in Light
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in Light
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in Light
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in Light
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in Light
		* @property installationDate[0..1] installationDate |Defined in Light
		*/
		 class Light extends AbstractFeatureType
		{
		
			/**
			* FeatureType Light
			*
			* A luminous or lighted aid to navigation.
			* 
			* 
		* @property categoryOfLight[0..*] categoryOfLight |Defined in Light
		* @property colour[1..*] colour |Defined in Light
		* @property exhibitionConditionOfLight[0..1] exhibitionConditionOfLight |Defined in Light
		* @property height[0..1] height |Defined in Light
		* @property lightCharacteristic[1..1] lightCharacteristic |Defined in Light
		* @property lightVisibility[0..*] lightVisibility |Defined in Light
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in Light
		* @property multiplicityOfLights[0..1] multiplicityOfLights |Defined in Light
		* @property objectName[0..1] objectName |Defined in Light
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in Light
		* @property orientationValue[0..1] orientationValue |Defined in Light
		* @property sectorLimitOne[0..1] sectorLimitOne |Defined in Light
		* @property sectorLimitTwo[0..1] sectorLimitTwo |Defined in Light
		* @property signalGroup[0..1] signalGroup |Defined in Light
		* @property signalPeriod[0..1] signalPeriod |Defined in Light
		* @property status[0..*] status |Defined in Light
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in Light
		* @property verticalLength[0..1] verticalLength |Defined in Light
		* @property verticalDatum[0..1] verticalDatum |Defined in Light
		* @property typeOfLight[0..1] typeOfLight |Defined in Light
		* @property typeOfBattery[0..1] typeOfBattery |Defined in Light
		* @property valueOfGeographicalRange[0..1] valueOfGeographicalRange |Defined in Light
		* @property valueOfLuminousRange[0..1] valueOfLuminousRange |Defined in Light
		* @property remoteMonitoringSystem[0..*] remoteMonitoringSystem |Defined in Light
		* @property remotlyMonitored[0..1] remotlyMonitored |Defined in Light
		* @property idcode[1..1] idcode |Defined in Light
		* @property dateEnd[0..1] dateEnd |Defined in Light
		* @property dateStart[0..1] dateStart |Defined in Light
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in Light
		* @property periodicDateStart[0..1] periodicDateStart |Defined in Light
		* @property information[0..*] information |Defined in Light
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in Light
		* @property textualDescription[0..1] textualDescription |Defined in Light
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in Light
		* @property scaleMinimum[0..1] scaleMinimum |Defined in Light
		* @property sourceDate[0..1] sourceDate |Defined in Light
		* @property sourceIndication[0..1] sourceIndication |Defined in Light
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in Light
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in Light
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in Light
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in Light
		* @property installationDate[0..1] installationDate |Defined in Light
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('categoryOfLight', 'categoryOfLight', 0, MAX_OCCUR);
				$this->addAttribute('colour', 'colour', 1, MAX_OCCUR);
				$this->addAttribute('exhibitionConditionOfLight', 'exhibitionConditionOfLight', 0, 1);
				$this->addAttribute('height', 'height', 0, 1);
				$this->addAttribute('lightCharacteristic', 'lightCharacteristic', 1, 1);
				$this->addAttribute('lightVisibility', 'lightVisibility', 0, MAX_OCCUR);
				$this->addAttribute('marksNavigationalSystemOf', 'marksNavigationalSystemOf', 0, 1);
				$this->addAttribute('multiplicityOfLights', 'multiplicityOfLights', 0, 1);
				$this->addAttribute('objectName', 'objectName', 0, 1);
				$this->addAttribute('objectNameInNationalLanguage', 'objectNameInNationalLanguage', 0, 1);
				$this->addAttribute('orientationValue', 'orientationValue', 0, 1);
				$this->addAttribute('sectorLimitOne', 'sectorLimitOne', 0, 1);
				$this->addAttribute('sectorLimitTwo', 'sectorLimitTwo', 0, 1);
				$this->addAttribute('signalGroup', 'signalGroup', 0, 1);
				$this->addAttribute('signalPeriod', 'signalPeriod', 0, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('verticalUncertainty', 'verticalUncertainty', 0, 1);
				$this->addAttribute('verticalLength', 'verticalLength', 0, 1);
				$this->addAttribute('verticalDatum', 'verticalDatum', 0, 1);
				$this->addAttribute('typeOfLight', 'typeOfLight', 0, 1);
				$this->addAttribute('typeOfBattery', 'typeOfBattery', 0, 1);
				$this->addAttribute('valueOfGeographicalRange', 'valueOfGeographicalRange', 0, 1);
				$this->addAttribute('valueOfLuminousRange', 'valueOfLuminousRange', 0, 1);
				$this->addAttribute('remoteMonitoringSystem', 'remoteMonitoringSystem', 0, MAX_OCCUR);
				$this->addAttribute('remotlyMonitored', 'remotlyMonitored', 0, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType FogSignal
		*
		* A warning signal transmitted by a vessel, or aid to navigation, during periods of low visibility. Also, the device producing such a signal.
		* 
		* 
		* @property categoryOfFogSignal[1..1] categoryOfFogSignal |Defined in FogSignal
		* @property signalFrequency[0..1] signalFrequency |Defined in FogSignal
		* @property signalGeneration[0..1] signalGeneration |Defined in FogSignal
		* @property signalGroup[0..1] signalGroup |Defined in FogSignal
		* @property signalPeriod[0..1] signalPeriod |Defined in FogSignal
		* @property signalSequence[0..1] signalSequence |Defined in FogSignal
		* @property status[0..*] status |Defined in FogSignal
		* @property valueOfMaximumRange[0..1] valueOfMaximumRange |Defined in FogSignal
		* @property signalOutput[0..1] signalOutput |Defined in FogSignal
		* @property typeOfBattery[0..1] typeOfBattery |Defined in FogSignal
		* @property remoteMonitoringSystem[0..*] remoteMonitoringSystem |Defined in FogSignal
		* @property remotlyMonitored[0..1] remotlyMonitored |Defined in FogSignal
		* @property idcode[1..1] idcode |Defined in FogSignal
		* @property dateEnd[0..1] dateEnd |Defined in FogSignal
		* @property dateStart[0..1] dateStart |Defined in FogSignal
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in FogSignal
		* @property periodicDateStart[0..1] periodicDateStart |Defined in FogSignal
		* @property information[0..*] information |Defined in FogSignal
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in FogSignal
		* @property textualDescription[0..1] textualDescription |Defined in FogSignal
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in FogSignal
		* @property scaleMinimum[0..1] scaleMinimum |Defined in FogSignal
		* @property sourceDate[0..1] sourceDate |Defined in FogSignal
		* @property sourceIndication[0..1] sourceIndication |Defined in FogSignal
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in FogSignal
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in FogSignal
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in FogSignal
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in FogSignal
		* @property installationDate[0..1] installationDate |Defined in FogSignal
		*/
		 class FogSignal extends AbstractFeatureType
		{
		
			/**
			* FeatureType FogSignal
			*
			* A warning signal transmitted by a vessel, or aid to navigation, during periods of low visibility. Also, the device producing such a signal.
			* 
			* 
		* @property categoryOfFogSignal[1..1] categoryOfFogSignal |Defined in FogSignal
		* @property signalFrequency[0..1] signalFrequency |Defined in FogSignal
		* @property signalGeneration[0..1] signalGeneration |Defined in FogSignal
		* @property signalGroup[0..1] signalGroup |Defined in FogSignal
		* @property signalPeriod[0..1] signalPeriod |Defined in FogSignal
		* @property signalSequence[0..1] signalSequence |Defined in FogSignal
		* @property status[0..*] status |Defined in FogSignal
		* @property valueOfMaximumRange[0..1] valueOfMaximumRange |Defined in FogSignal
		* @property signalOutput[0..1] signalOutput |Defined in FogSignal
		* @property typeOfBattery[0..1] typeOfBattery |Defined in FogSignal
		* @property remoteMonitoringSystem[0..*] remoteMonitoringSystem |Defined in FogSignal
		* @property remotlyMonitored[0..1] remotlyMonitored |Defined in FogSignal
		* @property idcode[1..1] idcode |Defined in FogSignal
		* @property dateEnd[0..1] dateEnd |Defined in FogSignal
		* @property dateStart[0..1] dateStart |Defined in FogSignal
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in FogSignal
		* @property periodicDateStart[0..1] periodicDateStart |Defined in FogSignal
		* @property information[0..*] information |Defined in FogSignal
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in FogSignal
		* @property textualDescription[0..1] textualDescription |Defined in FogSignal
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in FogSignal
		* @property scaleMinimum[0..1] scaleMinimum |Defined in FogSignal
		* @property sourceDate[0..1] sourceDate |Defined in FogSignal
		* @property sourceIndication[0..1] sourceIndication |Defined in FogSignal
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in FogSignal
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in FogSignal
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in FogSignal
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in FogSignal
		* @property installationDate[0..1] installationDate |Defined in FogSignal
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('categoryOfFogSignal', 'categoryOfFogSignal', 1, 1);
				$this->addAttribute('signalFrequency', 'signalFrequency', 0, 1);
				$this->addAttribute('signalGeneration', 'signalGeneration', 0, 1);
				$this->addAttribute('signalGroup', 'signalGroup', 0, 1);
				$this->addAttribute('signalPeriod', 'signalPeriod', 0, 1);
				$this->addAttribute('signalSequence', 'signalSequence', 0, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('valueOfMaximumRange', 'valueOfMaximumRange', 0, 1);
				$this->addAttribute('signalOutput', 'signalOutput', 0, 1);
				$this->addAttribute('typeOfBattery', 'typeOfBattery', 0, 1);
				$this->addAttribute('remoteMonitoringSystem', 'remoteMonitoringSystem', 0, MAX_OCCUR);
				$this->addAttribute('remotlyMonitored', 'remotlyMonitored', 0, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType RetroReflector
		*
		* A means of distinguishing unlighted marks at night. Retro-reflective material is secured to the mark in a particular pattern to reflect back light.
		* 
		* 
		* @property colour[0..*] colour |Defined in RetroReflector
		* @property colourPattern[0..1] colourPattern |Defined in RetroReflector
		* @property height[0..1] height |Defined in RetroReflector
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in RetroReflector
		* @property status[0..*] status |Defined in RetroReflector
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in RetroReflector
		* @property verticalDatum[0..1] verticalDatum |Defined in RetroReflector
		* @property remoteMonitoringSystem[0..*] remoteMonitoringSystem |Defined in RetroReflector
		* @property remotlyMonitored[0..1] remotlyMonitored |Defined in RetroReflector
		* @property idcode[1..1] idcode |Defined in RetroReflector
		* @property dateEnd[0..1] dateEnd |Defined in RetroReflector
		* @property dateStart[0..1] dateStart |Defined in RetroReflector
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in RetroReflector
		* @property periodicDateStart[0..1] periodicDateStart |Defined in RetroReflector
		* @property information[0..*] information |Defined in RetroReflector
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in RetroReflector
		* @property textualDescription[0..1] textualDescription |Defined in RetroReflector
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in RetroReflector
		* @property scaleMinimum[0..1] scaleMinimum |Defined in RetroReflector
		* @property sourceDate[0..1] sourceDate |Defined in RetroReflector
		* @property sourceIndication[0..1] sourceIndication |Defined in RetroReflector
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in RetroReflector
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in RetroReflector
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in RetroReflector
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in RetroReflector
		* @property installationDate[0..1] installationDate |Defined in RetroReflector
		*/
		 class RetroReflector extends AbstractFeatureType
		{
		
			/**
			* FeatureType RetroReflector
			*
			* A means of distinguishing unlighted marks at night. Retro-reflective material is secured to the mark in a particular pattern to reflect back light.
			* 
			* 
		* @property colour[0..*] colour |Defined in RetroReflector
		* @property colourPattern[0..1] colourPattern |Defined in RetroReflector
		* @property height[0..1] height |Defined in RetroReflector
		* @property marksNavigationalSystemOf[0..1] marksNavigationalSystemOf |Defined in RetroReflector
		* @property status[0..*] status |Defined in RetroReflector
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in RetroReflector
		* @property verticalDatum[0..1] verticalDatum |Defined in RetroReflector
		* @property remoteMonitoringSystem[0..*] remoteMonitoringSystem |Defined in RetroReflector
		* @property remotlyMonitored[0..1] remotlyMonitored |Defined in RetroReflector
		* @property idcode[1..1] idcode |Defined in RetroReflector
		* @property dateEnd[0..1] dateEnd |Defined in RetroReflector
		* @property dateStart[0..1] dateStart |Defined in RetroReflector
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in RetroReflector
		* @property periodicDateStart[0..1] periodicDateStart |Defined in RetroReflector
		* @property information[0..*] information |Defined in RetroReflector
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in RetroReflector
		* @property textualDescription[0..1] textualDescription |Defined in RetroReflector
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in RetroReflector
		* @property scaleMinimum[0..1] scaleMinimum |Defined in RetroReflector
		* @property sourceDate[0..1] sourceDate |Defined in RetroReflector
		* @property sourceIndication[0..1] sourceIndication |Defined in RetroReflector
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in RetroReflector
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in RetroReflector
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in RetroReflector
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in RetroReflector
		* @property installationDate[0..1] installationDate |Defined in RetroReflector
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('colour', 'colour', 0, MAX_OCCUR);
				$this->addAttribute('colourPattern', 'colourPattern', 0, 1);
				$this->addAttribute('height', 'height', 0, 1);
				$this->addAttribute('marksNavigationalSystemOf', 'marksNavigationalSystemOf', 0, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('verticalUncertainty', 'verticalUncertainty', 0, 1);
				$this->addAttribute('verticalDatum', 'verticalDatum', 0, 1);
				$this->addAttribute('remoteMonitoringSystem', 'remoteMonitoringSystem', 0, MAX_OCCUR);
				$this->addAttribute('remotlyMonitored', 'remotlyMonitored', 0, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType RadarReflector
		*
		* A device capable of, or intended for, reflecting radar signals.
		* 
		* 
		* @property height[0..1] height |Defined in RadarReflector
		* @property status[0..*] status |Defined in RadarReflector
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in RadarReflector
		* @property verticalDatum[0..1] verticalDatum |Defined in RadarReflector
		* @property remoteMonitoringSystem[0..*] remoteMonitoringSystem |Defined in RadarReflector
		* @property remotlyMonitored[0..1] remotlyMonitored |Defined in RadarReflector
		* @property idcode[1..1] idcode |Defined in RadarReflector
		* @property dateEnd[0..1] dateEnd |Defined in RadarReflector
		* @property dateStart[0..1] dateStart |Defined in RadarReflector
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in RadarReflector
		* @property periodicDateStart[0..1] periodicDateStart |Defined in RadarReflector
		* @property information[0..*] information |Defined in RadarReflector
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in RadarReflector
		* @property textualDescription[0..1] textualDescription |Defined in RadarReflector
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in RadarReflector
		* @property scaleMinimum[0..1] scaleMinimum |Defined in RadarReflector
		* @property sourceDate[0..1] sourceDate |Defined in RadarReflector
		* @property sourceIndication[0..1] sourceIndication |Defined in RadarReflector
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in RadarReflector
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in RadarReflector
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in RadarReflector
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in RadarReflector
		* @property installationDate[0..1] installationDate |Defined in RadarReflector
		*/
		 class RadarReflector extends AbstractFeatureType
		{
		
			/**
			* FeatureType RadarReflector
			*
			* A device capable of, or intended for, reflecting radar signals.
			* 
			* 
		* @property height[0..1] height |Defined in RadarReflector
		* @property status[0..*] status |Defined in RadarReflector
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in RadarReflector
		* @property verticalDatum[0..1] verticalDatum |Defined in RadarReflector
		* @property remoteMonitoringSystem[0..*] remoteMonitoringSystem |Defined in RadarReflector
		* @property remotlyMonitored[0..1] remotlyMonitored |Defined in RadarReflector
		* @property idcode[1..1] idcode |Defined in RadarReflector
		* @property dateEnd[0..1] dateEnd |Defined in RadarReflector
		* @property dateStart[0..1] dateStart |Defined in RadarReflector
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in RadarReflector
		* @property periodicDateStart[0..1] periodicDateStart |Defined in RadarReflector
		* @property information[0..*] information |Defined in RadarReflector
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in RadarReflector
		* @property textualDescription[0..1] textualDescription |Defined in RadarReflector
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in RadarReflector
		* @property scaleMinimum[0..1] scaleMinimum |Defined in RadarReflector
		* @property sourceDate[0..1] sourceDate |Defined in RadarReflector
		* @property sourceIndication[0..1] sourceIndication |Defined in RadarReflector
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in RadarReflector
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in RadarReflector
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in RadarReflector
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in RadarReflector
		* @property installationDate[0..1] installationDate |Defined in RadarReflector
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('height', 'height', 0, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('verticalUncertainty', 'verticalUncertainty', 0, 1);
				$this->addAttribute('verticalDatum', 'verticalDatum', 0, 1);
				$this->addAttribute('remoteMonitoringSystem', 'remoteMonitoringSystem', 0, MAX_OCCUR);
				$this->addAttribute('remotlyMonitored', 'remotlyMonitored', 0, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType EnvironmentObservationEquipment
		*
		* 
		* 
		* 
		* @property height[0..1] height |Defined in EnvironmentObservationEquipment
		* @property status[0..*] status |Defined in EnvironmentObservationEquipment
		* @property typeOfEnvironmentObservationEquipment[1..*] typeOfEnvironmentObservationEquipment |Defined in EnvironmentObservationEquipment
		* @property typeOfBattery[0..1] typeOfBattery |Defined in EnvironmentObservationEquipment
		* @property remoteMonitoringSystem[0..*] remoteMonitoringSystem |Defined in EnvironmentObservationEquipment
		* @property remotlyMonitored[0..1] remotlyMonitored |Defined in EnvironmentObservationEquipment
		* @property idcode[1..1] idcode |Defined in EnvironmentObservationEquipment
		* @property dateEnd[0..1] dateEnd |Defined in EnvironmentObservationEquipment
		* @property dateStart[0..1] dateStart |Defined in EnvironmentObservationEquipment
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in EnvironmentObservationEquipment
		* @property periodicDateStart[0..1] periodicDateStart |Defined in EnvironmentObservationEquipment
		* @property information[0..*] information |Defined in EnvironmentObservationEquipment
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in EnvironmentObservationEquipment
		* @property textualDescription[0..1] textualDescription |Defined in EnvironmentObservationEquipment
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in EnvironmentObservationEquipment
		* @property scaleMinimum[0..1] scaleMinimum |Defined in EnvironmentObservationEquipment
		* @property sourceDate[0..1] sourceDate |Defined in EnvironmentObservationEquipment
		* @property sourceIndication[0..1] sourceIndication |Defined in EnvironmentObservationEquipment
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in EnvironmentObservationEquipment
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in EnvironmentObservationEquipment
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in EnvironmentObservationEquipment
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in EnvironmentObservationEquipment
		* @property installationDate[0..1] installationDate |Defined in EnvironmentObservationEquipment
		*/
		 class EnvironmentObservationEquipment extends AbstractFeatureType
		{
		
			/**
			* FeatureType EnvironmentObservationEquipment
			*
			* 
			* 
			* 
		* @property height[0..1] height |Defined in EnvironmentObservationEquipment
		* @property status[0..*] status |Defined in EnvironmentObservationEquipment
		* @property typeOfEnvironmentObservationEquipment[1..*] typeOfEnvironmentObservationEquipment |Defined in EnvironmentObservationEquipment
		* @property typeOfBattery[0..1] typeOfBattery |Defined in EnvironmentObservationEquipment
		* @property remoteMonitoringSystem[0..*] remoteMonitoringSystem |Defined in EnvironmentObservationEquipment
		* @property remotlyMonitored[0..1] remotlyMonitored |Defined in EnvironmentObservationEquipment
		* @property idcode[1..1] idcode |Defined in EnvironmentObservationEquipment
		* @property dateEnd[0..1] dateEnd |Defined in EnvironmentObservationEquipment
		* @property dateStart[0..1] dateStart |Defined in EnvironmentObservationEquipment
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in EnvironmentObservationEquipment
		* @property periodicDateStart[0..1] periodicDateStart |Defined in EnvironmentObservationEquipment
		* @property information[0..*] information |Defined in EnvironmentObservationEquipment
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in EnvironmentObservationEquipment
		* @property textualDescription[0..1] textualDescription |Defined in EnvironmentObservationEquipment
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in EnvironmentObservationEquipment
		* @property scaleMinimum[0..1] scaleMinimum |Defined in EnvironmentObservationEquipment
		* @property sourceDate[0..1] sourceDate |Defined in EnvironmentObservationEquipment
		* @property sourceIndication[0..1] sourceIndication |Defined in EnvironmentObservationEquipment
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in EnvironmentObservationEquipment
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in EnvironmentObservationEquipment
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in EnvironmentObservationEquipment
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in EnvironmentObservationEquipment
		* @property installationDate[0..1] installationDate |Defined in EnvironmentObservationEquipment
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('height', 'height', 0, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('typeOfEnvironmentObservationEquipment', 'typeOfEnvironmentObservationEquipment', 1, MAX_OCCUR);
				$this->addAttribute('typeOfBattery', 'typeOfBattery', 0, 1);
				$this->addAttribute('remoteMonitoringSystem', 'remoteMonitoringSystem', 0, MAX_OCCUR);
				$this->addAttribute('remotlyMonitored', 'remotlyMonitored', 0, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType Daymark
		*
		* The identifying characteristics of an aid to navigation which serve to facilitate its recognition against a daylight viewing background.
		* 
		* 
		* @property categoryOfSpecialPurposeMark[0..*] categoryOfSpecialPurposeMark |Defined in Daymark
		* @property colour[1..*] colour |Defined in Daymark
		* @property colourPattern[0..1] colourPattern |Defined in Daymark
		* @property elevation[0..1] elevation |Defined in Daymark
		* @property height[0..1] height |Defined in Daymark
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in Daymark
		* @property objectName[0..1] objectName |Defined in Daymark
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in Daymark
		* @property status[0..*] status |Defined in Daymark
		* @property topmarkDaymarkShape[1..1] topmarkDaymarkShape |Defined in Daymark
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in Daymark
		* @property verticalDatum[0..1] verticalDatum |Defined in Daymark
		* @property verticalLength[0..1] verticalLength |Defined in Daymark
		* @property remoteMonitoringSystem[0..*] remoteMonitoringSystem |Defined in Daymark
		* @property remotlyMonitored[0..1] remotlyMonitored |Defined in Daymark
		* @property idcode[1..1] idcode |Defined in Daymark
		* @property dateEnd[0..1] dateEnd |Defined in Daymark
		* @property dateStart[0..1] dateStart |Defined in Daymark
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in Daymark
		* @property periodicDateStart[0..1] periodicDateStart |Defined in Daymark
		* @property information[0..*] information |Defined in Daymark
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in Daymark
		* @property textualDescription[0..1] textualDescription |Defined in Daymark
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in Daymark
		* @property scaleMinimum[0..1] scaleMinimum |Defined in Daymark
		* @property sourceDate[0..1] sourceDate |Defined in Daymark
		* @property sourceIndication[0..1] sourceIndication |Defined in Daymark
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in Daymark
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in Daymark
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in Daymark
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in Daymark
		* @property installationDate[0..1] installationDate |Defined in Daymark
		*/
		 class Daymark extends AbstractFeatureType
		{
		
			/**
			* FeatureType Daymark
			*
			* The identifying characteristics of an aid to navigation which serve to facilitate its recognition against a daylight viewing background.
			* 
			* 
		* @property categoryOfSpecialPurposeMark[0..*] categoryOfSpecialPurposeMark |Defined in Daymark
		* @property colour[1..*] colour |Defined in Daymark
		* @property colourPattern[0..1] colourPattern |Defined in Daymark
		* @property elevation[0..1] elevation |Defined in Daymark
		* @property height[0..1] height |Defined in Daymark
		* @property natureOfConstruction[0..*] natureOfConstruction |Defined in Daymark
		* @property objectName[0..1] objectName |Defined in Daymark
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in Daymark
		* @property status[0..*] status |Defined in Daymark
		* @property topmarkDaymarkShape[1..1] topmarkDaymarkShape |Defined in Daymark
		* @property verticalUncertainty[0..1] verticalUncertainty |Defined in Daymark
		* @property verticalDatum[0..1] verticalDatum |Defined in Daymark
		* @property verticalLength[0..1] verticalLength |Defined in Daymark
		* @property remoteMonitoringSystem[0..*] remoteMonitoringSystem |Defined in Daymark
		* @property remotlyMonitored[0..1] remotlyMonitored |Defined in Daymark
		* @property idcode[1..1] idcode |Defined in Daymark
		* @property dateEnd[0..1] dateEnd |Defined in Daymark
		* @property dateStart[0..1] dateStart |Defined in Daymark
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in Daymark
		* @property periodicDateStart[0..1] periodicDateStart |Defined in Daymark
		* @property information[0..*] information |Defined in Daymark
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in Daymark
		* @property textualDescription[0..1] textualDescription |Defined in Daymark
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in Daymark
		* @property scaleMinimum[0..1] scaleMinimum |Defined in Daymark
		* @property sourceDate[0..1] sourceDate |Defined in Daymark
		* @property sourceIndication[0..1] sourceIndication |Defined in Daymark
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in Daymark
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in Daymark
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in Daymark
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in Daymark
		* @property installationDate[0..1] installationDate |Defined in Daymark
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('categoryOfSpecialPurposeMark', 'categoryOfSpecialPurposeMark', 0, MAX_OCCUR);
				$this->addAttribute('colour', 'colour', 1, MAX_OCCUR);
				$this->addAttribute('colourPattern', 'colourPattern', 0, 1);
				$this->addAttribute('elevation', 'elevation', 0, 1);
				$this->addAttribute('height', 'height', 0, 1);
				$this->addAttribute('natureOfConstruction', 'natureOfConstruction', 0, MAX_OCCUR);
				$this->addAttribute('objectName', 'objectName', 0, 1);
				$this->addAttribute('objectNameInNationalLanguage', 'objectNameInNationalLanguage', 0, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('topmarkDaymarkShape', 'topmarkDaymarkShape', 1, 1);
				$this->addAttribute('verticalUncertainty', 'verticalUncertainty', 0, 1);
				$this->addAttribute('verticalDatum', 'verticalDatum', 0, 1);
				$this->addAttribute('verticalLength', 'verticalLength', 0, 1);
				$this->addAttribute('remoteMonitoringSystem', 'remoteMonitoringSystem', 0, MAX_OCCUR);
				$this->addAttribute('remotlyMonitored', 'remotlyMonitored', 0, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType RadarTransponderBeacon
		*
		* A transponder beacon transmitting a coded signal on radar frequency, permitting an interrogating craft to determine the bearing and range of the transponder.
		* 
		* 
		* @property categoryOfRadarTransponderBeacon[1..1] categoryOfRadarTransponderBeacon |Defined in RadarTransponderBeacon
		* @property objectName[0..1] objectName |Defined in RadarTransponderBeacon
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in RadarTransponderBeacon
		* @property radarWaveLength[0..1] radarWaveLength |Defined in RadarTransponderBeacon
		* @property sectorLimitOne[0..1] sectorLimitOne |Defined in RadarTransponderBeacon
		* @property sectorLimitTwo[0..1] sectorLimitTwo |Defined in RadarTransponderBeacon
		* @property signalGroup[0..1] signalGroup |Defined in RadarTransponderBeacon
		* @property signalSequence[0..1] signalSequence |Defined in RadarTransponderBeacon
		* @property status[0..*] status |Defined in RadarTransponderBeacon
		* @property valueOfNominalRange[0..1] valueOfNominalRange |Defined in RadarTransponderBeacon
		* @property typeOfBattery[0..1] typeOfBattery |Defined in RadarTransponderBeacon
		* @property remoteMonitoringSystem[0..*] remoteMonitoringSystem |Defined in RadarTransponderBeacon
		* @property remotlyMonitored[0..1] remotlyMonitored |Defined in RadarTransponderBeacon
		* @property idcode[1..1] idcode |Defined in RadarTransponderBeacon
		* @property dateEnd[0..1] dateEnd |Defined in RadarTransponderBeacon
		* @property dateStart[0..1] dateStart |Defined in RadarTransponderBeacon
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in RadarTransponderBeacon
		* @property periodicDateStart[0..1] periodicDateStart |Defined in RadarTransponderBeacon
		* @property information[0..*] information |Defined in RadarTransponderBeacon
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in RadarTransponderBeacon
		* @property textualDescription[0..1] textualDescription |Defined in RadarTransponderBeacon
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in RadarTransponderBeacon
		* @property scaleMinimum[0..1] scaleMinimum |Defined in RadarTransponderBeacon
		* @property sourceDate[0..1] sourceDate |Defined in RadarTransponderBeacon
		* @property sourceIndication[0..1] sourceIndication |Defined in RadarTransponderBeacon
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in RadarTransponderBeacon
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in RadarTransponderBeacon
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in RadarTransponderBeacon
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in RadarTransponderBeacon
		* @property installationDate[0..1] installationDate |Defined in RadarTransponderBeacon
		*/
		 class RadarTransponderBeacon extends AbstractFeatureType
		{
		
			/**
			* FeatureType RadarTransponderBeacon
			*
			* A transponder beacon transmitting a coded signal on radar frequency, permitting an interrogating craft to determine the bearing and range of the transponder.
			* 
			* 
		* @property categoryOfRadarTransponderBeacon[1..1] categoryOfRadarTransponderBeacon |Defined in RadarTransponderBeacon
		* @property objectName[0..1] objectName |Defined in RadarTransponderBeacon
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in RadarTransponderBeacon
		* @property radarWaveLength[0..1] radarWaveLength |Defined in RadarTransponderBeacon
		* @property sectorLimitOne[0..1] sectorLimitOne |Defined in RadarTransponderBeacon
		* @property sectorLimitTwo[0..1] sectorLimitTwo |Defined in RadarTransponderBeacon
		* @property signalGroup[0..1] signalGroup |Defined in RadarTransponderBeacon
		* @property signalSequence[0..1] signalSequence |Defined in RadarTransponderBeacon
		* @property status[0..*] status |Defined in RadarTransponderBeacon
		* @property valueOfNominalRange[0..1] valueOfNominalRange |Defined in RadarTransponderBeacon
		* @property typeOfBattery[0..1] typeOfBattery |Defined in RadarTransponderBeacon
		* @property remoteMonitoringSystem[0..*] remoteMonitoringSystem |Defined in RadarTransponderBeacon
		* @property remotlyMonitored[0..1] remotlyMonitored |Defined in RadarTransponderBeacon
		* @property idcode[1..1] idcode |Defined in RadarTransponderBeacon
		* @property dateEnd[0..1] dateEnd |Defined in RadarTransponderBeacon
		* @property dateStart[0..1] dateStart |Defined in RadarTransponderBeacon
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in RadarTransponderBeacon
		* @property periodicDateStart[0..1] periodicDateStart |Defined in RadarTransponderBeacon
		* @property information[0..*] information |Defined in RadarTransponderBeacon
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in RadarTransponderBeacon
		* @property textualDescription[0..1] textualDescription |Defined in RadarTransponderBeacon
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in RadarTransponderBeacon
		* @property scaleMinimum[0..1] scaleMinimum |Defined in RadarTransponderBeacon
		* @property sourceDate[0..1] sourceDate |Defined in RadarTransponderBeacon
		* @property sourceIndication[0..1] sourceIndication |Defined in RadarTransponderBeacon
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in RadarTransponderBeacon
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in RadarTransponderBeacon
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in RadarTransponderBeacon
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in RadarTransponderBeacon
		* @property installationDate[0..1] installationDate |Defined in RadarTransponderBeacon
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('categoryOfRadarTransponderBeacon', 'categoryOfRadarTransponderBeacon', 1, 1);
				$this->addAttribute('objectName', 'objectName', 0, 1);
				$this->addAttribute('objectNameInNationalLanguage', 'objectNameInNationalLanguage', 0, 1);
				$this->addAttribute('radarWaveLength', 'radarWaveLength', 0, 1);
				$this->addAttribute('sectorLimitOne', 'sectorLimitOne', 0, 1);
				$this->addAttribute('sectorLimitTwo', 'sectorLimitTwo', 0, 1);
				$this->addAttribute('signalGroup', 'signalGroup', 0, 1);
				$this->addAttribute('signalSequence', 'signalSequence', 0, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('valueOfNominalRange', 'valueOfNominalRange', 0, 1);
				$this->addAttribute('typeOfBattery', 'typeOfBattery', 0, 1);
				$this->addAttribute('remoteMonitoringSystem', 'remoteMonitoringSystem', 0, MAX_OCCUR);
				$this->addAttribute('remotlyMonitored', 'remotlyMonitored', 0, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType RecommendedTrack
		*
		* A track recommended to all or only certain vessels.
		* 
		* 
		* @property categoryOfRecommendedTrack[1..1] categoryOfRecommendedTrack |Defined in RecommendedTrack
		* @property depthRangeMaximumValue[0..1] depthRangeMaximumValue |Defined in RecommendedTrack
		* @property depthRangeMinimumValue[0..1] depthRangeMinimumValue |Defined in RecommendedTrack
		* @property objectName[0..1] objectName |Defined in RecommendedTrack
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in RecommendedTrack
		* @property qualityOfSoundingMeasurement[0..*] qualityOfSoundingMeasurement |Defined in RecommendedTrack
		* @property soundingUncertainty[0..1] soundingUncertainty |Defined in RecommendedTrack
		* @property status[0..*] status |Defined in RecommendedTrack
		* @property techniqueOfSoundingMeasurement[0..*] techniqueOfSoundingMeasurement |Defined in RecommendedTrack
		* @property trafficFlow[0..1] trafficFlow |Defined in RecommendedTrack
		* @property verticalDatum[0..1] verticalDatum |Defined in RecommendedTrack
		* @property idcode[1..1] idcode |Defined in RecommendedTrack
		* @property dateEnd[0..1] dateEnd |Defined in RecommendedTrack
		* @property dateStart[0..1] dateStart |Defined in RecommendedTrack
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in RecommendedTrack
		* @property periodicDateStart[0..1] periodicDateStart |Defined in RecommendedTrack
		* @property information[0..*] information |Defined in RecommendedTrack
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in RecommendedTrack
		* @property textualDescription[0..1] textualDescription |Defined in RecommendedTrack
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in RecommendedTrack
		* @property scaleMinimum[0..1] scaleMinimum |Defined in RecommendedTrack
		* @property sourceDate[0..1] sourceDate |Defined in RecommendedTrack
		* @property sourceIndication[0..1] sourceIndication |Defined in RecommendedTrack
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in RecommendedTrack
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in RecommendedTrack
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in RecommendedTrack
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in RecommendedTrack
		* @property installationDate[0..1] installationDate |Defined in RecommendedTrack
		*/
		 class RecommendedTrack extends AbstractFeatureType
		{
		
			/**
			* FeatureType RecommendedTrack
			*
			* A track recommended to all or only certain vessels.
			* 
			* 
		* @property categoryOfRecommendedTrack[1..1] categoryOfRecommendedTrack |Defined in RecommendedTrack
		* @property depthRangeMaximumValue[0..1] depthRangeMaximumValue |Defined in RecommendedTrack
		* @property depthRangeMinimumValue[0..1] depthRangeMinimumValue |Defined in RecommendedTrack
		* @property objectName[0..1] objectName |Defined in RecommendedTrack
		* @property objectNameInNationalLanguage[0..1] objectNameInNationalLanguage |Defined in RecommendedTrack
		* @property qualityOfSoundingMeasurement[0..*] qualityOfSoundingMeasurement |Defined in RecommendedTrack
		* @property soundingUncertainty[0..1] soundingUncertainty |Defined in RecommendedTrack
		* @property status[0..*] status |Defined in RecommendedTrack
		* @property techniqueOfSoundingMeasurement[0..*] techniqueOfSoundingMeasurement |Defined in RecommendedTrack
		* @property trafficFlow[0..1] trafficFlow |Defined in RecommendedTrack
		* @property verticalDatum[0..1] verticalDatum |Defined in RecommendedTrack
		* @property idcode[1..1] idcode |Defined in RecommendedTrack
		* @property dateEnd[0..1] dateEnd |Defined in RecommendedTrack
		* @property dateStart[0..1] dateStart |Defined in RecommendedTrack
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in RecommendedTrack
		* @property periodicDateStart[0..1] periodicDateStart |Defined in RecommendedTrack
		* @property information[0..*] information |Defined in RecommendedTrack
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in RecommendedTrack
		* @property textualDescription[0..1] textualDescription |Defined in RecommendedTrack
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in RecommendedTrack
		* @property scaleMinimum[0..1] scaleMinimum |Defined in RecommendedTrack
		* @property sourceDate[0..1] sourceDate |Defined in RecommendedTrack
		* @property sourceIndication[0..1] sourceIndication |Defined in RecommendedTrack
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in RecommendedTrack
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in RecommendedTrack
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in RecommendedTrack
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in RecommendedTrack
		* @property installationDate[0..1] installationDate |Defined in RecommendedTrack
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('categoryOfRecommendedTrack', 'categoryOfRecommendedTrack', 1, 1);
				$this->addAttribute('depthRangeMaximumValue', 'depthRangeMaximumValue', 0, 1);
				$this->addAttribute('depthRangeMinimumValue', 'depthRangeMinimumValue', 0, 1);
				$this->addAttribute('objectName', 'objectName', 0, 1);
				$this->addAttribute('objectNameInNationalLanguage', 'objectNameInNationalLanguage', 0, 1);
				$this->addAttribute('qualityOfSoundingMeasurement', 'qualityOfSoundingMeasurement', 0, MAX_OCCUR);
				$this->addAttribute('soundingUncertainty', 'soundingUncertainty', 0, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('techniqueOfSoundingMeasurement', 'techniqueOfSoundingMeasurement', 0, MAX_OCCUR);
				$this->addAttribute('trafficFlow', 'trafficFlow', 0, 1);
				$this->addAttribute('verticalDatum', 'verticalDatum', 0, 1);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType NavigationLine
		*
		* A navigation line is a straight line extending towards an area of navigational interest and generally generated by two navigational aids or one navigational aid and a bearing.
		* 
		* 
		* @property categoryOfNavigationLine[1..1] categoryOfNavigationLine |Defined in NavigationLine
		* @property orientationValue[1..1] orientationValue |Defined in NavigationLine
		* @property status[0..*] status |Defined in NavigationLine
		* @property idcode[1..1] idcode |Defined in NavigationLine
		* @property dateEnd[0..1] dateEnd |Defined in NavigationLine
		* @property dateStart[0..1] dateStart |Defined in NavigationLine
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in NavigationLine
		* @property periodicDateStart[0..1] periodicDateStart |Defined in NavigationLine
		* @property information[0..*] information |Defined in NavigationLine
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in NavigationLine
		* @property textualDescription[0..1] textualDescription |Defined in NavigationLine
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in NavigationLine
		* @property scaleMinimum[0..1] scaleMinimum |Defined in NavigationLine
		* @property sourceDate[0..1] sourceDate |Defined in NavigationLine
		* @property sourceIndication[0..1] sourceIndication |Defined in NavigationLine
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in NavigationLine
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in NavigationLine
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in NavigationLine
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in NavigationLine
		* @property installationDate[0..1] installationDate |Defined in NavigationLine
		*/
		 class NavigationLine extends AbstractFeatureType
		{
		
			/**
			* FeatureType NavigationLine
			*
			* A navigation line is a straight line extending towards an area of navigational interest and generally generated by two navigational aids or one navigational aid and a bearing.
			* 
			* 
		* @property categoryOfNavigationLine[1..1] categoryOfNavigationLine |Defined in NavigationLine
		* @property orientationValue[1..1] orientationValue |Defined in NavigationLine
		* @property status[0..*] status |Defined in NavigationLine
		* @property idcode[1..1] idcode |Defined in NavigationLine
		* @property dateEnd[0..1] dateEnd |Defined in NavigationLine
		* @property dateStart[0..1] dateStart |Defined in NavigationLine
		* @property periodicDateEnd[0..1] periodicDateEnd |Defined in NavigationLine
		* @property periodicDateStart[0..1] periodicDateStart |Defined in NavigationLine
		* @property information[0..*] information |Defined in NavigationLine
		* @property informationInNationalLanguage[0..*] informationInNationalLanguage |Defined in NavigationLine
		* @property textualDescription[0..1] textualDescription |Defined in NavigationLine
		* @property textualDescriptionInNationalLanguage[0..1] textualDescriptionInNationalLanguage |Defined in NavigationLine
		* @property scaleMinimum[0..1] scaleMinimum |Defined in NavigationLine
		* @property sourceDate[0..1] sourceDate |Defined in NavigationLine
		* @property sourceIndication[0..1] sourceIndication |Defined in NavigationLine
		* @property pictorialRepresentation[0..1] pictorialRepresentation |Defined in NavigationLine
		* @property inspectionFrequency[0..1] inspectionFrequency |Defined in NavigationLine
		* @property inspectionRequirements[0..1] inspectionRequirements |Defined in NavigationLine
		* @property atoNMaintenanceRecord[0..1] atoNMaintenanceRecord |Defined in NavigationLine
		* @property installationDate[0..1] installationDate |Defined in NavigationLine
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('categoryOfNavigationLine', 'categoryOfNavigationLine', 1, 1);
				$this->addAttribute('orientationValue', 'orientationValue', 1, 1);
				$this->addAttribute('status', 'status', 0, MAX_OCCUR);
				$this->addAttribute('idcode', 'idcode', 1, 1);
				$this->addAttribute('dateEnd', 'dateEnd', 0, 1);
				$this->addAttribute('dateStart', 'dateStart', 0, 1);
				$this->addAttribute('periodicDateEnd', 'periodicDateEnd', 0, 1);
				$this->addAttribute('periodicDateStart', 'periodicDateStart', 0, 1);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('informationInNationalLanguage', 'informationInNationalLanguage', 0, MAX_OCCUR);
				$this->addAttribute('textualDescription', 'textualDescription', 0, 1);
				$this->addAttribute('textualDescriptionInNationalLanguage', 'textualDescriptionInNationalLanguage', 0, 1);
				$this->addAttribute('scaleMinimum', 'scaleMinimum', 0, 1);
				$this->addAttribute('sourceDate', 'sourceDate', 0, 1);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('pictorialRepresentation', 'pictorialRepresentation', 0, 1);
				$this->addAttribute('inspectionFrequency', 'inspectionFrequency', 0, 1);
				$this->addAttribute('inspectionRequirements', 'inspectionRequirements', 0, 1);
				$this->addAttribute('atoNMaintenanceRecord', 'atoNMaintenanceRecord', 0, 1);
				$this->addAttribute('installationDate', 'installationDate', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType Aggregation
		*
		* Used to identify an aggregation of two or more objects. This aggregation may be named.
		* 
		* 
		* @property categoryOfAggregation[1..1] categoryOfAggregation |Defined in Aggregation
		*/
		 class Aggregation extends AbstractFeatureType
		{
		
			/**
			* FeatureType Aggregation
			*
			* Used to identify an aggregation of two or more objects. This aggregation may be named.
			* 
			* 
		* @property categoryOfAggregation[1..1] categoryOfAggregation |Defined in Aggregation
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('categoryOfAggregation', 'categoryOfAggregation', 1, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType Association
		*
		* Used to identify an association between two or more objects. The association may be named.
		* 
		* 
		* @property categoryOfAssociation[1..1] categoryOfAssociation |Defined in Association
		*/
		 class Association extends AbstractFeatureType
		{
		
			/**
			* FeatureType Association
			*
			* Used to identify an association between two or more objects. The association may be named.
			* 
			* 
		* @property categoryOfAssociation[1..1] categoryOfAssociation |Defined in Association
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('categoryOfAssociation', 'categoryOfAssociation', 1, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
	
	
	//********************************* INFORMATION TYPES ***********************************************************
	
	
	//********************************* ROLES ***********************************************************
	
	
	//********************************* FeatureAssociations ***********************************************************
	
	
	
	//********************************* InformationAssociations ***********************************************************
	?>