<?php
	/**
	* S100 PS Features as PHP, generated by FIHO-S100-TOOLS-FC2PHP
	* S-128 ENCs
	*/
	
	//********************************* SIMPLE ATTRIBUTES ***********************************************************
	
			/**
			* Enumeration textPlaceCorner
			*
			* 
			* @property int value
			*/
			class textPlaceCorner extends EnumerationType
			{
				/**
				* Enumeration textPlaceCorner
				*
				* 
				* @param int value
				* 
				* 1=top
				* 2=bottom
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "top");
					$this->addValue(2, "bottom");
					parent::__construct($value);
				}
			}
	     
			/**
			* Enumeration additionalMark
			*
			* Shape and position of an additional board on a notice mark
			* @property int value
			*/
			class additionalMark extends EnumerationType
			{
				/**
				* Enumeration additionalMark
				*
				* Shape and position of an additional board on a notice mark
				* @param int value
				* 
				* 1=top (board)
				* 2=bottom (board)
				* 3=right (triangle to the right)
				* 4=left (triangle to the left)
				* 5=bottom (triangle to the bottom)
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "top (board)");
					$this->addValue(2, "bottom (board)");
					$this->addValue(3, "right (triangle to the right)");
					$this->addValue(4, "left (triangle to the left)");
					$this->addValue(5, "bottom (triangle to the bottom)");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute administrativeDivision
			*
			* administrativeDivision
			* @property text value
			*/
			class administrativeDivision extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute applicationProfile
			*
			* applicationProfile
			* @property text value
			*/
			class applicationProfile extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute areaOfFog
			*
			* An area where horizontal visibility is degraded by the suspension of very small, usually microscopic water droplets in the air.
			* @property boolean value
			*/
			class areaOfFog extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_boolean($value);
				}
			}
         
			/**
			* SimpleAttribute areaOfGales
			*
			* Area where winds are Beaufort 8 or higher.
			* @property boolean value
			*/
			class areaOfGales extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_boolean($value);
				}
			}
         
			/**
			* Enumeration categoryOfAuthority
			*
			* The type of person, government agency or organisation, corporation, or private or publicly owned company entrusted or invested with powers of managing or controlling access or activity in an area.
			* @property int value
			*/
			class categoryOfAuthority extends EnumerationType
			{
				/**
				* Enumeration categoryOfAuthority
				*
				* The type of person, government agency or organisation, corporation, or private or publicly owned company entrusted or invested with powers of managing or controlling access or activity in an area.
				* @param int value
				* 
				* 2=border control
				* 3=police
				* 4=port
				* 5=immigration
				* 6=health
				* 7=coast guard
				* 8=agricultural
				* 9=military
				* 10=private company
				* 11=maritime police
				* 12=environmental
				* 13=fishery
				* 14=finance
				* 15=maritime
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(2, "border control");
					$this->addValue(3, "police");
					$this->addValue(4, "port");
					$this->addValue(5, "immigration");
					$this->addValue(6, "health");
					$this->addValue(7, "coast guard");
					$this->addValue(8, "agricultural");
					$this->addValue(9, "military");
					$this->addValue(10, "private company");
					$this->addValue(11, "maritime police");
					$this->addValue(12, "environmental");
					$this->addValue(13, "fishery");
					$this->addValue(14, "finance");
					$this->addValue(15, "maritime");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute cityName
			*
			* cityName
			* @property text value
			*/
			class cityName extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute contactInstructions
			*
			* Instructions provided on how to contact a particular person, organisation or service.
			* @property text value
			*/
			class contactInstructions extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute deliveryPoint
			*
			* deliveryPoint
			* @property text value
			*/
			class deliveryPoint extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute displayName
			*
			* displayName
			* @property boolean value
			*/
			class displayName extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_boolean($value);
				}
			}
         
			/**
			* SimpleAttribute language
			*
			* The method of human communication, either spoken or written, consisting of the use of words in a structured and conventional way.
			* @property text value
			*/
			class language extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute linkage
			*
			* location (address) for on-line access using a URL/URI address or similar addressing scheme. (Adapted from ISO 19115:2014.)
			* @property text value
			*/
			class linkage extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute name
			*
			* name
			* @property text value
			*/
			class name extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute nameOfResource
			*
			* nameOfResource
			* @property text value
			*/
			class nameOfResource extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* Enumeration onlineFunction
			*
			* online function
			* @property int value
			*/
			class onlineFunction extends EnumerationType
			{
				/**
				* Enumeration onlineFunction
				*
				* online function
				* @param int value
				* 
				* 1=download
				* 3=offline access
				* 4=order
				* 5=search
				* 6=complete metadata
				* 7=browse graphic
				* 8=upload
				* 9=email service
				* 10=browsing
				* 11=file access
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "download");
					$this->addValue(3, "offline access");
					$this->addValue(4, "order");
					$this->addValue(5, "search");
					$this->addValue(6, "complete metadata");
					$this->addValue(7, "browse graphic");
					$this->addValue(8, "upload");
					$this->addValue(9, "email service");
					$this->addValue(10, "browsing");
					$this->addValue(11, "file access");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute onlineResourceDescription
			*
			* detailed text description of what the online resource is/does (ISO 19115)
			* @property text value
			*/
			class onlineResourceDescription extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute postalCode
			*
			* postalCode
			* @property text value
			*/
			class postalCode extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute producingCountry
			*
			* The country responsible for data production.
			* @property text value
			*/
			class producingCountry extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute protocol
			*
			* protocol
			* @property text value
			*/
			class protocol extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute protocolRequest
			*
			* protocolRequest
			* @property text value
			*/
			class protocolRequest extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute reportedDate
			*
			* The date that the item was observed, done, or investigated
			* @property date value
			*/
			class reportedDate extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_date($value);
				}
			}
         
			/**
			* SimpleAttribute source
			*
			* source
			* @property text value
			*/
			class source extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* Enumeration sourceType
			*
			* type of the source
			* @property int value
			*/
			class sourceType extends EnumerationType
			{
				/**
				* Enumeration sourceType
				*
				* type of the source
				* @param int value
				* 
				* 1=international law
				* 2=publication issued by international organisation
				* 3=national law or regulation
				* 4=publication issued by national administration
				* 5=local law or regulation
				* 6=publication issued by local administration
				* 7=mariner report, confirmed
				* 8=mariner report, not confirmed
				* 9=industry publications and reports
				* 10=remotely sensed images
				* 11=photographs
				* 12=products issued by HO services
				* 13=news media
				* 14=traffic data
				*/
				 public function __construct($value = null)
				{
					
					$this->addValue(1, "international law");
					$this->addValue(2, "publication issued by international organisation");
					$this->addValue(3, "national law or regulation");
					$this->addValue(4, "publication issued by national administration");
					$this->addValue(5, "local law or regulation");
					$this->addValue(6, "publication issued by local administration");
					$this->addValue(7, "mariner report, confirmed");
					$this->addValue(8, "mariner report, not confirmed");
					$this->addValue(9, "industry publications and reports");
					$this->addValue(10, "remotely sensed images");
					$this->addValue(11, "photographs");
					$this->addValue(12, "products issued by HO services");
					$this->addValue(13, "news media");
					$this->addValue(14, "traffic data");
					parent::__construct($value);
				}
			}
	     
			/**
			* SimpleAttribute telecommunicationIdentifier
			*
			* telecommunicationIdentifier
			* @property text value
			*/
			class telecommunicationIdentifier extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute text
			*
			* text
			* @property text value
			*/
			class text extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_text($value);
				}
			}
         
			/**
			* SimpleAttribute valueOfDewPointTemperature
			*
			* Temperature value to which a volume of air must be cooled at constant pressure and constant moisture in order to reach saturation; any further cooling causes condensation.
			* @property real value
			*/
			class valueOfDewPointTemperature extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_real($value);
				}
			}
         
			/**
			* SimpleAttribute telecommunicationService
			*
			* Methods to communicate between involved parties over a distance.
			* @property  value
			*/
			class telecommunicationService extends SimpleAttributeType
			{
				public function validate($value)
				{
					return is_($value);
				}
			}
         
	
	//********************************* COMPLEX ATTRIBUTES ***********************************************************
	
		/**
		* ComplexAttribute dewPointTemperature
		*
		* Indication of the dew-point value and its accuracy
		* 
		* @property [0..1]  
		* @property valueOfDewPointTemperature[1..1]  valueOfDewPointTemperature
		*/
		class dewPointTemperature extends ComplexAttributeType
		{
			/**
			* ComplexAttribute dewPointTemperature
			*
			* Indication of the dew-point value and its accuracy
			*
			* @property [0..1]  
			* @property valueOfDewPointTemperature[1..1]  valueOfDewPointTemperature Temperature value to which a volume of air must be cooled at constant pressure and constant moisture in order to reach saturation; any further cooling causes condensation.
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('', '', 0, 1);
				$this->addAttribute('valueOfDewPointTemperature', 'valueOfDewPointTemperature', 1, 1);
				
			}
		}
	
		/**
		* ComplexAttribute featureName
		*
		* featureName
		* 
		* @property displayName[0.000000..1.000000]  displayName
		* @property language[0.000000..1.000000]  language
		* @property name[1.000000..1.000000]  name
		*/
		class featureName extends ComplexAttributeType
		{
			/**
			* ComplexAttribute featureName
			*
			* featureName
			*
			* @property displayName[0.000000..1.000000]  displayName displayName
			* @property language[0.000000..1.000000]  language The method of human communication, either spoken or written, consisting of the use of words in a structured and conventional way.
			* @property name[1.000000..1.000000]  name name
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('displayName', 'displayName', 0.000000, 1.000000);
				$this->addAttribute('language', 'language', 0.000000, 1.000000);
				$this->addAttribute('name', 'name', 1.000000, 1.000000);
				
			}
		}
	
		/**
		* ComplexAttribute information
		*
		* information
		* 
		* @property language[0.000000..1.000000]  language
		* @property text[0.000000..*]  text
		* @property fileLocator[0.000000..1.000000]  fileLocator
		* @property fileReference[0.000000..1.000000]  fileReference
		* @property headline[0.000000..1.000000]  headline
		*/
		class information extends ComplexAttributeType
		{
			/**
			* ComplexAttribute information
			*
			* information
			*
			* @property language[0.000000..1.000000]  language The method of human communication, either spoken or written, consisting of the use of words in a structured and conventional way.
			* @property text[0.000000..*]  text text
			* @property fileLocator[0.000000..1.000000]  fileLocator
			* @property fileReference[0.000000..1.000000]  fileReference
			* @property headline[0.000000..1.000000]  headline
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('language', 'language', 0.000000, 1.000000);
				$this->addAttribute('text', 'text', 0.000000, MAX_OCCUR);
				$this->addAttribute('fileLocator', 'fileLocator', 0.000000, 1.000000);
				$this->addAttribute('fileReference', 'fileReference', 0.000000, 1.000000);
				$this->addAttribute('headline', 'headline', 0.000000, 1.000000);
				
			}
		}
	
		/**
		* ComplexAttribute onlineResource
		*
		* onlineResource
		* 
		* @property linkage[1..1]  linkage
		* @property protocol[0.000000..1.000000]  protocol
		* @property applicationProfile[0.000000..1.000000]  applicationProfile
		* @property nameOfResource[0.000000..1.000000]  nameOfResource
		* @property onlineResourceDescription[0..0]  onlineResourceDescription
		* @property onlineFunction[0..0]  onlineFunction
		* @property protocolRequest[0.000000..1.000000]  protocolRequest
		* @property onlineDescription[0.000000..1.000000]  onlineDescription
		*/
		class onlineResource extends ComplexAttributeType
		{
			/**
			* ComplexAttribute onlineResource
			*
			* onlineResource
			*
			* @property linkage[1..1]  linkage location (address) for on-line access using a URL/URI address or similar addressing scheme. (Adapted from ISO 19115:2014.)
			* @property protocol[0.000000..1.000000]  protocol protocol
			* @property applicationProfile[0.000000..1.000000]  applicationProfile applicationProfile
			* @property nameOfResource[0.000000..1.000000]  nameOfResource nameOfResource
			* @property onlineResourceDescription[0..0]  onlineResourceDescription detailed text description of what the online resource is/does (ISO 19115)
			* @property onlineFunction[0..0]  onlineFunction online function
			* @property protocolRequest[0.000000..1.000000]  protocolRequest protocolRequest
			* @property onlineDescription[0.000000..1.000000]  onlineDescription
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('linkage', 'linkage', 1, 1);
				$this->addAttribute('protocol', 'protocol', 0.000000, 1.000000);
				$this->addAttribute('applicationProfile', 'applicationProfile', 0.000000, 1.000000);
				$this->addAttribute('nameOfResource', 'nameOfResource', 0.000000, 1.000000);
				$this->addAttribute('onlineResourceDescription', 'onlineResourceDescription', 0, 0);
				$this->addAttribute('onlineFunction', 'onlineFunction', 0, 0);
				$this->addAttribute('protocolRequest', 'protocolRequest', 0.000000, 1.000000);
				$this->addAttribute('onlineDescription', 'onlineDescription', 0.000000, 1.000000);
				
			}
		}
	
		/**
		* ComplexAttribute sourceIndication
		*
		* sourceIndication
		* 
		* @property categoryOfAuthority[0.000000..1.000000]  categoryOfAuthority
		* @property producingCountry[0..0]  producingCountry
		* @property featureName[0.000000..*]  featureName
		* @property reportedDate[0..0]  reportedDate
		* @property source[0.000000..1.000000]  source
		* @property sourceType[0..0]  sourceType
		* @property country[0.000000..1.000000]  country
		*/
		class sourceIndication extends ComplexAttributeType
		{
			/**
			* ComplexAttribute sourceIndication
			*
			* sourceIndication
			*
			* @property categoryOfAuthority[0.000000..1.000000]  categoryOfAuthority The type of person, government agency or organisation, corporation, or private or publicly owned company entrusted or invested with powers of managing or controlling access or activity in an area.
			* @property producingCountry[0..0]  producingCountry The country responsible for data production.
			* @property featureName[0.000000..*]  featureName featureName
			* @property reportedDate[0..0]  reportedDate The date that the item was observed, done, or investigated
			* @property source[0.000000..1.000000]  source source
			* @property sourceType[0..0]  sourceType type of the source
			* @property country[0.000000..1.000000]  country
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('categoryOfAuthority', 'categoryOfAuthority', 0.000000, 1.000000);
				$this->addAttribute('producingCountry', 'producingCountry', 0, 0);
				$this->addAttribute('featureName', 'featureName', 0.000000, MAX_OCCUR);
				$this->addAttribute('reportedDate', 'reportedDate', 0, 0);
				$this->addAttribute('source', 'source', 0.000000, 1.000000);
				$this->addAttribute('sourceType', 'sourceType', 0, 0);
				$this->addAttribute('country', 'country', 0.000000, 1.000000);
				
			}
		}
	
		/**
		* ComplexAttribute telecommunications
		*
		* telecommunications
		* 
		* @property contactInstructions[0..1]  contactInstructions
		* @property telecommunicationIdentifier[1.000000..1.000000]  telecommunicationIdentifier
		* @property telecommunicationService[0..1]  telecommunicationService
		* @property categoryOfCommPref[0.000000..1.000000]  categoryOfCommPref
		* @property contactinstructions[0.000000..1.000000]  contactinstructions
		* @property telcomCarrier[0.000000..1.000000]  telcomCarrier
		* @property telecommnunicationService[0.000000..*]  telecommnunicationService
		* @property scheduleByDoW[0.000000..1.000000]  scheduleByDoW
		*/
		class telecommunications extends ComplexAttributeType
		{
			/**
			* ComplexAttribute telecommunications
			*
			* telecommunications
			*
			* @property contactInstructions[0..1]  contactInstructions Instructions provided on how to contact a particular person, organisation or service.
			* @property telecommunicationIdentifier[1.000000..1.000000]  telecommunicationIdentifier telecommunicationIdentifier
			* @property telecommunicationService[0..1]  telecommunicationService Methods to communicate between involved parties over a distance.
			* @property categoryOfCommPref[0.000000..1.000000]  categoryOfCommPref
			* @property contactinstructions[0.000000..1.000000]  contactinstructions
			* @property telcomCarrier[0.000000..1.000000]  telcomCarrier
			* @property telecommnunicationService[0.000000..*]  telecommnunicationService
			* @property scheduleByDoW[0.000000..1.000000]  scheduleByDoW
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('contactInstructions', 'contactInstructions', 0, 1);
				$this->addAttribute('telecommunicationIdentifier', 'telecommunicationIdentifier', 1.000000, 1.000000);
				$this->addAttribute('telecommunicationService', 'telecommunicationService', 0, 1);
				$this->addAttribute('categoryOfCommPref', 'categoryOfCommPref', 0.000000, 1.000000);
				$this->addAttribute('contactinstructions', 'contactinstructions', 0.000000, 1.000000);
				$this->addAttribute('telcomCarrier', 'telcomCarrier', 0.000000, 1.000000);
				$this->addAttribute('telecommnunicationService', 'telecommnunicationService', 0.000000, MAX_OCCUR);
				$this->addAttribute('scheduleByDoW', 'scheduleByDoW', 0.000000, 1.000000);
				
			}
		}
	
		/**
		* ComplexAttribute contactAddress
		*
		* contactAddress
		* 
		* @property deliveryPoint[0.000000..*]  deliveryPoint
		* @property cityName[1.000000..1.000000]  cityName
		* @property administrativeDivision[0.000000..1.000000]  administrativeDivision
		* @property [0..0]  
		* @property postalCode[0.000000..1.000000]  postalCode
		* @property country[1.000000..1.000000]  country
		*/
		class contactAddress extends ComplexAttributeType
		{
			/**
			* ComplexAttribute contactAddress
			*
			* contactAddress
			*
			* @property deliveryPoint[0.000000..*]  deliveryPoint deliveryPoint
			* @property cityName[1.000000..1.000000]  cityName cityName
			* @property administrativeDivision[0.000000..1.000000]  administrativeDivision administrativeDivision
			* @property [0..0]  
			* @property postalCode[0.000000..1.000000]  postalCode postalCode
			* @property country[1.000000..1.000000]  country
			*/
			public function __construct()
			{
				parent::__construct();
				
				$this->addAttribute('deliveryPoint', 'deliveryPoint', 0.000000, MAX_OCCUR);
				$this->addAttribute('cityName', 'cityName', 1.000000, 1.000000);
				$this->addAttribute('administrativeDivision', 'administrativeDivision', 0.000000, 1.000000);
				$this->addAttribute('', '', 0, 0);
				$this->addAttribute('postalCode', 'postalCode', 0.000000, 1.000000);
				$this->addAttribute('country', 'country', 1.000000, 1.000000);
				
			}
		}
	

	
	//********************************* FEATURE TYPES ***********************************************************
	
		/**
		* FeatureType CatalogueOfNauticalProduct
		*
		* CatalogueOfNauticalProduct
		* 
		* 
		* @property editionNumber[1..1] editionNumber |Defined in CatalogueOfNauticalProduct
		* @property issueDate[1..1] issueDate |Defined in CatalogueOfNauticalProduct
		* @property featureName[1..*] featureName |Defined in CatalogueOfNauticalProduct
		* @property graphic[0..*] graphic |Defined in CatalogueOfNauticalProduct
		* @property CatalogueElements[1..*] CatalogueElementsAssociation_hasProducts_CatalogueElements |Defined in CatalogueOfNauticalProduct
		* @property ContactDetails[0..1] CatalogueContanctsAssociation_catalogueContact_ContactDetails |Defined in CatalogueOfNauticalProduct
		*/
		 class CatalogueOfNauticalProduct extends AbstractFeatureType
		{
		
			/**
			* FeatureType CatalogueOfNauticalProduct
			*
			* CatalogueOfNauticalProduct
			* 
			* 
		* @property editionNumber[1..1] editionNumber |Defined in CatalogueOfNauticalProduct
		* @property issueDate[1..1] issueDate |Defined in CatalogueOfNauticalProduct
		* @property featureName[1..*] featureName |Defined in CatalogueOfNauticalProduct
		* @property graphic[0..*] graphic |Defined in CatalogueOfNauticalProduct
		* @property CatalogueElements[1..*] CatalogueElementsAssociation_hasProducts_CatalogueElements |Defined in CatalogueOfNauticalProduct
		* @property ContactDetails[0..1] CatalogueContanctsAssociation_catalogueContact_ContactDetails |Defined in CatalogueOfNauticalProduct
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('editionNumber', 'editionNumber', 1, 1);
				$this->addAttribute('issueDate', 'issueDate', 1, 1);
				$this->addAttribute('featureName', 'featureName', 1, MAX_OCCUR);
				$this->addAttribute('graphic', 'graphic', 0, MAX_OCCUR);
				
				//FeatureBindings
				$this->addAttribute('CatalogueElementsAssociation_hasProducts_CatalogueElements', 'CatalogueElements', 1, MAX_OCCUR );
				
				//InformationBindings
				$this->addAttribute('CatalogueContanctsAssociation_catalogueContact_ContactDetails', 'ContactDetails', 0, 1);
				
			}
		}
	
		/**
		* FeatureType CatalogueElements
		*
		* CatalogueElements
		* 
		* 
		* @property classification[0..1] classification |Defined in CatalogueElements
		* @property copyright[0..1] copyright |Defined in CatalogueElements
		* @property dataTypeVersion[0..1] dataTypeVersion |Defined in CatalogueElements
		* @property issueDate[1..1] issueDate |Defined in CatalogueElements
		* @property purpose[0..1] purpose |Defined in CatalogueElements
		* @property verticalDatum[0..1] verticalDatum |Defined in CatalogueElements
		* @property featureName[0..*] featureName |Defined in CatalogueElements
		* @property information[0..*] information |Defined in CatalogueElements
		* @property price[0..*] price |Defined in CatalogueElements
		* @property sourceIndication[0..1] sourceIndication |Defined in CatalogueElements
		* @property geometry[0..*] geometry |Defined in CatalogueElements
		*/
		 class CatalogueElements extends AbstractFeatureType
		{
		
			/**
			* FeatureType CatalogueElements
			*
			* CatalogueElements
			* 
			* 
		* @property classification[0..1] classification |Defined in CatalogueElements
		* @property copyright[0..1] copyright |Defined in CatalogueElements
		* @property dataTypeVersion[0..1] dataTypeVersion |Defined in CatalogueElements
		* @property issueDate[1..1] issueDate |Defined in CatalogueElements
		* @property purpose[0..1] purpose |Defined in CatalogueElements
		* @property verticalDatum[0..1] verticalDatum |Defined in CatalogueElements
		* @property featureName[0..*] featureName |Defined in CatalogueElements
		* @property information[0..*] information |Defined in CatalogueElements
		* @property price[0..*] price |Defined in CatalogueElements
		* @property sourceIndication[0..1] sourceIndication |Defined in CatalogueElements
		* @property geometry[0..*] geometry |Defined in CatalogueElements
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('classification', 'classification', 0, 1);
				$this->addAttribute('copyright', 'copyright', 0, 1);
				$this->addAttribute('dataTypeVersion', 'dataTypeVersion', 0, 1);
				$this->addAttribute('issueDate', 'issueDate', 1, 1);
				$this->addAttribute('purpose', 'purpose', 0, 1);
				$this->addAttribute('verticalDatum', 'verticalDatum', 0, 1);
				$this->addAttribute('featureName', 'featureName', 0, MAX_OCCUR);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('price', 'price', 0, MAX_OCCUR);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, 1);
				$this->addAttribute('geometry', 'geometry', 0, MAX_OCCUR);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType AbstractChartProducts
		*
		* AbstractChartProducts
		* 
		* 
		* @property chartNumber[1..1] chartNumber |Defined in AbstractChartProducts
		* @property compilationScale[0..1] compilationScale |Defined in AbstractChartProducts
		* @property editionNumber[0..1] editionNumber |Defined in AbstractChartProducts
		* @property producerCode[0..1] producerCode |Defined in AbstractChartProducts
		* @property producerNation[0..1] producerNation |Defined in AbstractChartProducts
		* @property specificUsage[0..1] specificUsage |Defined in AbstractChartProducts
		* @property classification[0..1] classification |Defined in CatalogueElements
		* @property copyright[0..1] copyright |Defined in CatalogueElements
		* @property dataTypeVersion[0..1] dataTypeVersion |Defined in CatalogueElements
		* @property issueDate[1..1] issueDate |Defined in CatalogueElements
		* @property purpose[0..1] purpose |Defined in CatalogueElements
		* @property verticalDatum[0..1] verticalDatum |Defined in CatalogueElements
		* @property featureName[0..*] featureName |Defined in CatalogueElements
		* @property information[0..*] information |Defined in CatalogueElements
		* @property price[0..*] price |Defined in CatalogueElements
		* @property sourceIndication[0..1] sourceIndication |Defined in CatalogueElements
		* @property geometry[0..*] geometry |Defined in CatalogueElements
		*/
		abstract class AbstractChartProducts extends CatalogueElements
		{
		
			/**
			* FeatureType AbstractChartProducts
			*
			* AbstractChartProducts
			* 
			* 
		* @property chartNumber[1..1] chartNumber |Defined in AbstractChartProducts
		* @property compilationScale[0..1] compilationScale |Defined in AbstractChartProducts
		* @property editionNumber[0..1] editionNumber |Defined in AbstractChartProducts
		* @property producerCode[0..1] producerCode |Defined in AbstractChartProducts
		* @property producerNation[0..1] producerNation |Defined in AbstractChartProducts
		* @property specificUsage[0..1] specificUsage |Defined in AbstractChartProducts
		* @property classification[0..1] classification |Defined in CatalogueElements
		* @property copyright[0..1] copyright |Defined in CatalogueElements
		* @property dataTypeVersion[0..1] dataTypeVersion |Defined in CatalogueElements
		* @property issueDate[1..1] issueDate |Defined in CatalogueElements
		* @property purpose[0..1] purpose |Defined in CatalogueElements
		* @property verticalDatum[0..1] verticalDatum |Defined in CatalogueElements
		* @property featureName[0..*] featureName |Defined in CatalogueElements
		* @property information[0..*] information |Defined in CatalogueElements
		* @property price[0..*] price |Defined in CatalogueElements
		* @property sourceIndication[0..1] sourceIndication |Defined in CatalogueElements
		* @property geometry[0..*] geometry |Defined in CatalogueElements
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('chartNumber', 'chartNumber', 1, 1);
				$this->addAttribute('compilationScale', 'compilationScale', 0, 1);
				$this->addAttribute('editionNumber', 'editionNumber', 0, 1);
				$this->addAttribute('producerCode', 'producerCode', 0, 1);
				$this->addAttribute('producerNation', 'producerNation', 0, 1);
				$this->addAttribute('specificUsage', 'specificUsage', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType NauticalProducts
		*
		* NauticalProducts
		* 
		* 
		* @property textPlaceCorner[0..1] textPlaceCorner |Defined in NauticalProducts
		* @property content[1..1] content |Defined in NauticalProducts
		* @property productSpecification[0..1] productSpecification |Defined in NauticalProducts
		* @property datasetName[0..1] datasetName |Defined in NauticalProducts
		* @property publicationNumber[1..1] publicationNumber |Defined in NauticalProducts
		* @property classification[0..1] classification |Defined in CatalogueElements
		* @property copyright[0..1] copyright |Defined in CatalogueElements
		* @property dataTypeVersion[0..1] dataTypeVersion |Defined in CatalogueElements
		* @property issueDate[1..1] issueDate |Defined in CatalogueElements
		* @property purpose[0..1] purpose |Defined in CatalogueElements
		* @property verticalDatum[0..1] verticalDatum |Defined in CatalogueElements
		* @property featureName[0..*] featureName |Defined in CatalogueElements
		* @property information[0..*] information |Defined in CatalogueElements
		* @property price[0..*] price |Defined in CatalogueElements
		* @property sourceIndication[0..1] sourceIndication |Defined in CatalogueElements
		* @property geometry[0..*] geometry |Defined in CatalogueElements
		*/
		 class NauticalProducts extends CatalogueElements
		{
		
			/**
			* FeatureType NauticalProducts
			*
			* NauticalProducts
			* 
			* 
		* @property textPlaceCorner[0..1] textPlaceCorner |Defined in NauticalProducts
		* @property content[1..1] content |Defined in NauticalProducts
		* @property productSpecification[0..1] productSpecification |Defined in NauticalProducts
		* @property datasetName[0..1] datasetName |Defined in NauticalProducts
		* @property publicationNumber[1..1] publicationNumber |Defined in NauticalProducts
		* @property classification[0..1] classification |Defined in CatalogueElements
		* @property copyright[0..1] copyright |Defined in CatalogueElements
		* @property dataTypeVersion[0..1] dataTypeVersion |Defined in CatalogueElements
		* @property issueDate[1..1] issueDate |Defined in CatalogueElements
		* @property purpose[0..1] purpose |Defined in CatalogueElements
		* @property verticalDatum[0..1] verticalDatum |Defined in CatalogueElements
		* @property featureName[0..*] featureName |Defined in CatalogueElements
		* @property information[0..*] information |Defined in CatalogueElements
		* @property price[0..*] price |Defined in CatalogueElements
		* @property sourceIndication[0..1] sourceIndication |Defined in CatalogueElements
		* @property geometry[0..*] geometry |Defined in CatalogueElements
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('textPlaceCorner', 'textPlaceCorner', 0, 1);
				$this->addAttribute('content', 'content', 1, 1);
				$this->addAttribute('productSpecification', 'productSpecification', 0, 1);
				$this->addAttribute('datasetName', 'datasetName', 0, 1);
				$this->addAttribute('publicationNumber', 'publicationNumber', 1, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType ElectronicChart
		*
		* ElectronicChart
		* 
		* 
		* @property textPlaceCorner[0..1] textPlaceCorner |Defined in ElectronicChart
		* @property datasetName[0..*] datasetName |Defined in ElectronicChart
		* @property updateDate[0..1] updateDate |Defined in ElectronicChart
		* @property updateNumber[0..1] updateNumber |Defined in ElectronicChart
		* @property productSpecification[1..1] productSpecification |Defined in ElectronicChart
		* @property chartNumber[1..1] chartNumber |Defined in AbstractChartProducts
		* @property compilationScale[0..1] compilationScale |Defined in AbstractChartProducts
		* @property editionNumber[0..1] editionNumber |Defined in AbstractChartProducts
		* @property producerCode[0..1] producerCode |Defined in AbstractChartProducts
		* @property producerNation[0..1] producerNation |Defined in AbstractChartProducts
		* @property specificUsage[0..1] specificUsage |Defined in AbstractChartProducts
		* @property classification[0..1] classification |Defined in CatalogueElements
		* @property copyright[0..1] copyright |Defined in CatalogueElements
		* @property dataTypeVersion[0..1] dataTypeVersion |Defined in CatalogueElements
		* @property issueDate[1..1] issueDate |Defined in CatalogueElements
		* @property purpose[0..1] purpose |Defined in CatalogueElements
		* @property verticalDatum[0..1] verticalDatum |Defined in CatalogueElements
		* @property featureName[0..*] featureName |Defined in CatalogueElements
		* @property information[0..*] information |Defined in CatalogueElements
		* @property price[0..*] price |Defined in CatalogueElements
		* @property sourceIndication[0..1] sourceIndication |Defined in CatalogueElements
		* @property geometry[0..*] geometry |Defined in CatalogueElements
		*/
		 class ElectronicChart extends AbstractChartProducts
		{
		
			/**
			* FeatureType ElectronicChart
			*
			* ElectronicChart
			* 
			* 
		* @property textPlaceCorner[0..1] textPlaceCorner |Defined in ElectronicChart
		* @property datasetName[0..*] datasetName |Defined in ElectronicChart
		* @property updateDate[0..1] updateDate |Defined in ElectronicChart
		* @property updateNumber[0..1] updateNumber |Defined in ElectronicChart
		* @property productSpecification[1..1] productSpecification |Defined in ElectronicChart
		* @property chartNumber[1..1] chartNumber |Defined in AbstractChartProducts
		* @property compilationScale[0..1] compilationScale |Defined in AbstractChartProducts
		* @property editionNumber[0..1] editionNumber |Defined in AbstractChartProducts
		* @property producerCode[0..1] producerCode |Defined in AbstractChartProducts
		* @property producerNation[0..1] producerNation |Defined in AbstractChartProducts
		* @property specificUsage[0..1] specificUsage |Defined in AbstractChartProducts
		* @property classification[0..1] classification |Defined in CatalogueElements
		* @property copyright[0..1] copyright |Defined in CatalogueElements
		* @property dataTypeVersion[0..1] dataTypeVersion |Defined in CatalogueElements
		* @property issueDate[1..1] issueDate |Defined in CatalogueElements
		* @property purpose[0..1] purpose |Defined in CatalogueElements
		* @property verticalDatum[0..1] verticalDatum |Defined in CatalogueElements
		* @property featureName[0..*] featureName |Defined in CatalogueElements
		* @property information[0..*] information |Defined in CatalogueElements
		* @property price[0..*] price |Defined in CatalogueElements
		* @property sourceIndication[0..1] sourceIndication |Defined in CatalogueElements
		* @property geometry[0..*] geometry |Defined in CatalogueElements
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('textPlaceCorner', 'textPlaceCorner', 0, 1);
				$this->addAttribute('datasetName', 'datasetName', 0, MAX_OCCUR);
				$this->addAttribute('updateDate', 'updateDate', 0, 1);
				$this->addAttribute('updateNumber', 'updateNumber', 0, 1);
				$this->addAttribute('productSpecification', 'productSpecification', 1, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
		/**
		* FeatureType PaperChart
		*
		* PaperChart
		* 
		* 
		* @property textPlaceCorner[0..1] textPlaceCorner |Defined in PaperChart
		* @property frameDimensions[0..1] frameDimensions |Defined in PaperChart
		* @property printInformation[0..1] printInformation |Defined in PaperChart
		* @property chartNumber[1..1] chartNumber |Defined in AbstractChartProducts
		* @property compilationScale[0..1] compilationScale |Defined in AbstractChartProducts
		* @property editionNumber[0..1] editionNumber |Defined in AbstractChartProducts
		* @property producerCode[0..1] producerCode |Defined in AbstractChartProducts
		* @property producerNation[0..1] producerNation |Defined in AbstractChartProducts
		* @property specificUsage[0..1] specificUsage |Defined in AbstractChartProducts
		* @property classification[0..1] classification |Defined in CatalogueElements
		* @property copyright[0..1] copyright |Defined in CatalogueElements
		* @property dataTypeVersion[0..1] dataTypeVersion |Defined in CatalogueElements
		* @property issueDate[1..1] issueDate |Defined in CatalogueElements
		* @property purpose[0..1] purpose |Defined in CatalogueElements
		* @property verticalDatum[0..1] verticalDatum |Defined in CatalogueElements
		* @property featureName[0..*] featureName |Defined in CatalogueElements
		* @property information[0..*] information |Defined in CatalogueElements
		* @property price[0..*] price |Defined in CatalogueElements
		* @property sourceIndication[0..1] sourceIndication |Defined in CatalogueElements
		* @property geometry[0..*] geometry |Defined in CatalogueElements
		*/
		 class PaperChart extends AbstractChartProducts
		{
		
			/**
			* FeatureType PaperChart
			*
			* PaperChart
			* 
			* 
		* @property textPlaceCorner[0..1] textPlaceCorner |Defined in PaperChart
		* @property frameDimensions[0..1] frameDimensions |Defined in PaperChart
		* @property printInformation[0..1] printInformation |Defined in PaperChart
		* @property chartNumber[1..1] chartNumber |Defined in AbstractChartProducts
		* @property compilationScale[0..1] compilationScale |Defined in AbstractChartProducts
		* @property editionNumber[0..1] editionNumber |Defined in AbstractChartProducts
		* @property producerCode[0..1] producerCode |Defined in AbstractChartProducts
		* @property producerNation[0..1] producerNation |Defined in AbstractChartProducts
		* @property specificUsage[0..1] specificUsage |Defined in AbstractChartProducts
		* @property classification[0..1] classification |Defined in CatalogueElements
		* @property copyright[0..1] copyright |Defined in CatalogueElements
		* @property dataTypeVersion[0..1] dataTypeVersion |Defined in CatalogueElements
		* @property issueDate[1..1] issueDate |Defined in CatalogueElements
		* @property purpose[0..1] purpose |Defined in CatalogueElements
		* @property verticalDatum[0..1] verticalDatum |Defined in CatalogueElements
		* @property featureName[0..*] featureName |Defined in CatalogueElements
		* @property information[0..*] information |Defined in CatalogueElements
		* @property price[0..*] price |Defined in CatalogueElements
		* @property sourceIndication[0..1] sourceIndication |Defined in CatalogueElements
		* @property geometry[0..*] geometry |Defined in CatalogueElements
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('textPlaceCorner', 'textPlaceCorner', 0, 1);
				$this->addAttribute('frameDimensions', 'frameDimensions', 0, 1);
				$this->addAttribute('printInformation', 'printInformation', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
	
	
	//********************************* INFORMATION TYPES ***********************************************************
	
		/**
		* InformationType ContactDetails
		*
		* ContactDetails
		* 
		* 
		* @property contactAddress[0..*] contactAddress |Defined in ContactDetails
		* @property information[0..*] information |Defined in ContactDetails
		* @property onlineResource[0..*] onlineResource |Defined in ContactDetails
		* @property sourceIndication[0..*] sourceIndication |Defined in ContactDetails
		* @property telecommunications[0..*] telecommunications |Defined in ContactDetails
		* @property contactInstructions[0..1] contactInstructions |Defined in ContactDetails
		*/
		 class ContactDetails extends AbstractInformationType
		{
			
			/**
			* InformationType ContactDetails
			*
			* ContactDetails
			* 
			* 
		* @property contactAddress[0..*] contactAddress |Defined in ContactDetails
		* @property information[0..*] information |Defined in ContactDetails
		* @property onlineResource[0..*] onlineResource |Defined in ContactDetails
		* @property sourceIndication[0..*] sourceIndication |Defined in ContactDetails
		* @property telecommunications[0..*] telecommunications |Defined in ContactDetails
		* @property contactInstructions[0..1] contactInstructions |Defined in ContactDetails
			*/
			public function __construct()
			{
				parent::__construct();
				
				//AttributeBindings
				$this->addAttribute('contactAddress', 'contactAddress', 0, MAX_OCCUR);
				$this->addAttribute('information', 'information', 0, MAX_OCCUR);
				$this->addAttribute('onlineResource', 'onlineResource', 0, MAX_OCCUR);
				$this->addAttribute('sourceIndication', 'sourceIndication', 0, MAX_OCCUR);
				$this->addAttribute('telecommunications', 'telecommunications', 0, MAX_OCCUR);
				$this->addAttribute('contactInstructions', 'contactInstructions', 0, 1);
				
				//FeatureBindings
				
				//InformationBindings
				
			}
		}
	
	
	//********************************* ROLES ***********************************************************
	
	
	//********************************* FeatureAssociations ***********************************************************
	
	
	
	//********************************* InformationAssociations ***********************************************************
	?>